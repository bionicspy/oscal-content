{
  "catalog": {
    "uuid": "bcd7869e-6336-5582-8f2e-35000ef9a15a",
    "metadata": {
      "title": "CIS AlmaLinux OS 9 Benchmark - Level 2 - Server",
      "last-modified": "2024-06-24T15:29:34.000000-00:00",
      "version": "2.0.0",
      "oscal-version": "1.1.2",
      "revisions": [],
      "props": [
        {
          "name": "keywords",
          "value": "Assessment, assessment plan, assurance, availability, computer security, confidentiality, control, control assessment, cybersecurity, information security, information system, integrity, personally identifiable information, OSCAL, Open Security Controls Assessment Language, Privacy Act, privacy controls, privacy functions, privacy requirements, Risk Management Framework, security controls, security functions, security requirements, system, system security"
        }
      ],
      "links": [
        {
          "href": "#cbbde88b-e14e-40c2-8a1a-c96a4718f0b5",
          "rel": "alternate"
        },
        {
          "href": "#9f6eafb6-d1c4-4df3-8a62-cfb0de5cc517",
          "rel": "canonical"
        },
        {
          "href": "#a7e5c594-1c94-47e3-bfb4-6977dcc704a1",
          "rel": "excel"
        }
      ],
      "roles": [
        {
          "id": "creator",
          "title": "Document creator"
        },
        {
          "id": "contact",
          "title": "Contact"
        }
      ],
      "parties": [
        {
          "uuid": "d12ec12b-41f3-436c-b84c-c9909ee0bf2c",
          "type": "organization",
          "name": "Center for Internet Security, Inc.",
          "email-addresses": [
            "learn@cisecurity.org"
          ],
          "addresses": [
            {
              "addr-lines": [
                "Center for Internet Security, Inc.",
                "31 Tech Valley Drive"
              ],
              "city": "East Greenbush",
              "state": "NY",
              "postal-code": "12061"
            }
          ]
        }
      ],
      "responsible-parties": [
        {
          "role-id": "creator",
          "party-uuids": [
            "d12ec12b-41f3-436c-b84c-c9909ee0bf2c"
          ]
        },
        {
          "role-id": "contact",
          "party-uuids": [
            "d12ec12b-41f3-436c-b84c-c9909ee0bf2c"
          ]
        }
      ]
    },
    "groups": [
      {
        "id": "section-1",
        "title": "Initial Setup",
        "props": [
          {
            "name": "label",
            "value": "1"
          }
        ],
        "controls": [],
        "groups": [
          {
            "id": "section-1-1",
            "title": "Filesystem",
            "props": [
              {
                "name": "label",
                "value": "1.1"
              }
            ],
            "controls": [],
            "groups": [
              {
                "id": "section-1-1-1",
                "title": "Configure Filesystem Kernel Modules",
                "props": [
                  {
                    "name": "label",
                    "value": "1.1.1"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-1.1.1.1",
                    "title": "Ensure cramfs kernel module is not available",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.1.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.1.1.1_statement",
                        "prose": "The `cramfs` filesystem type is a compressed read-only Linux filesystem embedded in small footprint systems. A `cramfs` image can be used without having to first decompress the image."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.1.1.1_assessment-objective",
                        "prose": "Rationale: Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.1.1.1_guidance",
                        "prose": "Run the following script to unload and disable the `cramfs` module:\n\n**- IF -** the `cramfs` kernel module is available in ANY installed kernel:\n - Create a file ending in `.conf` with `install cramfs /bin/false` in the `/etc/modprobe.d/` directory\n - Create a file ending in `.conf` with `blacklist cramfs` in the `/etc/modprobe.d/` directory\n - Run `modprobe -r cramfs 2>/dev/null; rmmod cramfs 2>/dev/null` to remove `cramfs` from the kernel\n\n**- IF -** the `cramfs` kernel module is not available on the system, or pre-compiled into the kernel, no remediation is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n unset a_output2; l_output3=\"\" l_dl=\"\" # unset arrays and clear variables\n l_mod_name=\"cramfs\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_fix()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output2+=(\" - unloading kernel module: \\\"$l_mod_name\\\"\")\n modprobe -r \"$l_mod_name\" 2>/dev/null; rmmod \"$l_mod_name\" 2>/dev/null\n fi\n if ! grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - setting kernel module: \\\"$l_mod_name\\\" to \\\"/bin/false\\\"\")\n printf '%s\\n' \"install $l_mod_name /bin/false\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n if ! grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - denylisting kernel module: \\\"$l_mod_name\\\"\")\n printf '%s\\n' \"blacklist $l_mod_name\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_fix\n else\n echo -e \" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\"\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"${a_output2[@]}\"\n echo -e \"\\n - remediation of kernel module: \\\"$l_mod_name\\\" complete\\n\"\n}\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.1.1.1_assessment-method",
                        "prose": "Run the following script to verify:\n\n**- IF -** the `cramfs` kernel module is available in ANY installed kernel, verify:\n- An entry including `/bin/true` or `/bin/false` exists in a file within the `/etc/modprobe.d/` directory\n- The module is deny listed in a file within the `/etc/modprobe.d/` directory\n- The module is not loaded in the running kernel\n\n**- IF -** the `cramfs` kernel module is not available on the system, or pre-compiled into the kernel, no additional configuration is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n l_output3=\"\" l_dl=\"\" # clear variables\n unset a_output; unset a_output2 # unset arrays\n l_mod_name=\"cramfs\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_chk()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if ! lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loaded\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loaded\")\n fi\n if grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loadable\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loadable\")\n fi\n if grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is deny listed\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is not deny listed\")\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_chk\n else\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\")\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" - Reason(s) for audit failure:\" \"${a_output2[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.1.1.2",
                    "title": "Ensure freevxfs kernel module is not available",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.1.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.1.1.2_statement",
                        "prose": "The `freevxfs` filesystem type is a free version of the Veritas type filesystem. This is the primary filesystem type for HP-UX operating systems."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.1.1.2_assessment-objective",
                        "prose": "Rationale: Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.1.1.2_guidance",
                        "prose": "Run the following script to unload and disable the `freevxfs` module:\n\n**- IF -** the `freevxfs` kernel module is available in ANY installed kernel:\n - Create a file ending in `.conf` with `install freevxfs /bin/false` in the `/etc/modprobe.d/` directory\n - Create a file ending in `.conf` with `blacklist freevxfs` in the `/etc/modprobe.d/` directory\n - Run `modprobe -r freevxfs 2>/dev/null; rmmod freevxfs 2>/dev/null` to remove `freevxfs` from the kernel\n\n**- IF -** the `freevxfs` kernel module is not available on the system, or pre-compiled into the kernel, no remediation is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n unset a_output2; l_output3=\"\" l_dl=\"\" # unset arrays and clear variables\n l_mod_name=\"freevxfs\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_fix()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output2+=(\" - unloading kernel module: \\\"$l_mod_name\\\"\")\n modprobe -r \"$l_mod_name\" 2>/dev/null; rmmod \"$l_mod_name\" 2>/dev/null\n fi\n if ! grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - setting kernel module: \\\"$l_mod_name\\\" to \\\"/bin/false\\\"\")\n printf '%s\\n' \"install $l_mod_name /bin/false\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n if ! grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - denylisting kernel module: \\\"$l_mod_name\\\"\")\n printf '%s\\n' \"blacklist $l_mod_name\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_fix\n else\n echo -e \" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\"\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"${a_output2[@]}\"\n echo -e \"\\n - remediation of kernel module: \\\"$l_mod_name\\\" complete\\n\"\n}\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.1.1.2_assessment-method",
                        "prose": "Run the following script to verify:\n\n**- IF -** the `freevxfs` kernel module is available in ANY installed kernel, verify:\n- An entry including `/bin/true` or `/bin/false` exists in a file within the `/etc/modprobe.d/` directory\n- The module is deny listed in a file within the `/etc/modprobe.d/` directory\n- The module is not loaded in the running kernel\n\n**- IF -** the `freevxfs` kernel module is not available on the system, or pre-compiled into the kernel, no additional configuration is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n l_output3=\"\" l_dl=\"\" # clear variables\n unset a_output; unset a_output2 # unset arrays\n l_mod_name=\"freevxfs\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_chk()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if ! lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loaded\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loaded\")\n fi\n if grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loadable\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loadable\")\n fi\n if grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is deny listed\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is not deny listed\")\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_chk\n else\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\")\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" - Reason(s) for audit failure:\" \"${a_output2[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.1.1.3",
                    "title": "Ensure hfs kernel module is not available",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.1.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.1.1.3_statement",
                        "prose": "The `hfs` filesystem type is a hierarchical filesystem that allows you to mount Mac OS filesystems."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.1.1.3_assessment-objective",
                        "prose": "Rationale: Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.1.1.3_guidance",
                        "prose": "Run the following script to unload and disable the `hfs` module:\n\n**- IF -** the `hfs` kernel module is available in ANY installed kernel:\n - Create a file ending in `.conf` with `install hfs /bin/false` in the `/etc/modprobe.d/` directory\n - Create a file ending in `.conf` with `blacklist hfs` in the `/etc/modprobe.d/` directory\n - Run `modprobe -r hfs 2>/dev/null; rmmod hfs 2>/dev/null` to remove `hfs` from the kernel\n\n**- IF -** the `hfs` kernel module is not available on the system, or pre-compiled into the kernel, no remediation is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n unset a_output2; l_output3=\"\" l_dl=\"\" # unset arrays and clear variables\n l_mod_name=\"hfs\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_fix()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output2+=(\" - unloading kernel module: \\\"$l_mod_name\\\"\")\n modprobe -r \"$l_mod_name\" 2>/dev/null; rmmod \"$l_mod_name\" 2>/dev/null\n fi\n if ! grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - setting kernel module: \\\"$l_mod_name\\\" to \\\"/bin/false\\\"\")\n printf '%s\\n' \"install $l_mod_name /bin/false\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n if ! grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - denylisting kernel module: \\\"$l_mod_name\\\"\")\n printf '%s\\n' \"blacklist $l_mod_name\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_fix\n else\n echo -e \" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\"\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"${a_output2[@]}\"\n echo -e \"\\n - remediation of kernel module: \\\"$l_mod_name\\\" complete\\n\"\n}\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.1.1.3_assessment-method",
                        "prose": "Run the following script to verify:\n\n**- IF -** the `hfs` kernel module is available in ANY installed kernel, verify:\n- An entry including `/bin/true` or `/bin/false` exists in a file within the `/etc/modprobe.d/` directory\n- The module is deny listed in a file within the `/etc/modprobe.d/` directory\n- The module is not loaded in the running kernel\n\n**- IF -** the `hfs` kernel module is not available on the system, or pre-compiled into the kernel, no additional configuration is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n l_output3=\"\" l_dl=\"\" # clear variables\n unset a_output; unset a_output2 # unset arrays\n l_mod_name=\"hfs\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_chk()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if ! lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loaded\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loaded\")\n fi\n if grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loadable\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loadable\")\n fi\n if grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is deny listed\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is not deny listed\")\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_chk\n else\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\")\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" - Reason(s) for audit failure:\" \"${a_output2[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.1.1.4",
                    "title": "Ensure hfsplus kernel module is not available",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.1.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.1.1.4_statement",
                        "prose": "The `hfsplus` filesystem type is a hierarchical filesystem designed to replace `hfs` that allows you to mount Mac OS filesystems."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.1.1.4_assessment-objective",
                        "prose": "Rationale: Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.1.1.4_guidance",
                        "prose": "Run the following script to unload and disable the `hfsplus` module:\n\n**- IF -** the `hfsplus` kernel module is available in ANY installed kernel:\n - Create a file ending in `.conf` with `install hfsplus /bin/false` in the `/etc/modprobe.d/` directory\n - Create a file ending in `.conf` with `blacklist hfsplus` in the `/etc/modprobe.d/` directory\n - Run `modprobe -r hfsplus 2>/dev/null; rmmod hfsplus 2>/dev/null` to remove `hfsplus` from the kernel\n\n**- IF -** the `hfsplus` kernel module is not available on the system, or pre-compiled into the kernel, no remediation is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n unset a_output2; l_output3=\"\" l_dl=\"\" # unset arrays and clear variables\n l_mod_name=\"hfsplus\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_fix()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output2+=(\" - unloading kernel module: \\\"$l_mod_name\\\"\")\n modprobe -r \"$l_mod_name\" 2>/dev/null; rmmod \"$l_mod_name\" 2>/dev/null\n fi\n if ! grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - setting kernel module: \\\"$l_mod_name\\\" to \\\"/bin/false\\\"\")\n printf '%s\\n' \"install $l_mod_name /bin/false\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n if ! grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - denylisting kernel module: \\\"$l_mod_name\\\"\")\n printf '%s\\n' \"blacklist $l_mod_name\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_fix\n else\n echo -e \" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\"\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"${a_output2[@]}\"\n echo -e \"\\n - remediation of kernel module: \\\"$l_mod_name\\\" complete\\n\"\n}\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.1.1.4_assessment-method",
                        "prose": "Run the following script to verify:\n\n**- IF -** the `hfsplus` kernel module is available in ANY installed kernel, verify:\n- An entry including `/bin/true` or `/bin/false` exists in a file within the `/etc/modprobe.d/` directory\n- The module is deny listed in a file within the `/etc/modprobe.d/` directory\n- The module is not loaded in the running kernel\n\n**- IF -** the `hfsplus` kernel module is not available on the system, or pre-compiled into the kernel, no additional configuration is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n l_output3=\"\" l_dl=\"\" # clear variables\n unset a_output; unset a_output2 # unset arrays\n l_mod_name=\"hfsplus\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_chk()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if ! lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loaded\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loaded\")\n fi\n if grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loadable\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loadable\")\n fi\n if grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is deny listed\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is not deny listed\")\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_chk\n else\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\")\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" - Reason(s) for audit failure:\" \"${a_output2[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.1.1.5",
                    "title": "Ensure jffs2 kernel module is not available",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.1.5"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.1.1.5_statement",
                        "prose": "The `jffs2` (journaling flash filesystem 2) filesystem type is a log-structured filesystem used in flash memory devices."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.1.1.5_assessment-objective",
                        "prose": "Rationale: Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.1.1.5_guidance",
                        "prose": "Run the following script to unload and disable the `jffs2` module:\n\n**- IF -** the `jffs2` kernel module is available in ANY installed kernel:\n - Create a file ending in `.conf` with `install jffs2 /bin/false` in the `/etc/modprobe.d/` directory\n - Create a file ending in `.conf` with `blacklist jffs2` in the `/etc/modprobe.d/` directory\n - Run `modprobe -r jffs2 2>/dev/null; rmmod jffs2 2>/dev/null` to remove `jffs2` from the kernel\n\n**- IF -** the `jffs2` kernel module is not available on the system, or pre-compiled into the kernel, no remediation is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n unset a_output2; l_output3=\"\" l_dl=\"\" # unset arrays and clear variables\n l_mod_name=\"jffs2\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_fix()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output2+=(\" - unloading kernel module: \\\"$l_mod_name\\\"\")\n modprobe -r \"$l_mod_name\" 2>/dev/null; rmmod \"$l_mod_name\" 2>/dev/null\n fi\n if ! grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - setting kernel module: \\\"$l_mod_name\\\" to \\\"/bin/false\\\"\")\n printf '%s\\n' \"install $l_mod_name /bin/false\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n if ! grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - denylisting kernel module: \\\"$l_mod_name\\\"\")\n printf '%s\\n' \"blacklist $l_mod_name\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_fix\n else\n echo -e \" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\"\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"${a_output2[@]}\"\n echo -e \"\\n - remediation of kernel module: \\\"$l_mod_name\\\" complete\\n\"\n}\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.1.1.5_assessment-method",
                        "prose": "Run the following script to verify:\n\n**- IF -** the `jffs2` kernel module is available in ANY installed kernel, verify:\n- An entry including `/bin/true` or `/bin/false` exists in a file within the `/etc/modprobe.d/` directory\n- The module is deny listed in a file within the `/etc/modprobe.d/` directory\n- The module is not loaded in the running kernel\n\n**- IF -** the `jffs2` kernel module is not available on the system, or pre-compiled into the kernel, no additional configuration is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n l_output3=\"\" l_dl=\"\" # clear variables\n unset a_output; unset a_output2 # unset arrays\n l_mod_name=\"jffs2\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_chk()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if ! lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loaded\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loaded\")\n fi\n if grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loadable\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loadable\")\n fi\n if grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is deny listed\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is not deny listed\")\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_chk\n else\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\")\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" - Reason(s) for audit failure:\" \"${a_output2[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.1.1.8",
                    "title": "Ensure usb-storage kernel module is not available",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.1.8"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.1.1.8_statement",
                        "prose": "USB storage provides a means to transfer and store files ensuring persistence and availability of the files independent of network connection status. Its popularity and utility has led to USB-based malware being a simple and common means for network infiltration and a first step to establishing a persistent threat within a networked environment."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.1.1.8_assessment-objective",
                        "prose": "Rationale: Restricting USB access on the system will decrease the physical attack surface for a device and diminish the possible vectors to introduce malware.\nImpact: Disabling the `usb-storage` module will disable any usage of USB storage devices.\n\nIf requirements and local site policy allow the use of such devices, other solutions should be configured accordingly instead. One example of a commonly used solution is `USBGuard`."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.1.1.8_guidance",
                        "prose": "Run the following script to unload and disable the `usb-storage` module:\n\n**- IF -** the `usb-storage` kernel module is available in ANY installed kernel:\n - Create a file ending in `.conf` with `install usb-storage /bin/false` in the `/etc/modprobe.d/` directory\n - Create a file ending in `.conf` with `blacklist usb-storage` in the `/etc/modprobe.d/` directory\n - Run `modprobe -r usb-storage 2>/dev/null; rmmod usb-storage 2>/dev/null` to remove `usb-storage` from the kernel\n\n**- IF -** the `usb-storage` kernel module is not available on the system, or pre-compiled into the kernel, no remediation is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n unset a_output2; l_output3=\"\" l_dl=\"\" # unset arrays and clear variables\n l_mod_name=\"usb-storage\" # set module name\n l_mod_type=\"drivers\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_fix()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output2+=(\" - unloading kernel module: \\\"$l_mod_name\\\"\")\n modprobe -r \"$l_mod_name\" 2>/dev/null; rmmod \"$l_mod_name\" 2>/dev/null\n fi\n if ! grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - setting kernel module: \\\"$l_mod_name\\\" to \\\"/bin/false\\\"\")\n printf '%s\\n' \"install $l_mod_name /bin/false\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n if ! grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - denylisting kernel module: \\\"$l_mod_name\\\"\")\n printf '%s\\n' \"blacklist $l_mod_name\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_fix\n else\n echo -e \" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\"\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"${a_output2[@]}\"\n echo -e \"\\n - remediation of kernel module: \\\"$l_mod_name\\\" complete\\n\"\n}\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.1.1.8_assessment-method",
                        "prose": "Run the following script to verify:\n\n**- IF -** the `usb-storage` kernel module is available in ANY installed kernel, verify:\n- An entry including `/bin/true` or `/bin/false` exists in a file within the `/etc/modprobe.d/` directory\n- The module is deny listed in a file within the `/etc/modprobe.d/` directory\n- The module is not loaded in the running kernel\n\n**- IF -** the `usb-storage` kernel module is not available on the system, or pre-compiled into the kernel, no additional configuration is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n l_output3=\"\" l_dl=\"\" # clear variables\n unset a_output; unset a_output2 # unset arrays\n l_mod_name=\"usb-storage\" # set module name\n l_mod_type=\"drivers\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_chk()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if ! lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loaded\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loaded\")\n fi\n if grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loadable\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loadable\")\n fi\n if grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is deny listed\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is not deny listed\")\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_chk\n else\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\")\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" - Reason(s) for audit failure:\" \"${a_output2[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.1.1.9",
                    "title": "Ensure unused filesystems kernel modules are not available",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.1.9"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.1.1.9_statement",
                        "prose": "Filesystem kernel modules are pieces of code that can be dynamically loaded into the Linux kernel to extend its filesystem capabilities, or so-called base kernel, of an operating system. Filesystem kernel modules are typically used to add support for new hardware (as device drivers), or for adding system calls."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.1.1.9_assessment-objective",
                        "prose": "Rationale: While loadable filesystem kernel modules are a convenient method of modifying the running kernel, this can be abused by attackers on a compromised system to prevent detection of their processes or files, allowing them to maintain control over the system. Many rootkits make use of loadable filesystem kernel modules in this way. \n\nRemoving support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it. The following filesystem kernel modules have known CVE's and should be made unavailable if no dependencies exist:\n- `afs` - CVE-2022-37402\n- `ceph` - CVE-2022-0670\n- `cifs` - CVE-2022-29869 \n- `exfat` CVE-2022-29973 \n- `ext` CVE-2022-1184\n- `fat` CVE-2022-22043\n- `fscache` CVE-2022-3630 \n- `fuse` CVE-2023-0386 \n- `gfs2` CVE-2023-3212\n- `nfs_common` CVE-2023-6660\n- `nfsd` CVE-2022-43945\n- `smbfs_common` CVE-2022-2585\nImpact: This list may be quite extensive and covering all edges cases is difficult. Therefore, it's crucial to carefully consider the implications and dependencies before making any changes to the filesystem kernel module configurations."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.1.1.9_guidance",
                        "prose": "**- IF -** the module is available in the running kernel:\n- Unload the filesystem kernel module from the kernel\n- Create a file ending in `.conf` with install filesystem kernel modules `/bin/false` in the `/etc/modprobe.d/` directory\n- Create a file ending in `.conf` with deny list filesystem kernel modules in the `/etc/modprobe.d/` directory\n\n**WARNING**: unloading, disabling or denylisting filesystem modules that are in use on the system maybe FATAL. It is extremely important to thoroughly review the filesystems returned by the audit before following the remediation procedure.\n\n_Example of unloading the `gfs2`kernel module:_\n\n```\n# modprobe -r gfs2 2>/dev/null\n# rmmod gfs2 2>/dev/null\n```\n\n_Example of fully disabling the `gfs2` kernel module:_\n\n```\n# printf '%s\\n' \"blacklist gfs2\" \"install gfs2 /bin/false\" >> /etc/modprobe.d/gfs2.conf\n```\n\n**Note:** \n- Disabling a kernel module by modifying the command above for each unused filesystem kernel module\n- The example `gfs2` must be updated with the appropriate module name for the command or example script bellow to run correctly.\n\n**Below is an example Script that can be modified to use on various filesystem kernel modules manual remediation process:**\n\n_Example Script_\n\n```\n#!/usr/bin/env bash\n\n{\n unset a_output2; l_output3=\"\" l_dl=\"\" # unset arrays and clear variables\n l_mod_name=\"gfs2\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_fix()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output2+=(\" - unloading kernel module: \\\"$l_mod_name\\\"\")\n modprobe -r \"$l_mod_name\" 2>/dev/null; rmmod \"$l_mod_name\" 2>/dev/null\n fi\n if ! grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - setting kernel module: \\\"$l_mod_name\\\" to \\\"/bin/false\\\"\")\n printf '%s\\n' \"install $l_mod_name /bin/false\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n if ! grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - denylisting kernel module: \\\"$l_mod_name\\\"\")\n printf '%s\\n' \"blacklist $l_mod_name\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_fix\n else\n echo -e \" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\"\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"${a_output2[@]}\"\n echo -e \"\\n - remediation of kernel module: \\\"$l_mod_name\\\" complete\\n\"\n}\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.1.1.9_assessment-method",
                        "prose": "Run the following script to:\n- Look at the filesystem kernel modules available to the currently running kernel.\n- Exclude mounted filesystem kernel modules that don't currently have a CVE\n- List filesystem kernel modules that are not fully disabled, or are loaded into the kernel\n\nReview the generated output\n\n``` \n#! /usr/bin/env bash\n\n{\n a_output=(); a_output2=(); a_modprope_config=(); a_excluded=(); a_available_modules=()\n a_ignore=(\"xfs\" \"vfat\" \"ext2\" \"ext3\" \"ext4\")\n a_cve_exists=(\"afs\" \"ceph\" \"cifs\" \"exfat\" \"ext\" \"fat\" \"fscache\" \"fuse\" \"gfs2\" \"nfs_common\" \"nfsd\" \"smbfs_common\")\n f_module_chk()\n {\n l_out2=\"\"; grep -Pq -- \"\\b$l_mod_name\\b\" <<< \"${a_cve_exists[*]}\" && l_out2=\" <- CVE exists!\"\n if ! grep -Pq -- '\\bblacklist\\h+'\"$l_mod_name\"'\\b' <<< \"${a_modprope_config[*]}\"; then\n a_output2+=(\" - Kernel module: \\\"$l_mod_name\\\" is not fully disabled $l_out2\")\n elif ! grep -Pq -- '\\binstall\\h+'\"$l_mod_name\"'\\h+\\/bin\\/(false|true)\\b' <<< \"${a_modprope_config[*]}\"; then\n a_output2+=(\" - Kernel module: \\\"$l_mod_name\\\" is not fully disabled $l_out2\")\n fi\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n l_output2+=(\" - Kernel module: \\\"$l_mod_name\\\" is loaded\" \"\")\n fi\n }\n while IFS= read -r -d $'\\0' l_module_dir; do\n a_available_modules+=(\"$(basename \"$l_module_dir\")\")\n done < <(find \"$(readlink -f /lib/modules/\"$(uname -r)\"/kernel/fs)\" -mindepth 1 -maxdepth 1 -type d ! -empty -print0)\n while IFS= read -r l_exclude; do\n if grep -Pq -- \"\\b$l_exclude\\b\" <<< \"${a_cve_exists[*]}\"; then\n a_output2+=(\" - ** WARNING: kernel module: \\\"$l_exclude\\\" has a CVE and is currently mounted! **\")\n elif \n grep -Pq -- \"\\b$l_exclude\\b\" <<< \"${a_available_modules[*]}\"; then\n a_output+=(\" - Kernel module: \\\"$l_exclude\\\" is currently mounted - do NOT unload or disable\")\n fi\n ! grep -Pq -- \"\\b$l_exclude\\b\" <<< \"${a_ignore[*]}\" && a_ignore+=(\"$l_exclude\")\n done < <(findmnt -knD | awk '{print $2}' | sort -u)\n while IFS= read -r l_config; do\n a_modprope_config+=(\"$l_config\")\n done < <(modprobe --showconfig | grep -P '^\\h*(blacklist|install)')\n for l_mod_name in \"${a_available_modules[@]}\"; do # Iterate over all filesystem modules\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\"\n if grep -Pq -- \"\\b$l_mod_name\\b\" <<< \"${a_ignore[*]}\"; then\n a_excluded+=(\" - Kernel module: \\\"$l_mod_name\\\"\")\n else\n f_module_chk\n fi\n done\n [ \"${#a_excluded[@]}\" -gt 0 ] && printf '%s\\n' \"\" \" -- INFO --\" \\\n \"The following intentionally skipped\" \\\n \"${a_excluded[@]}\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \" - No unused filesystem kernel modules are enabled\" \"${a_output[@]}\" \"\"\n else\n printf '%s\\n' \"\" \"-- Audit Result: --\" \" ** REVIEW the following **\" \"${a_output2[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"\" \"-- Correctly set: --\" \"${a_output[@]}\" \"\"\n fi\n}\n``` \n\n**WARNING**: disabling or denylisting filesystem modules that are in use on the system may be FATAL. It is extremely important to thoroughly review this list.",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.1.1.6",
                    "title": "Ensure squashfs kernel module is not available",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.1.6"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.1.1.6_statement",
                        "prose": "The `squashfs` filesystem type is a compressed read-only Linux filesystem embedded in small footprint systems. A `squashfs` image can be used without having to first decompress the image."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.1.1.6_assessment-objective",
                        "prose": "Rationale: Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.\nImpact: As Snap packages utilize `squashfs` as a compressed filesystem, disabling `squashfs` will cause Snap packages to fail.\n\n`Snap` application packages of software are self-contained and work across a range of Linux distributions. This is unlike traditional Linux package management approaches, like APT or RPM, which require specifically adapted packages per Linux distribution on an application update and delay therefore application deployment from developers to their software's end-user. Snaps themselves have no dependency on any external store (\"App store\"), can be obtained from any source and can be therefore used for upstream software deployment."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.1.1.6_guidance",
                        "prose": "Run the following script to unload and disable the `udf` module:\n\n**- IF -** the `squashfs` kernel module is available in ANY installed kernel:\n - Create a file ending in `.conf` with `install squashfs /bin/false` in the `/etc/modprobe.d/` directory\n - Create a file ending in `.conf` with `blacklist squashfs` in the `/etc/modprobe.d/` directory\n - Run `modprobe -r squashfs 2>/dev/null; rmmod squashfs 2>/dev/null` to remove `squashfs` from the kernel\n\n**- IF -** the `squashfs` kernel module is not available on the system, or pre-compiled into the kernel, no remediation is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n unset a_output2; l_output3=\"\" l_dl=\"\" # unset arrays and clear variables\n l_mod_name=\"squashfs\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_fix()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output2+=(\" - unloading kernel module: \\\"$l_mod_name\\\"\")\n modprobe -r \"$l_mod_name\" 2>/dev/null; rmmod \"$l_mod_name\" 2>/dev/null\n fi\n if ! grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - setting kernel module: \\\"$l_mod_name\\\" to \\\"/bin/false\\\"\")\n printf '%s\\n' \"install $l_mod_name /bin/false\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n if ! grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - denylisting kernel module: \\\"$l_mod_name\\\"\")\n printf '%s\\n' \"blacklist $l_mod_name\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_fix\n else\n echo -e \" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\"\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"${a_output2[@]}\"\n echo -e \"\\n - remediation of kernel module: \\\"$l_mod_name\\\" complete\\n\"\n}\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.1.1.6_assessment-method",
                        "prose": "Run the following script to verify:\n\n**- IF -** the `squashfs` kernel module is available in ANY installed kernel, verify:\n- An entry including `/bin/true` or `/bin/false` exists in a file within the `/etc/modprobe.d/` directory\n- The module is deny listed in a file within the `/etc/modprobe.d/` directory\n- The module is not loaded in the running kernel\n\n**- IF -** the `squashfs` kernel module is not available on the system, or pre-compiled into the kernel, no additional configuration is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n l_output3=\"\" l_dl=\"\" # clear variables\n unset a_output; unset a_output2 # unset arrays\n l_mod_name=\"squashfs\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_chk()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if ! lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loaded\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loaded\")\n fi\n if grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loadable\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loadable\")\n fi\n if grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is deny listed\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is not deny listed\")\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_chk\n else\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\")\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" - Reason(s) for audit failure:\" \"${a_output2[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```\n\n**Note:** On operating systems where `squashfs` is pre-build into the kernel:\n- This is considered an acceptable \"passing\" state\n- The kernel **should not** be re-compiled to remove `squashfs`\n- This audit will return a passing state with \"module: \"squashfs\" doesn't exist in ...\"",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.1.1.7",
                    "title": "Ensure udf kernel module is not available",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.1.7"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.1.1.7_statement",
                        "prose": "The `udf` filesystem type is the universal disk format used to implement ISO/IEC 13346 and ECMA-167 specifications. This is an open vendor filesystem type for data storage on a broad range of media. This filesystem type is necessary to support writing DVDs and newer optical disc formats."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.1.1.7_assessment-objective",
                        "prose": "Rationale: Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.\nImpact: Microsoft Azure requires the usage of `udf`. \n\n`udf` **should not** be disabled on systems run on Microsoft Azure."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.1.1.7_guidance",
                        "prose": "Run the following script to unload and disable the `udf` module:\n\n**- IF -** the `udf` kernel module is available in ANY installed kernel:\n - Create a file ending in `.conf` with `install udf /bin/false` in the `/etc/modprobe.d/` directory\n - Create a file ending in `.conf` with `blacklist udf` in the `/etc/modprobe.d/` directory\n - Run `modprobe -r udf 2>/dev/null; rmmod udf 2>/dev/null` to remove `udf` from the kernel\n\n**- IF -** the `udf` kernel module is not available on the system, or pre-compiled into the kernel, no remediation is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n unset a_output2; l_output3=\"\" l_dl=\"\" # unset arrays and clear variables\n l_mod_name=\"udf\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_fix()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output2+=(\" - unloading kernel module: \\\"$l_mod_name\\\"\")\n modprobe -r \"$l_mod_name\" 2>/dev/null; rmmod \"$l_mod_name\" 2>/dev/null\n fi\n if ! grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - setting kernel module: \\\"$l_mod_name\\\" to \\\"/bin/false\\\"\")\n printf '%s\\n' \"install $l_mod_name /bin/false\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n if ! grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - denylisting kernel module: \\\"$l_mod_name\\\"\")\n printf '%s\\n' \"blacklist $l_mod_name\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_fix\n else\n echo -e \" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\"\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"${a_output2[@]}\"\n echo -e \"\\n - remediation of kernel module: \\\"$l_mod_name\\\" complete\\n\"\n}\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.1.1.7_assessment-method",
                        "prose": "Run the following script to verify:\n\n**- IF -** the `udf` kernel module is available in ANY installed kernel, verify:\n- An entry including `/bin/true` or `/bin/false` exists in a file within the `/etc/modprobe.d/` directory\n- The module is deny listed in a file within the `/etc/modprobe.d/` directory\n- The module is not loaded in the running kernel\n\n**- IF -** the `udf` kernel module is not available on the system, or pre-compiled into the kernel, no additional configuration is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n l_output3=\"\" l_dl=\"\" # clear variables\n unset a_output; unset a_output2 # unset arrays\n l_mod_name=\"udf\" # set module name\n l_mod_type=\"fs\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_chk()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b'\"$l_mod_name\"'\\b')\n if ! lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loaded\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loaded\")\n fi\n if grep -Pq -- '\\binstall\\h+'\"${l_mod_name/-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loadable\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loadable\")\n fi\n if grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name/-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is deny listed\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is not deny listed\")\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_chk\n else\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\")\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" - Reason(s) for audit failure:\" \"${a_output2[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              },
              {
                "id": "section-1-1-2",
                "title": "Configure Filesystem Partitions",
                "props": [
                  {
                    "name": "label",
                    "value": "1.1.2"
                  }
                ],
                "controls": [],
                "groups": [
                  {
                    "id": "section-1-1-2-1",
                    "title": "Configure /tmp",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.2.1"
                      }
                    ],
                    "controls": [
                      {
                        "id": "cis-1.1.2.1.1",
                        "title": "Ensure /tmp is a separate partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.1.1"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.1.1_statement",
                            "prose": "The `/tmp` directory is a world-writable directory used for temporary storage by all users and some applications.\n\n**- IF -** an entry for `/tmp` exists in `/etc/fstab` it will take precedence over entries in systemd default unit file.\n\n**Note:** In an environment where the main system is diskless and connected to iSCSI, entries in `/etc/fstab` may not take precedence.\n\n`/tmp` can be configured to use `tmpfs`. \n\n`tmpfs` puts everything into the kernel internal caches and grows and shrinks to accommodate the files it contains and is able to swap unneeded pages out to swap space. It has maximum size limits which can be adjusted on the fly via `mount -o remount`.\n\nSince `tmpfs` lives completely in the page cache and on swap, all `tmpfs` pages will be shown as \"Shmem\" in `/proc/meminfo` and \"Shared\" in `free`. Notice that these counters also include shared memory. The most reliable way to get the count is using `df` and `du`.\n\n`tmpfs` has three mount options for sizing:\n - `size`: The limit of allocated bytes for this `tmpfs` instance. The default is half of your physical RAM without swap. If you oversize your `tmpfs` instances the machine will deadlock since the OOM handler will not be able to free that memory.\n - `nr_blocks`: The same as size, but in blocks of PAGE_SIZE.\n - `nr_inodes`: The maximum number of inodes for this instance. The default is half of the number of your physical RAM pages, or (on a machine with highmem) the number of lowmem RAM pages, whichever is the lower.\n\nThese parameters accept a suffix k, m or g and can be changed on remount. The size parameter also accepts a suffix % to limit this `tmpfs` instance to that percentage of your physical RAM. The default, when neither `size` nor `nr_blocks` is specified, is `size=50%`."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.1.1_assessment-objective",
                            "prose": "Rationale: Making `/tmp` its own file system allows an administrator to set additional mount options such as the `noexec` option on the mount, making `/tmp` useless for an attacker to install executable code. It would also prevent an attacker from establishing a hard link to a system `setuid` program and wait for it to be updated. Once the program was updated, the hard link would be broken, and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw.\n\nThis can be accomplished by either mounting `tmpfs` to `/tmp`, or creating a separate partition for `/tmp`.\nImpact: By design files saved to `/tmp` should have no expectation of surviving a reboot of the system. `tmpfs` is ram based and all files stored to `tmpfs` will be lost when the system is rebooted.\n\nIf files need to be persistent through a reboot, they should be saved to `/var/tmp` not `/tmp`.\n\nSince the `/tmp` directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to `tmpfs` or a separate partition. \n\nRunning out of `/tmp` space is a problem regardless of what kind of filesystem lies under it, but in a configuration where `/tmp` is not a separate file system it will essentially have the whole disk available, as the default installation only creates a single `/` partition. On the other hand, a RAM-based `/tmp` (as with `tmpfs`) will almost certainly be much smaller, which can lead to applications filling up the filesystem much more easily. Another alternative is to create a dedicated partition for `/tmp` from a separate volume or disk. One of the downsides of a disk-based dedicated partition is that it will be slower than `tmpfs` which is RAM-based."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.1.1_guidance",
                            "prose": "First ensure that systemd is correctly configured to ensure that `/tmp` will be mounted at boot time.\n\n```\n# systemctl unmask tmp.mount\n```\n\nFor specific configuration requirements of the `/tmp` mount for your environment, modify `/etc/fstab`.\n\nExample of using `tmpfs` with specific mount options:\n\n```\ntmpfs /tmp tmpfs defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0\n```\n\n**Note:** the `size=2G` is an example of setting a specific size for `tmpfs`.\n\nExample of using a volume or disk with specific mount options. The source location of the volume or disk will vary depending on your environment:\n\n```\n<device> /tmp <fstype> defaults,nodev,nosuid,noexec 0 0\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.1.1_assessment-method",
                            "prose": "Run the following command and verify the output shows that `/tmp` is mounted. Particular requirements pertaining to mount options are covered in ensuing sections.\n\n```\n# findmnt -kn /tmp\n```\n\n_Example output:_\n\n```\n/tmp tmpfs tmpfs rw,nosuid,nodev,noexec\n```\n\nEnsure that systemd will mount the `/tmp` partition at boot time.\n\n```\n# systemctl is-enabled tmp.mount\n```\n\n_Example output:_\n\n```\ngenerated\n```\n\nVerify output is not `masked` or `disabled`.\n\n**Note:** By default, systemd will output `generated` if there is an entry in `/etc/fstab` for `/tmp`. This just means systemd will use the entry in `/etc/fstab` instead of its default unit file configuration for `/tmp`.",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.1.2",
                        "title": "Ensure nodev option set on /tmp partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.1.2"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.1.2_statement",
                            "prose": "The `nodev` mount option specifies that the filesystem cannot contain special devices."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.1.2_assessment-objective",
                            "prose": "Rationale: Since the `/tmp` filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in `/tmp`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.1.2_guidance",
                            "prose": "**- IF -** a separate partition exists for `/tmp`.\n\nEdit the `/etc/fstab` file and add `nodev` to the fourth field (mounting options) for the `/tmp` partition.\n\n_Example:_\n\n```\n<device> /tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/tmp` with the configured options:\n\n```\n# mount -o remount /tmp\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.1.2_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/tmp`, verify that the `nodev` option is set.\n\nRun the following command to verify that the `nodev` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /tmp | grep -v nodev\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.1.3",
                        "title": "Ensure nosuid option set on /tmp partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.1.3"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.1.3_statement",
                            "prose": "The `nosuid` mount option specifies that the filesystem cannot contain `setuid` files."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.1.3_assessment-objective",
                            "prose": "Rationale: Since the `/tmp` filesystem is only intended for temporary file storage, set this option to ensure that users cannot create `setuid` files in `/tmp`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.1.3_guidance",
                            "prose": "**- IF -** a separate partition exists for `/tmp`.\n\nEdit the `/etc/fstab` file and add `nosuid` to the fourth field (mounting options) for the `/tmp` partition.\n\n_Example:_\n\n```\n<device> /tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/tmp` with the configured options:\n\n```\n# mount -o remount /tmp\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.1.3_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/tmp`, verify that the `nosuid` option is set.\n\nRun the following command to verify that the `nosuid` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /tmp | grep -v nosuid\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.1.4",
                        "title": "Ensure noexec option set on /tmp partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.1.4"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.1.4_statement",
                            "prose": "The `noexec` mount option specifies that the filesystem cannot contain executable binaries."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.1.4_assessment-objective",
                            "prose": "Rationale: Since the `/tmp` filesystem is only intended for temporary file storage, set this option to ensure that users cannot run executable binaries from `/tmp`.\nImpact: Setting the `noexec` option on `/tmp` may prevent installation and/or updating of some 3rd party software."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.1.4_guidance",
                            "prose": "**- IF -** a separate partition exists for `/tmp`.\n\nEdit the `/etc/fstab` file and add `noexec` to the fourth field (mounting options) for the `/tmp` partition.\n\n_Example:_\n\n```\n<device> /tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/tmp` with the configured options:\n\n```\n# mount -o remount /tmp\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.1.4_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/tmp`, verify that the `noexec` option is set.\n\nRun the following command to verify that the `noexec` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /tmp | grep -v noexec\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "groups": []
                  },
                  {
                    "id": "section-1-1-2-2",
                    "title": "Configure /dev/shm",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.2.2"
                      }
                    ],
                    "controls": [
                      {
                        "id": "cis-1.1.2.2.1",
                        "title": "Ensure /dev/shm is a separate partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.2.1"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.2.1_statement",
                            "prose": "The `/dev/shm` directory is a world-writable directory that can function as shared memory that facilitates inter process communication (IPC)."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.2.1_assessment-objective",
                            "prose": "Rationale: Making `/dev/shm` its own file system allows an administrator to set additional mount options such as the `noexec` option on the mount, making `/dev/shm` useless for an attacker to install executable code. It would also prevent an attacker from establishing a hard link to a system `setuid` program and wait for it to be updated. Once the program was updated, the hard link would be broken and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw.\n\nThis can be accomplished by mounting `tmpfs` to `/dev/shm`.\nImpact: Since the `/dev/shm` directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to a separate partition.\n\n`/dev/shm` utilizing `tmpfs` can be resized using the `size={size}` parameter in the relevant entry in `/etc/fstab`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.2.1_guidance",
                            "prose": "For specific configuration requirements of the `/dev/shm` mount for your environment, modify `/etc/fstab`.\n\n_Example:_\n\n```\ntmpfs /dev/shm tmpfs defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.2.1_assessment-method",
                            "prose": "**- IF -** `/dev/shm` is to be used on the system, run the following command and verify the output shows that `/dev/shm` is mounted. Particular requirements pertaining to mount options are covered in ensuing sections.\n\n```\n# findmnt -kn /dev/shm\n```\n\n_Example output:_\n\n```\n/dev/shm tmpfs tmpfs rw,nosuid,nodev,noexec,relatime,seclabel\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.2.2",
                        "title": "Ensure nodev option set on /dev/shm partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.2.2"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.2.2_statement",
                            "prose": "The `nodev` mount option specifies that the filesystem cannot contain special devices."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.2.2_assessment-objective",
                            "prose": "Rationale: Since the `/dev/shm` filesystem is not intended to support devices, set this option to ensure that users cannot attempt to create special devices in `/dev/shm` partitions."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.2.2_guidance",
                            "prose": "**- IF -** a separate partition exists for `/dev/shm`.\n\nEdit the `/etc/fstab` file and add `nodev` to the fourth field (mounting options) for the `/dev/shm` partition. See the `fstab(5)` manual page for more information.\n\n_Example:_\n\n```\ntmpfs /dev/shm tmpfs defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/dev/shm` with the configured options:\n\n```\n# mount -o remount /dev/shm\n```\n\n**Note:** It is recommended to use `tmpfs` as the device/filesystem type as `/dev/shm` is used as shared memory space by applications."
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.2.2_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/dev/shm`, verify that the `nodev` option is set.\n\n```\n# findmnt -kn /dev/shm | grep -v 'nodev'\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.2.3",
                        "title": "Ensure nosuid option set on /dev/shm partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.2.3"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.2.3_statement",
                            "prose": "The `nosuid` mount option specifies that the filesystem cannot contain `setuid` files."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.2.3_assessment-objective",
                            "prose": "Rationale: Setting this option on a file system prevents users from introducing privileged programs onto the system and allowing non-root users to execute them."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.2.3_guidance",
                            "prose": "**- IF -** a separate partition exists for `/dev/shm`.\n\nEdit the `/etc/fstab` file and add `nosuid` to the fourth field (mounting options) for the `/dev/shm` partition. See the `fstab(5)` manual page for more information.\n\n_Example:_\n\n```\ntmpfs /dev/shm tmpfs defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/dev/shm` with the configured options:\n\n```\n# mount -o remount /dev/shm\n```\n\n**Note:** It is recommended to use `tmpfs` as the device/filesystem type as `/dev/shm` is used as shared memory space by applications."
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.2.3_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/dev/shm`, verify that the `nosuid` option is set.\n\n```\n# findmnt -kn /dev/shm | grep -v 'nosuid'\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.2.4",
                        "title": "Ensure noexec option set on /dev/shm partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.2.4"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.2.4_statement",
                            "prose": "The `noexec` mount option specifies that the filesystem cannot contain executable binaries."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.2.4_assessment-objective",
                            "prose": "Rationale: Setting this option on a file system prevents users from executing programs from shared memory. This deters users from introducing potentially malicious software on the system."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.2.4_guidance",
                            "prose": "**- IF -** a separate partition exists for `/dev/shm`.\n\nEdit the `/etc/fstab` file and add `noexec` to the fourth field (mounting options) for the `/dev/shm` partition.\n\n_Example:_\n\n```\ntmpfs /dev/shm tmpfs defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/dev/shm` with the configured options:\n\n```\n# mount -o remount /dev/shm\n```\n\n**Note:** It is recommended to use `tmpfs` as the device/filesystem type as `/dev/shm` is used as shared memory space by applications."
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.2.4_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/dev/shm`, verify that the `noexec` option is set.\n\n```\n# findmnt -kn /dev/shm | grep -v 'noexec'\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "groups": []
                  },
                  {
                    "id": "section-1-1-2-3",
                    "title": "Configure /home",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.2.3"
                      }
                    ],
                    "controls": [
                      {
                        "id": "cis-1.1.2.3.2",
                        "title": "Ensure nodev option set on /home partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.3.2"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.3.2_statement",
                            "prose": "The `nodev` mount option specifies that the filesystem cannot contain special devices."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.3.2_assessment-objective",
                            "prose": "Rationale: Since the `/home` filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in `/home`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.3.2_guidance",
                            "prose": "**- IF -** a separate partition exists for `/home`.\n\nEdit the `/etc/fstab` file and add `nodev` to the fourth field (mounting options) for the `/home` partition.\n\n_Example:_\n\n```\n<device> /home <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/home` with the configured options:\n\n```\n# mount -o remount /home\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.3.2_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/home`, verify that the `nodev` option is set.\n\nRun the following command to verify that the `nodev` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /home | grep -v nodev\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.3.3",
                        "title": "Ensure nosuid option set on /home partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.3.3"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.3.3_statement",
                            "prose": "The `nosuid` mount option specifies that the filesystem cannot contain `setuid` files."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.3.3_assessment-objective",
                            "prose": "Rationale: Since the `/home` filesystem is only intended for user file storage, set this option to ensure that users cannot create `setuid` files in `/home`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.3.3_guidance",
                            "prose": "**- IF -** a separate partition exists for `/home`.\n\nEdit the `/etc/fstab` file and add `nosuid` to the fourth field (mounting options) for the `/home` partition.\n\n_Example:_\n\n```\n<device> /home <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/home` with the configured options:\n\n```\n# mount -o remount /home\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.3.3_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/home`, verify that the `nosuid` option is set.\n\nRun the following command to verify that the `nosuid` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /home | grep -v nosuid\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.3.1",
                        "title": "Ensure separate partition exists for /home",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.3.1"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.3.1_statement",
                            "prose": "The `/home` directory is used to support disk storage needs of local users."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.3.1_assessment-objective",
                            "prose": "Rationale: The default installation only creates a single `/` partition. Since the `/home` directory contains user generated data, there is a risk of resource exhaustion. It will essentially have the whole disk available to fill up and impact the system as a whole. In addition, other operations on the system could fill up the disk unrelated to `/home` and impact all local users.\n\nConfiguring `/home` as its own file system allows an administrator to set additional mount options such as `noexec/nosuid/nodev`. These options limit an attacker's ability to create exploits on the system. In the case of `/home` options such as `usrquota/grpquota` may be considered to limit the impact that users can have on each other with regards to disk resource exhaustion. Other options allow for specific behavior. See `man mount` for exact details regarding filesystem-independent and filesystem-specific options.\n\nAs `/home` contains user data, care should be taken to ensure the security and integrity of the data and mount point.\nImpact: Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.3.1_guidance",
                            "prose": "For new installations, during installation create a custom partition setup and specify a separate partition for `/home`.\n\nFor systems that were previously installed, create a new partition and configure `/etc/fstab` as appropriate."
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.3.1_assessment-method",
                            "prose": "Run the following command and verify output shows `/home` is mounted:\n\n```\n# findmnt -kn /home\n\n/home /dev/sdb ext4 rw,nosuid,nodev,noexec,relatime,seclabel\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "groups": []
                  },
                  {
                    "id": "section-1-1-2-4",
                    "title": "Configure /var",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.2.4"
                      }
                    ],
                    "controls": [
                      {
                        "id": "cis-1.1.2.4.2",
                        "title": "Ensure nodev option set on /var partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.4.2"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.4.2_statement",
                            "prose": "The `nodev` mount option specifies that the filesystem cannot contain special devices."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.4.2_assessment-objective",
                            "prose": "Rationale: Since the `/var` filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in `/var`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.4.2_guidance",
                            "prose": "**- IF -** a separate partition exists for `/var`.\n\nEdit the `/etc/fstab` file and add `nodev` to the fourth field (mounting options) for the `/var` partition.\n\n_Example:_\n\n```\n<device> /var <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/var` with the configured options:\n\n```\n# mount -o remount /var\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.4.2_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/var`, verify that the `nodev` option is set.\n\nRun the following command to verify that the `nodev` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /var | grep -v nodev\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.4.3",
                        "title": "Ensure nosuid option set on /var partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.4.3"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.4.3_statement",
                            "prose": "The `nosuid` mount option specifies that the filesystem cannot contain `setuid` files."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.4.3_assessment-objective",
                            "prose": "Rationale: Since the `/var` filesystem is only intended for variable files such as logs, set this option to ensure that users cannot create `setuid` files in `/var`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.4.3_guidance",
                            "prose": "**- IF -** a separate partition exists for `/var`.\n\nEdit the `/etc/fstab` file and add `nosuid` to the fourth field (mounting options) for the `/var` partition.\n\n_Example:_\n\n```\n<device> /var <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/var` with the configured options:\n\n```\n# mount -o remount /var\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.4.3_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/var`, verify that the `nosuid` option is set.\n\nRun the following command to verify that the `nosuid` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /var | grep -v nosuid\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.4.1",
                        "title": "Ensure separate partition exists for /var",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.4.1"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.4.1_statement",
                            "prose": "The `/var` directory is used by daemons and other system services to temporarily store dynamic data. Some directories created by these processes may be world-writable."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.4.1_assessment-objective",
                            "prose": "Rationale: The reasoning for mounting `/var` on a separate partition is as follows.\n\nThe default installation only creates a single `/` partition. Since the `/var` directory may contain world writable files and directories, there is a risk of resource exhaustion. It will essentially have the whole disk available to fill up and impact the system. In addition, other operations on the system could fill up the disk unrelated to `/var` and cause unintended behavior across the system as the disk is full. See `man auditd.conf` for details.\n\nConfiguring `/var` as its own file system allows an administrator to set additional mount options such as `noexec/nosuid/nodev`. These options limit an attacker's ability to create exploits on the system. Other options allow for specific behavior. See `man mount` for exact details regarding filesystem-independent and filesystem-specific options.\n\nAn example of exploiting `/var` may be an attacker establishing a hard-link to a system `setuid` program and waiting for it to be updated. Once the program is updated, the hard-link can be broken and the attacker would have their own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw.\nImpact: Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.4.1_guidance",
                            "prose": "For new installations, during installation create a custom partition setup and specify a separate partition for `/var`.\n\nFor systems that were previously installed, create a new partition and configure `/etc/fstab` as appropriate."
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.4.1_assessment-method",
                            "prose": "Run the following command and verify output shows `/var` is mounted.\n\n_Example:_\n\n```\n# findmnt -kn /var\n\n/var /dev/sdb ext4 rw,nosuid,nodev,noexec,relatime,seclabel\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "groups": []
                  },
                  {
                    "id": "section-1-1-2-5",
                    "title": "Configure /var/tmp",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.2.5"
                      }
                    ],
                    "controls": [
                      {
                        "id": "cis-1.1.2.5.2",
                        "title": "Ensure nodev option set on /var/tmp partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.5.2"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.5.2_statement",
                            "prose": "The `nodev` mount option specifies that the filesystem cannot contain special devices."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.5.2_assessment-objective",
                            "prose": "Rationale: Since the `/var/tmp` filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in `/var/tmp`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.5.2_guidance",
                            "prose": "**- IF -** a separate partition exists for `/var/tmp`.\n\nEdit the `/etc/fstab` file and add `nodev` to the fourth field (mounting options) for the `/var/tmp` partition.\n\n_Example:_\n\n```\n<device> /var/tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/var/tmp` with the configured options:\n\n```\n# mount -o remount /var/tmp\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.5.2_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/var/tmp`, verify that the `nodev` option is set.\n\nRun the following command to verify that the `nodev` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /var/tmp | grep -v nodev\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.5.3",
                        "title": "Ensure nosuid option set on /var/tmp partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.5.3"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.5.3_statement",
                            "prose": "The `nosuid` mount option specifies that the filesystem cannot contain `setuid` files."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.5.3_assessment-objective",
                            "prose": "Rationale: Since the `/var/tmp` filesystem is only intended for temporary file storage, set this option to ensure that users cannot create `setuid` files in `/var/tmp`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.5.3_guidance",
                            "prose": "**- IF -** a separate partition exists for `/var/tmp`.\n\nEdit the `/etc/fstab` file and add `nosuid` to the fourth field (mounting options) for the `/var/tmp` partition.\n\n_Example:_\n\n```\n<device> /var/tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/var/tmp` with the configured options:\n\n```\n# mount -o remount /var/tmp\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.5.3_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/var/tmp`, verify that the `nosuid` option is set.\n\nRun the following command to verify that the `nosuid` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /var/tmp | grep -v nosuid\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.5.4",
                        "title": "Ensure noexec option set on /var/tmp partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.5.4"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.5.4_statement",
                            "prose": "The `noexec` mount option specifies that the filesystem cannot contain executable binaries."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.5.4_assessment-objective",
                            "prose": "Rationale: Since the `/var/tmp` filesystem is only intended for temporary file storage, set this option to ensure that users cannot run executable binaries from `/var/tmp`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.5.4_guidance",
                            "prose": "**- IF -** a separate partition exists for `/var/tmp`.\n\nEdit the `/etc/fstab` file and add `noexec` to the fourth field (mounting options) for the `/var/tmp` partition.\n\n_Example:_\n\n```\n<device> /var/tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/var/tmp` with the configured options:\n\n```\n# mount -o remount /var/tmp\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.5.4_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/var/tmp`, verify that the `noexec` option is set.\n\nRun the following command to verify that the `noexec` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /var/tmp | grep -v noexec\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.5.1",
                        "title": "Ensure separate partition exists for /var/tmp",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.5.1"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.5.1_statement",
                            "prose": "The `/var/tmp` directory is a world-writable directory used for temporary storage by all users and some applications. Temporary files residing in `/var/tmp` are to be preserved between reboots."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.5.1_assessment-objective",
                            "prose": "Rationale: The default installation only creates a single `/` partition. Since the `/var/tmp` directory is world-writable, there is a risk of resource exhaustion. In addition, other operations on the system could fill up the disk unrelated to `/var/tmp` and cause potential disruption to daemons as the disk is full.\n\nConfiguring `/var/tmp` as its own file system allows an administrator to set additional mount options such as `noexec/nosuid/nodev`. These options limit an attacker's ability to create exploits on the system.\nImpact: Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.5.1_guidance",
                            "prose": "For new installations, during installation create a custom partition setup and specify a separate partition for `/var/tmp`.\n\nFor systems that were previously installed, create a new partition and configure `/etc/fstab` as appropriate."
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.5.1_assessment-method",
                            "prose": "Run the following command and verify output shows `/var/tmp` is mounted.\n\n_Example:_\n\n```\n# findmnt -kn /var/tmp\n\n/var/tmp /dev/sdb ext4 rw,nosuid,nodev,noexec,relatime,seclabel\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "groups": []
                  },
                  {
                    "id": "section-1-1-2-6",
                    "title": "Configure /var/log",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.2.6"
                      }
                    ],
                    "controls": [
                      {
                        "id": "cis-1.1.2.6.2",
                        "title": "Ensure nodev option set on /var/log partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.6.2"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.6.2_statement",
                            "prose": "The `nodev` mount option specifies that the filesystem cannot contain special devices."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.6.2_assessment-objective",
                            "prose": "Rationale: Since the `/var/log` filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in `/var/log`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.6.2_guidance",
                            "prose": "**- IF -** a separate partition exists for `/var/log`.\n\nEdit the `/etc/fstab` file and add `nodev` to the fourth field (mounting options) for the `/var/log` partition.\n\n_Example:_\n\n```\n<device> /var/log <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/var/log` with the configured options:\n\n```\n# mount -o remount /var/log\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.6.2_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/var/log`, verify that the `nodev` option is set.\n\nRun the following command to verify that the `nodev` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /var/log | grep -v nodev\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.6.3",
                        "title": "Ensure nosuid option set on /var/log partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.6.3"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.6.3_statement",
                            "prose": "The `nosuid` mount option specifies that the filesystem cannot contain `setuid` files."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.6.3_assessment-objective",
                            "prose": "Rationale: Since the `/var/log` filesystem is only intended for log files, set this option to ensure that users cannot create `setuid` files in `/var/log`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.6.3_guidance",
                            "prose": "**- IF -** a separate partition exists for `/var/log`.\n\nEdit the `/etc/fstab` file and add `nosuid` to the fourth field (mounting options) for the `/var/log` partition.\n\n_Example:_\n\n```\n<device> /var/log <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/var/log` with the configured options:\n\n```\n# mount -o remount /var/log\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.6.3_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/var/log`, verify that the `nosuid` option is set.\n\nRun the following command to verify that the `nosuid` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /var/log | grep -v nosuid\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.6.4",
                        "title": "Ensure noexec option set on /var/log partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.6.4"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.6.4_statement",
                            "prose": "The `noexec` mount option specifies that the filesystem cannot contain executable binaries."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.6.4_assessment-objective",
                            "prose": "Rationale: Since the `/var/log` filesystem is only intended for log files, set this option to ensure that users cannot run executable binaries from `/var/log`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.6.4_guidance",
                            "prose": "**- IF -** a separate partition exists for `/var/log`.\n\nEdit the `/etc/fstab` file and add `noexec` to the fourth field (mounting options) for the `/var/log` partition.\n\n_Example:_\n\n```\n<device> /var/log <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/var/log` with the configured options:\n\n```\n# mount -o remount /var/log\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.6.4_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/var/log`, verify that the `noexec` option is set.\n\nRun the following command to verify that the `noexec` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /var/log | grep -v noexec\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.6.1",
                        "title": "Ensure separate partition exists for /var/log",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.6.1"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.6.1_statement",
                            "prose": "The `/var/log` directory is used by system services to store log data."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.6.1_assessment-objective",
                            "prose": "Rationale: The default installation only creates a single `/` partition. Since the `/var/log` directory contains log files which can grow quite large, there is a risk of resource exhaustion. It will essentially have the whole disk available to fill up and impact the system as a whole.\n\nConfiguring `/var/log` as its own file system allows an administrator to set additional mount options such as `noexec/nosuid/nodev`. These options limit an attackers ability to create exploits on the system. Other options allow for specific behavior. See `man mount` for exact details regarding filesystem-independent and filesystem-specific options.\n\nAs `/var/log` contains log files, care should be taken to ensure the security and integrity of the data and mount point.\nImpact: Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.6.1_guidance",
                            "prose": "For new installations, during installation create a custom partition setup and specify a separate partition for `/var/log` .\n\nFor systems that were previously installed, create a new partition and configure `/etc/fstab` as appropriate."
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.6.1_assessment-method",
                            "prose": "Run the following command and verify output shows `/var/log` is mounted:\n\n```\n# findmnt -kn /var/log\n\n/var/log /dev/sdb ext4 rw,nosuid,nodev,noexec,relatime,seclabel\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "groups": []
                  },
                  {
                    "id": "section-1-1-2-7",
                    "title": "Configure /var/log/audit",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.1.2.7"
                      }
                    ],
                    "controls": [
                      {
                        "id": "cis-1.1.2.7.2",
                        "title": "Ensure nodev option set on /var/log/audit partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.7.2"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.7.2_statement",
                            "prose": "The `nodev` mount option specifies that the filesystem cannot contain special devices."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.7.2_assessment-objective",
                            "prose": "Rationale: Since the `/var/log/audit` filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in `/var/log/audit`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.7.2_guidance",
                            "prose": "**- IF -** a separate partition exists for `/var/log/audit`.\n\nEdit the `/etc/fstab` file and add `nodev` to the fourth field (mounting options) for the `/var/log/audit` partition.\n\n_Example:_\n\n```\n<device> /var/log/audit <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/var/log/audit` with the configured options:\n\n```\n# mount -o remount /var/log/audit\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.7.2_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/var/log/audit`, verify that the `nodev` option is set.\n\nRun the following command to verify that the `nodev` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /var/log/audit | grep -v nodev\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.7.3",
                        "title": "Ensure nosuid option set on /var/log/audit partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.7.3"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.7.3_statement",
                            "prose": "The `nosuid` mount option specifies that the filesystem cannot contain `setuid` files."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.7.3_assessment-objective",
                            "prose": "Rationale: Since the `/var/log/audit` filesystem is only intended for variable files such as logs, set this option to ensure that users cannot create `setuid` files in `/var/log/audit`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.7.3_guidance",
                            "prose": "**- IF -** a separate partition exists for `/var/log/audit`.\n\nEdit the `/etc/fstab` file and add `nosuid` to the fourth field (mounting options) for the `/var/log/audit` partition.\n\n_Example:_\n\n```\n<device> /var/log/audit <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/var/log/audit` with the configured options:\n\n```\n# mount -o remount /var/log/audit\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.7.3_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/var/log/audit`, verify that the `nosuid` option is set.\n\nRun the following command to verify that the `nosuid` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /var/log/audit | grep -v nosuid\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.7.4",
                        "title": "Ensure noexec option set on /var/log/audit partition",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.7.4"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.7.4_statement",
                            "prose": "The `noexec` mount option specifies that the filesystem cannot contain executable binaries."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.7.4_assessment-objective",
                            "prose": "Rationale: Since the `/var/log/audit` filesystem is only intended for audit logs, set this option to ensure that users cannot run executable binaries from `/var/log/audit`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.7.4_guidance",
                            "prose": "**- IF -** a separate partition exists for `/var/log/audit`.\n\nEdit the `/etc/fstab` file and add `noexec` to the fourth field (mounting options) for the `/var/log/audit` partition.\n\n_Example:_\n\n```\n<device> /var/log/audit <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount `/var/log/audit` with the configured options:\n\n```\n# mount -o remount /var/log/audit\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.7.4_assessment-method",
                            "prose": "**- IF -** a separate partition exists for `/var/log/audit`, verify that the `noexec` option is set.\n\nRun the following command to verify that the `noexec` mount option is set.\n\n_Example:_\n\n```\n# findmnt -kn /var/log/audit | grep -v noexec\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-1.1.2.7.1",
                        "title": "Ensure separate partition exists for /var/log/audit",
                        "props": [
                          {
                            "name": "label",
                            "value": "1.1.2.7.1"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-1.1.2.7.1_statement",
                            "prose": "The auditing daemon, `auditd`, stores log data in the `/var/log/audit` directory."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-1.1.2.7.1_assessment-objective",
                            "prose": "Rationale: The default installation only creates a single `/` partition. Since the `/var/log/audit` directory contains the `audit.log` file which can grow quite large, there is a risk of resource exhaustion. It will essentially have the whole disk available to fill up and impact the system as a whole. In addition, other operations on the system could fill up the disk unrelated to `/var/log/audit` and cause `auditd` to trigger its `space_left_action` as the disk is full. See `man auditd.conf` for details.\n\nConfiguring `/var/log/audit` as its own file system allows an administrator to set additional mount options such as `noexec/nosuid/nodev`. These options limit an attacker's ability to create exploits on the system. Other options allow for specific behavior. See `man mount` for exact details regarding filesystem-independent and filesystem-specific options.\n\nAs `/var/log/audit` contains audit logs, care should be taken to ensure the security and integrity of the data and mount point.\nImpact: Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-1.1.2.7.1_guidance",
                            "prose": "For new installations, during installation create a custom partition setup and specify a separate partition for `/var/log/audit`.\n\nFor systems that were previously installed, create a new partition and configure `/etc/fstab` as appropriate."
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-1.1.2.7.1_assessment-method",
                            "prose": "Run the following command and verify output shows `/var/log/audit` is mounted:\n\n```\n# findmnt -kn /var/log/audit\n\n/var/log/audit /dev/sdb ext4 rw,nosuid,nodev,noexec,relatime,seclabel\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "groups": []
                  }
                ]
              }
            ]
          },
          {
            "id": "section-1-2",
            "title": "Package Management",
            "props": [
              {
                "name": "label",
                "value": "1.2"
              }
            ],
            "controls": [],
            "groups": [
              {
                "id": "section-1-2-1",
                "title": "Configure Package Repositories",
                "props": [
                  {
                    "name": "label",
                    "value": "1.2.1"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-1.2.1.1",
                    "title": "Ensure GPG keys are configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.2.1.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.2.1.1_statement",
                        "prose": "The RPM Package Manager implements GPG key signing to verify package integrity during and after installation."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.2.1.1_assessment-objective",
                        "prose": "Rationale: It is important to ensure that updates are obtained from a valid source to protect against spoofing that could lead to the inadvertent installation of malware on the system. To this end, verify that GPG keys are configured correctly for your system."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.2.1.1_guidance",
                        "prose": "Update your package manager GPG keys in accordance with site policy."
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.2.1.1_assessment-method",
                        "prose": "**List all GPG key URLs**\n\nEach repository should have a `gpgkey` with a URL pointing to the location of the GPG key, either local or remote.\n\n```\n# grep -r gpgkey /etc/yum.repos.d/* /etc/dnf/dnf.conf\n```\n\n**List installed GPG keys**\n\nRun the following command to list the currently installed keys. These are the active keys used for verification and installation of RPMs. The packages are fake, they are generated on the fly by `dnf` or `rpm` during the import of keys from the URL specified in the repository configuration.\n\n_Example:_\n\n```\n# for RPM_PACKAGE in $(rpm -q gpg-pubkey); do\n echo \"RPM: ${RPM_PACKAGE}\"\n RPM_SUMMARY=$(rpm -q --queryformat \"%{SUMMARY}\" \"${RPM_PACKAGE}\")\n RPM_PACKAGER=$(rpm -q --queryformat \"%{PACKAGER}\" \"${RPM_PACKAGE}\")\n RPM_DATE=$(date +%Y-%m-%d -d \"1970-1-1+$((0x$(rpm -q --queryformat \"%{RELEASE}\" \"${RPM_PACKAGE}\") ))sec\")\n RPM_KEY_ID=$(rpm -q --queryformat \"%{VERSION}\" \"${RPM_PACKAGE}\")\n echo \"Packager: ${RPM_PACKAGER}\nSummary: ${RPM_SUMMARY}\nCreation date: ${RPM_DATE}\nKey ID: ${RPM_KEY_ID}\n\"\ndone\n\nRPM: gpg-pubkey-9db62fb1-59920156\nPackager: Fedora 28 (28) <fedora-28@fedoraproject.org>\nSummary: gpg(Fedora 28 (28) <fedora-28@fedoraproject.org>)\nCreation date: 2017-08-14\nKey ID: 9db62fb1\n\nRPM: gpg-pubkey-09eab3f2-595fbba3\nPackager: RPM Fusion free repository for Fedora (28) <rpmfusion-buildsys@lists.rpmfusion.org>\nSummary: gpg(RPM Fusion free repository for Fedora (28) <rpmfusion-buildsys@lists.rpmfusion.org>)\nCreation date: 2017-07-07\nKey ID: 09eab3f2\n```\n\nThe format of the package (`gpg-pubkey-9db62fb1-59920156`) is important to understand for verification. Using the above example, it consists of three parts:\n1. The general prefix name for all imported GPG keys: `gpg-pubkey-`\n2. The version, which is the GPG key ID: `9db62fb1`\n3. The release is the date of the key in UNIX timestamp in hexadecimal: `59920156`\n\nWith both the date and the GPG key ID, check the relevant repositories public key page to confirm that the keys are indeed correct.\n\n**Query locally available GPG keys**\n\nRepositories that store their respective GPG keys on disk should do so in `/etc/pki/rpm-gpg/`. These keys are available for immediate import either when `dnf` is asked to install a relevant package from the repository or when an administrator imports the key directly with the `rpm --import` command.\n\nTo find where these keys come from run:\n\n```\n# for PACKAGE in $(find /etc/pki/rpm-gpg/ -type f -exec rpm -qf {} \\; | sort -u); do rpm -q --queryformat \"%{NAME}-%{VERSION} %{PACKAGER} %{SUMMARY}\\\\n\" \"${PACKAGE}\"; done\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.2.1.2",
                    "title": "Ensure gpgcheck is globally activated",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.2.1.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.2.1.2_statement",
                        "prose": "The `gpgcheck` option, found in the main section of the `/etc/dnf/dnf.conf` and individual `/etc/yum.repos.d/*` files, determines if an RPM package's signature is checked prior to its installation."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.2.1.2_assessment-objective",
                        "prose": "Rationale: It is important to ensure that an RPM's package signature is always checked prior to installation to ensure that the software is obtained from a trusted source."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.2.1.2_guidance",
                        "prose": "Edit `/etc/dnf/dnf.conf` and set `gpgcheck=1`:\n\n_Example_\n\n```\n# sed -i 's/^gpgcheck\\s*=\\s*.*/gpgcheck=1/' /etc/dnf/dnf.conf\n```\n\nEdit any failing files in `/etc/yum.repos.d/*` and set all instances starting with `gpgcheck` to `1`.\n\n_Example:_\n```\n# find /etc/yum.repos.d/ -name \"*.repo\" -exec echo \"Checking:\" {} \\; -exec sed -i 's/^gpgcheck\\s*=\\s*.*/gpgcheck=1/' {} \\;\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.2.1.2_assessment-method",
                        "prose": "Global configuration. Run the following command and verify that global configuration for `gpgcheck` is enabled. (set to `1`, `True`, or `yes`):\n\n```\n# grep -Pi -- '^\\h*gpgcheck\\h*=\\h*(1|true|yes)\\b' /etc/dnf/dnf.conf\n\ngpgcheck=1\n```\n\n**Note:** `true` or `yes` is also acceptable\n\nConfiguration in `/etc/yum.repos.d/` takes precedence over the global configuration. Run the following command and verify that there are no instances of entries starting with `gpgcheck` returned set to `0`. Nor should there be any invalid (non-boolean) values. When `dnf` encounters such invalid entries they are ignored and the global configuration is applied.\n\n```\n# grep -Pris -- '^\\h*gpgcheck\\h*=\\h*(0|[2-9]|[1-9][0-9]+|false|no)\\b' /etc/yum.repos.d/\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.2.1.4",
                    "title": "Ensure package manager repositories are configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.2.1.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.2.1.4_statement",
                        "prose": "Systems need to have the respective package manager repositories configured to ensure that the system is able to receive the latest patches and updates."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.2.1.4_assessment-objective",
                        "prose": "Rationale: If a system's package repositories are misconfigured, important patches may not be identified or a rogue repository could introduce compromised software."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.2.1.4_guidance",
                        "prose": "Configure your package manager repositories according to site policy."
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.2.1.4_assessment-method",
                        "prose": "Run the following command to verify repositories are configured correctly. The output may vary depending on which repositories are currently configured on the system.\n\n_Example:_\n\n```\n# dnf repolist\nLast metadata expiration check: 1:00:00 ago on Mon 1 Jan 2021 00:00:00 BST.\nrepo id repo name status\n*fedora Fedora 28 - x86_64 57,327\n*updates Fedora 28 - x86_64 - Updates 22,133\n```\n\nFor the repositories in use, inspect the configuration file to ensure all settings are correctly applied according to site policy.\n\n_Example:_\n\nDepending on the distribution being used the repo file name might differ.\n\n```\ncat /etc/yum.repos.d/*.repo\n\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.2.1.3",
                    "title": "Ensure repo_gpgcheck is globally activated",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.2.1.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.2.1.3_statement",
                        "prose": "The `repo_gpgcheck` option, found in the main section of the `/etc/dnf/dnf.conf` and individual `/etc/yum.repos.d/*` files, will perform a GPG signature check on the repodata."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.2.1.3_assessment-objective",
                        "prose": "Rationale: It is important to ensure that the repository data signature is always checked prior to installation to ensure that the software is not tampered with in any way.\nImpact: Not all repositories, notably RedHat, support `repo_gpgcheck`. Take care to set this value to false (default) for particular repositories that do not support it. If enabled on repositories that do not support `repo_gpgcheck` installation of packages will fail.\n\nResearch is required by the user to determine which repositories is configured on the local system and, from that list, which support `repo_gpgcheck`."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.2.1.3_guidance",
                        "prose": "**Global configuration**\n\nEdit `/etc/dnf/dnf.conf` and set `repo_gpgcheck=1` in the `[main]` section.\n\n_Example:_\n\n```\n[main]\nrepo_gpgcheck=1\n```\n\n**Per repository configuration**\n\nFirst check that the particular repository support GPG checking on the repodata.\n\nEdit any failing files in `/etc/yum.repos.d/*` and set all instances starting with `repo_gpgcheck` to `1`."
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.2.1.3_assessment-method",
                        "prose": "**Global configuration**\n\nRun the following command:\n\n```\ngrep ^repo_gpgcheck /etc/dnf/dnf.conf\n```\n\nVerify that `repo_gpgcheck` is set to `1`\n\n**Per repository configuration**\n\nConfiguration in `/etc/yum.repos.d/` takes precedence over the global configuration.\n\nAs an example, to list all the configured repositories, excluding \"fedoraproject.org\", that specifically disables `repo_gpgcheck`, run the following command:\n\n```\n# REPO_URL=\"fedoraproject.org\"\n# for repo in $(grep -l \"repo_gpgcheck=0\" /etc/yum.repos.d/* ); do\n if ! grep \"${REPO_URL}\" \"${repo}\" &>/dev/null; then\n echo \"${repo}\"\n fi\ndone\n```\n\nPer the research that was done on which repositories does not support `repo_gpgcheck`, change the `REPO_URL` variable and run the test.",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              },
              {
                "id": "section-1-2-2",
                "title": "Configure Package Updates",
                "props": [
                  {
                    "name": "label",
                    "value": "1.2.2"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-1.2.2.1",
                    "title": "Ensure updates, patches, and additional security software are installed",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.2.2.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.2.2.1_statement",
                        "prose": "Periodically patches are released for included software either due to security flaws or to include additional functionality."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.2.2.1_assessment-objective",
                        "prose": "Rationale: Newer patches may contain security enhancements that would not be available through the latest full update. As a result, it is recommended that the latest software patches be used to take advantage of the latest functionality. As with any software installation, organizations need to determine if a given update meets their requirements and verify the compatibility and supportability of any additional software against the update revision that is selected."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.2.2.1_guidance",
                        "prose": "Use your package manager to update all packages on the system according to site policy.\n\nThe following command will install all available updates:\n\n```\n# dnf update\n```\nOnce the update process is complete, verify if reboot is required to load changes.\n\n```\ndnf needs-restarting -r\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.2.2.1_assessment-method",
                        "prose": "Run the following command and verify there are no updates or patches to install:\n\n```\n# dnf check-update\n```\n\nCheck to make sure no system reboot is required\n\n```\ndnf needs-restarting -r\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              }
            ]
          },
          {
            "id": "section-1-3",
            "title": "Mandatory Access Control",
            "props": [
              {
                "name": "label",
                "value": "1.3"
              }
            ],
            "controls": [],
            "groups": [
              {
                "id": "section-1-3-1",
                "title": "Configure SELinux",
                "props": [
                  {
                    "name": "label",
                    "value": "1.3.1"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-1.3.1.1",
                    "title": "Ensure SELinux is installed",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.3.1.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.3.1.1_statement",
                        "prose": "SELinux provides Mandatory Access Control."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.3.1.1_assessment-objective",
                        "prose": "Rationale: Without a Mandatory Access Control system installed only the default Discretionary Access Control system will be available."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.3.1.1_guidance",
                        "prose": "Run the following command to install `SELinux`:\n\n```\n# dnf install libselinux\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.3.1.1_assessment-method",
                        "prose": "Verify SELinux is installed.\n\nRun the following command:\n\n```\n# rpm -q libselinux\n\nlibselinux-<version>\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.3.1.2",
                    "title": "Ensure SELinux is not disabled in bootloader configuration",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.3.1.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.3.1.2_statement",
                        "prose": "Configure SELINUX to be enabled at boot time and verify that it has not been overwritten by the grub boot parameters."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.3.1.2_assessment-objective",
                        "prose": "Rationale: SELinux must be enabled at boot time in your grub configuration to ensure that the controls it provides are not overridden.\nImpact: Files created while SELinux is disabled are not labeled at all. This behavior causes problems when changing to enforcing mode because files are labeled incorrectly or are not labeled at all. To prevent incorrectly labeled and unlabeled files from causing problems, file systems are automatically relabeled when changing from the disabled state to permissive or enforcing mode. This can be a long running process that should be accounted for as it may extend downtime during initial re-boot."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.3.1.2_guidance",
                        "prose": "Run the following command to remove the `selinux=0` and `enforcing=0` parameters:\n\n```\ngrubby --update-kernel ALL --remove-args \"selinux=0 enforcing=0\"\n```\n\nRun the following command to remove the `selinux=0` and `enforcing=0` parameters if they were created by the deprecated `grub2-mkconfig` command:\n\n```\n# grep -Prsq -- '\\h*([^#\\n\\r]+\\h+)?kernelopts=([^#\\n\\r]+\\h+)?(selinux|enforcing)=0\\b' /boot/grub2 /boot/efi && grub2-mkconfig -o \"$(grep -Prl -- '\\h*([^#\\n\\r]+\\h+)?kernelopts=([^#\\n\\r]+\\h+)?(selinux|enforcing)=0\\b' /boot/grub2 /boot/efi)\"\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.3.1.2_assessment-method",
                        "prose": "Run the following command to verify that neither the `selinux=0` or `enforcing=0` parameters have been set:\n\n```\n# grubby --info=ALL | grep -Po '(selinux|enforcing)=0\\b'\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.3.1.3",
                    "title": "Ensure SELinux policy is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.3.1.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.3.1.3_statement",
                        "prose": "Configure SELinux to meet or exceed the default targeted policy, which constrains daemons and system software only."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.3.1.3_assessment-objective",
                        "prose": "Rationale: Security configuration requirements vary from site to site. Some sites may mandate a policy that is stricter than the default policy, which is perfectly acceptable. This item is intended to ensure that at least the default recommendations are met."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.3.1.3_guidance",
                        "prose": "Edit the `/etc/selinux/config` file to set the SELINUXTYPE parameter:\n\n```\nSELINUXTYPE=targeted\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.3.1.3_assessment-method",
                        "prose": "Run the following commands and ensure output matches either \" `targeted` \" or \" `mls` \":\n\n```\n# grep -E '^\\s*SELINUXTYPE=(targeted|mls)\\b' /etc/selinux/config\n\nSELINUXTYPE=targeted\n```\n\n```\n# sestatus | grep Loaded\n\nLoaded policy name: targeted\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.3.1.4",
                    "title": "Ensure the SELinux mode is not disabled",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.3.1.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.3.1.4_statement",
                        "prose": "SELinux can run in one of three modes: disabled, permissive, or enforcing:\n- `Enforcing` - Is the default, and recommended, mode of operation; in enforcing mode SELinux operates normally, enforcing the loaded security policy on the entire system.\n- `Permissive` - The system acts as if SELinux is enforcing the loaded security policy, including labeling objects and emitting access denial entries in the logs, but it does not actually deny any operations. While not recommended for production systems, permissive mode can be helpful for SELinux policy development.\n- `Disabled` - Is strongly discouraged; not only does the system avoid enforcing the SELinux policy, it also avoids labeling any persistent objects such as files, making it difficult to enable SELinux in the future\n\n**Note:** You can set individual domains to permissive mode while the system runs in enforcing mode. For example, to make the httpd_t domain permissive:\n\n```\n# semanage permissive -a httpd_t\n```"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.3.1.4_assessment-objective",
                        "prose": "Rationale: Running SELinux in disabled mode is strongly discouraged; not only does the system avoid enforcing the SELinux policy, it also avoids labeling any persistent objects such as files, making it difficult to enable SELinux in the future."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.3.1.4_guidance",
                        "prose": "Run one of the following commands to set SELinux's running mode:\n\nTo set SELinux mode to `Enforcing`:\n```\n# setenforce 1\n```\n\n**- OR -**\n\nTo set SELinux mode to `Permissive`:\n```\n# setenforce 0\n```\n\nEdit the `/etc/selinux/config` file to set the SELINUX parameter:\n\nFor Enforcing mode:\n```\nSELINUX=enforcing\n```\n\n**- OR -**\n\nFor Permissive mode:\n```\nSELINUX=permissive\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.3.1.4_assessment-method",
                        "prose": "Run the following command to verify SELinux's current mode:\n```\n# getenforce\n\nEnforcing\n-OR-\nPermissive\n```\n\nRun the following command to verify SELinux's configured mode:\n\n```\n# grep -Ei '^\\s*SELINUX=(enforcing|permissive)' /etc/selinux/config\n\nSELINUX=enforcing\n-OR-\nSELINUX=permissive\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.3.1.7",
                    "title": "Ensure the MCS Translation Service (mcstrans) is not installed",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.3.1.7"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.3.1.7_statement",
                        "prose": "The `mcstransd` daemon provides category label information to client processes requesting information. The label translations are defined in `/etc/selinux/targeted/setrans.conf`"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.3.1.7_assessment-objective",
                        "prose": "Rationale: Since this service is not used very often, remove it to reduce the amount of potentially vulnerable code running on the system."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.3.1.7_guidance",
                        "prose": "Run the following command to uninstall `mcstrans`:\n\n```\n# dnf remove mcstrans\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.3.1.7_assessment-method",
                        "prose": "Run the following command and verify `mcstrans` is not installed. \n\n```\n# rpm -q mcstrans\n\npackage mcstrans is not installed\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.3.1.8",
                    "title": "Ensure SETroubleshoot is not installed",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.3.1.8"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.3.1.8_statement",
                        "prose": "The SETroubleshoot service notifies desktop users of SELinux denials through a user-friendly interface. The service provides important information around configuration errors, unauthorized intrusions, and other potential errors."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.3.1.8_assessment-objective",
                        "prose": "Rationale: The SETroubleshoot service is an unnecessary daemon to have running on a server, especially if X Windows is disabled."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.3.1.8_guidance",
                        "prose": "Run the following command to uninstall `setroubleshoot`:\n\n```\n# dnf remove setroubleshoot\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.3.1.8_assessment-method",
                        "prose": "Verify `setroubleshoot` is not installed.\n\nRun the following command:\n\n```\n# rpm -q setroubleshoot\n\npackage setroubleshoot is not installed\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.3.1.5",
                    "title": "Ensure the SELinux mode is enforcing",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.3.1.5"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.3.1.5_statement",
                        "prose": "SELinux can run in one of three modes: disabled, permissive, or enforcing:\n- `Enforcing` - Is the default, and recommended, mode of operation; in enforcing mode SELinux operates normally, enforcing the loaded security policy on the entire system.\n- `Permissive` - The system acts as if SELinux is enforcing the loaded security policy, including labeling objects and emitting access denial entries in the logs, but it does not actually deny any operations. While not recommended for production systems, permissive mode can be helpful for SELinux policy development.\n- `Disabled` - Is strongly discouraged; not only does the system avoid enforcing the SELinux policy, it also avoids labeling any persistent objects such as files, making it difficult to enable SELinux in the future\n\n**Note:** You can set individual domains to permissive mode while the system runs in enforcing mode. For example, to make the httpd_t domain permissive:\n```\n# semanage permissive -a httpd_t"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.3.1.5_assessment-objective",
                        "prose": "Rationale: Running SELinux in disabled mode the system not only avoids enforcing the SELinux policy, it also avoids labeling any persistent objects such as files, making it difficult to enable SELinux in the future. \n\nRunning SELinux in Permissive mode, though helpful for developing SELinux policy, only logs access denial entries, but does not deny any operations.\nImpact: Running SELinux in Enforcing mode may block intended access to files or processes if the SELinux policy is not correctly configured. If this occurs, review the system logs for details and update labels or policy as appropriate."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.3.1.5_guidance",
                        "prose": "Run the following command to set SELinux's running mode:\n\n```\n# setenforce 1\n```\n\nEdit the `/etc/selinux/config` file to set the SELINUX parameter:\n\nFor Enforcing mode:\n\n```\nSELINUX=enforcing\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.3.1.5_assessment-method",
                        "prose": "Run the following command to verify SELinux's current mode:\n```\n# getenforce\n\nEnforcing\n```\n\nRun the following command to verify SELinux's configured mode:\n```\n# grep -i SELINUX=enforcing /etc/selinux/config\n\nSELINUX=enforcing\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-1.3.1.6",
                    "title": "Ensure no unconfined services exist",
                    "props": [
                      {
                        "name": "label",
                        "value": "1.3.1.6"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-1.3.1.6_statement",
                        "prose": "Unconfined processes run in unconfined domains"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-1.3.1.6_assessment-objective",
                        "prose": "Rationale: For unconfined processes, SELinux policy rules are applied, but policy rules exist that allow processes running in unconfined domains almost all access. Processes running in unconfined domains fall back to using DAC rules exclusively. If an unconfined process is compromised, SELinux does not prevent an attacker from gaining access to system resources and data, but of course, DAC rules are still used. SELinux is a security enhancement on top of DAC rules \u2013 it does not replace them\nImpact: Confining a service that inherently requires unconfined access to function may disrupt its intended operations. This restriction may lead to downtime, degraded performance, or loss in functionality. It is crucial to analyze and adjust SELinux policies in accordance with site security policies and operational requirements."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-1.3.1.6_guidance",
                        "prose": "Investigate any unconfined processes found during the audit action. If necessary create a customize SELinux policy to allow necessary actions for the service.\n\n**Warning:** Knowledge about creating and configuring SELinux policies is needed. A Basic example on how to create a policy is included below.\n\n1. Identify the unconfined service: determine the name and process of the service\n\n2. Identify the functionality: determine if the functionality is required for operations\n\n3. Create or add to the custom allow list in the SELinux policy configuration\n\n_Example SELinux policy configuration: service_allowlist_policy.te_\n\n```\n# Example SELinux policy configuration for allowing access to specific actions and resources for a service\n\nmodule my_service 1.0;\n\nrequire {\n type my_service_t;\n type system_resource_t;\n class file { read write execute };\n class dir { read write add_name };\n class tcp_socket name_connect;\n}\n\nallow my_service_t system_resource_t:file { read write execute }; # Allow my_service_t to read, write, and execute files with the system_resource_t context\n\nallow my_service_t system_resource_t:dir { read write add_name }; # Allow my_service_t to read and write to directories with the system_resource_t context\n\nallow my_service_t system_resource_t:tcp_socket name_connect; # Allow my_service_t to establish TCP connections\n```\n\n4. Compile the policy\n```\n# checkmodule -M -, -o service_allowlist_policy.mod service_allowlist_policy.te\n```\n\n5. Create the package\n```\n# semodule_package -o service_allowlist_policy.pp -m service_allowlist_policy.mod\n```\n\n6. Load the policy\n```\n# semodule -i service_allowlist_policy.pp\n```\n\n7. Apply the policy to the service\n```\n# chcon -t se service_allowlist_policy /path/to/service_binary\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-1.3.1.6_assessment-method",
                        "prose": "Run the following command and verify no output is produced:\n\n```\n# ps -eZ | grep unconfined_service_t\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              }
            ]
          },
          {
            "id": "section-1-4",
            "title": "Configure Bootloader",
            "props": [
              {
                "name": "label",
                "value": "1.4"
              }
            ],
            "controls": [
              {
                "id": "cis-1.4.1",
                "title": "Ensure bootloader password is set",
                "props": [
                  {
                    "name": "label",
                    "value": "1.4.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.4.1_statement",
                    "prose": "Setting the boot loader password will require that anyone rebooting the system must enter a password before being able to set command line boot parameters."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.4.1_assessment-objective",
                    "prose": "Rationale: Requiring a boot password upon execution of the boot loader will prevent an unauthorized user from entering boot parameters or changing the boot partition. This prevents users from weakening security (e.g. turning off SELinux at boot time).\nImpact: If password protection is enabled, only the designated superuser can edit a GRUB 2 menu item by pressing `e` or access the GRUB 2 command line by pressing `c`\n\nIf GRUB 2 is set up to boot automatically to a password-protected menu entry the user has no option to back out of the password prompt to select another menu entry. Holding the SHIFT key will not display the menu in this case. The user must enter the correct username and password. If unable, the configuration files will have to be edited via the LiveCD or other means to fix the problem"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.4.1_guidance",
                    "prose": "Create an encrypted password with `grub2-setpassword`:\n\n```\n# grub2-setpassword\n\nEnter password: <password>\nConfirm password: <password>\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.4.1_assessment-method",
                    "prose": "Run the following script to verify the bootloader password has been set:\n\n```\n#!/usr/bin/env bash\n\n{\n l_grub_password_file=\"$(find /boot -type f -name 'user.cfg' ! -empty)\"\n if [ -f \"$l_grub_password_file\" ]; then\n awk -F. '/^\\s*GRUB2_PASSWORD=\\S+/ {print $1\".\"$2\".\"$3}' \"$l_grub_password_file\"\n fi\n}\n```\n\nOutput should be similar to:\n\n```\nGRUB2_PASSWORD=grub.pbkdf2.sha512\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.4.2",
                "title": "Ensure access to bootloader config is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "1.4.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.4.2_statement",
                    "prose": "The grub files contain information on boot settings and passwords for unlocking boot options."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.4.2_assessment-objective",
                    "prose": "Rationale: Setting the permissions to read and write for root only prevents non-root users from seeing the boot parameters or changing them. Non-root users who read the boot parameters may be able to identify weaknesses in security upon boot and be able to exploit them."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.4.2_guidance",
                    "prose": "Run the following to update the mode, ownership, and group ownership of the grub configuration files:\n\n**- IF -** the system uses UEFI (Files located in `/boot/efi/EFI/*`)\n\nEdit `/etc/fstab` and add the `fmask=0077`, `uid=0`, and `gid=0` options:\n\n_Example:_\n\n```\n<device> /boot/efi vfat defaults,umask=0027,fmask=0077,uid=0,gid=0 0 0\n```\n\n**Note:** This may require a re-boot to enable the change\n\n **- OR -** \n\n**- IF -** the system uses BIOS (Files located in `/boot/grub2/*`)\n\nRun the following commands to set ownership and permissions on your grub configuration file(s):\n\n```\n# [ -f /boot/grub2/grub.cfg ] && chown root:root /boot/grub2/grub.cfg\n# [ -f /boot/grub2/grub.cfg ] && chmod u-x,go-rwx /boot/grub2/grub.cfg\n\n# [ -f /boot/grub2/grubenv ] && chown root:root /boot/grub2/grubenv\n# [ -f /boot/grub2/grubenv ] && chmod u-x,go-rwx /boot/grub2/grubenv\n\n# [ -f /boot/grub2/user.cfg ] && chown root:root /boot/grub2/user.cfg\n# [ -f /boot/grub2/user.cfg ] && chmod u-x,go-rwx /boot/grub2/user.cfg\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.4.2_assessment-method",
                    "prose": "Run the following script to verify grub configuration files:\n- For systems using UEFI (Files located in `/boot/efi/EFI/*`):\n - Mode is `0700` or more restrictive\n- For systems using BIOS (Files located in `/boot/grub2/*`):\n - Mode is `0600` or more restrictive\n- Owner is the user `root`\n- Group owner is group `root`\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" \n file_mug_chk()\n {\n l_out=\"\" l_out2=\"\"\n [[ \"$(dirname \"$l_file\")\" =~ ^\\/boot\\/efi\\/EFI ]] && l_pmask=\"0077\" || l_pmask=\"0177\"\n l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n if [ $(( $l_mode & $l_pmask )) -gt 0 ]; then\n l_out2=\"$l_out2\\n - Is mode \\\"$l_mode\\\" and should be mode: \\\"$l_maxperm\\\" or more restrictive\"\n else\n l_out=\"$l_out\\n - Is correctly mode: \\\"$l_mode\\\" which is mode: \\\"$l_maxperm\\\" or more restrictive\"\n fi\n if [ \"$l_user\" = \"root\" ]; then\n l_out=\"$l_out\\n - Is correctly owned by user: \\\"$l_user\\\"\"\n else\n l_out2=\"$l_out2\\n - Is owned by user: \\\"$l_user\\\" and should be owned by user: \\\"root\\\"\"\n fi\n if [ \"$l_group\" = \"root\" ]; then\n l_out=\"$l_out\\n - Is correctly group-owned by group: \\\"$l_user\\\"\"\n else\n l_out2=\"$l_out2\\n - Is group-owned by group: \\\"$l_user\\\" and should be group-owned by group: \\\"root\\\"\"\n fi\n [ -n \"$l_out\" ] && l_output=\"$l_output\\n - File: \\\"$l_file\\\"$l_out\\n\"\n [ -n \"$l_out2\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\\n\"\n }\n while IFS= read -r -d $'\\0' l_gfile; do\n while read -r l_file l_mode l_user l_group; do\n file_mug_chk\n done <<< \"$(stat -Lc '%n %#a %U %G' \"$l_gfile\")\"\n done < <(find /boot -type f \\( -name 'grub*' -o -name 'user.cfg' \\) -print0)\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n *** PASS ***\\n- * Correctly set * :\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \" - * Correctly set * :\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-1-5",
            "title": "Configure Additional Process Hardening",
            "props": [
              {
                "name": "label",
                "value": "1.5"
              }
            ],
            "controls": [
              {
                "id": "cis-1.5.1",
                "title": "Ensure address space layout randomization is enabled",
                "props": [
                  {
                    "name": "label",
                    "value": "1.5.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.5.1_statement",
                    "prose": "Address space layout randomization (ASLR) is an exploit mitigation technique which randomly arranges the address space of key data areas of a process."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.5.1_assessment-objective",
                    "prose": "Rationale: Randomly placing virtual memory regions will make it difficult to write memory page exploits as the memory placement will be consistently shifting."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.5.1_guidance",
                    "prose": "Set the following parameter in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `kernel.randomize_va_space = 2`\n\n_Example:_\n```\n# printf \"\nkernel.randomize_va_space = 2\n\" >> /etc/sysctl.d/60-kernel_sysctl.conf\n```\n\nRun the following command to set the active kernel parameter:\n\n```\n# sysctl -w kernel.randomize_va_space=2\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.5.1_assessment-method",
                    "prose": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file:\n- `kernel.randomize_va_space` is set to `2`\n\n**Note:** kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. \n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n a_parlist=(\"kernel.randomize_va_space=2\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n kernel_parameter_chk()\n { \n l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n fi\n unset A_out; declare -A A_out # Check durable setting (files)\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n l_kpar=\"${l_kpar//\\//.}\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n fi\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n fi\n done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n else\n kernel_parameter_chk\n fi\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.5.2",
                "title": "Ensure ptrace_scope is restricted",
                "props": [
                  {
                    "name": "label",
                    "value": "1.5.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.5.2_statement",
                    "prose": "The `ptrace()` system call provides a means by which one process (the \"tracer\") may observe and control the execution of another process (the \"tracee\"), and examine and change the tracee's memory and registers."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.5.2_assessment-objective",
                    "prose": "Rationale: If one application is compromised, it would be possible for an attacker to attach to other running processes (e.g. Bash, Firefox, SSH sessions, GPG agent, etc) to extract additional credentials and continue to expand the scope of their attack.\n\nEnabling restricted mode will limit the ability of a compromised process to PTRACE_ATTACH on other processes running under the same user. With restricted mode, ptrace will continue to work with root user."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.5.2_guidance",
                    "prose": "Set the following parameter in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `kernel.yama.ptrace_scope = 1`\n\n_Example:_\n```\n# printf \"\nkernel.yama.ptrace_scope = 1\n\" >> /etc/sysctl.d/60-kernel_sysctl.conf\n```\n\nRun the following command to set the active kernel parameter:\n\n```\n# sysctl -w kernel.yama.ptrace_scope=1\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.5.2_assessment-method",
                    "prose": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file:\n- `kernel.yama.ptrace_scope` is set to `1`\n\n**Note:** kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. \n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n a_parlist=(\"kernel.yama.ptrace_scope=1\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n kernel_parameter_chk()\n { \n l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n fi\n unset A_out; declare -A A_out # Check durable setting (files)\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n l_kpar=\"${l_kpar//\\//.}\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n fi\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n fi\n done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n else\n kernel_parameter_chk\n fi\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.5.3",
                "title": "Ensure core dump backtraces are disabled",
                "props": [
                  {
                    "name": "label",
                    "value": "1.5.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.5.3_statement",
                    "prose": "A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also be used to glean confidential information from a core file."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.5.3_assessment-objective",
                    "prose": "Rationale: A core dump includes a memory image taken at the time the operating system terminates an application. The memory image could contain sensitive data and is generally useful only for developers trying to debug problems, increasing the risk to the system."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.5.3_guidance",
                    "prose": "Create or edit the file `/etc/systemd/coredump.conf`, or a file in the `/etc/systemd/coredump.conf.d` directory ending in `.conf`.\n\nEdit or add the following line in the `[Coredump]` section:\n\n```\nProcessSizeMax=0\n```\n\n_Example:_\n\n```\n#!/usr/bin/env bash\n\n{\n [ ! -d /etc/systemd/coredump.conf.d/ ] && mkdir /etc/systemd/coredump.conf.d/\n if grep -Psq -- '^\\h*\\[Coredump\\]' /etc/systemd/coredump.conf.d/60-coredump.conf; then\n printf '%s\\n' \"ProcessSizeMax=0\" >> /etc/systemd/coredump.conf.d/60-coredump.conf\n else\n printf '%s\\n' \"[Coredump]\" \"ProcessSizeMax=0\" >> /etc/systemd/coredump.conf.d/60-coredump.conf\n fi\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.5.3_assessment-method",
                    "prose": "Run the following script to verify `ProcessSizeMax` is set to `0` in `/etc/systemd/coredump.conf` or a file in the `/etc/systemd/coredump.conf.d/` directory:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n a_parlist=(\"ProcessSizeMax=0\")\n l_systemd_config_file=\"/etc/systemd/coredump.conf\" # Main systemd configuration file\n config_file_parameter_chk()\n {\n unset A_out; declare -A A_out # Check config file(s) setting\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" && A_out+=([\"$l_systemd_parameter\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_systemd_file_parameter_name l_systemd_file_parameter_value; do\n l_systemd_file_parameter_name=\"${l_systemd_file_parameter_name// /}\"\n l_systemd_file_parameter_value=\"${l_systemd_file_parameter_value// /}\"\n if grep -Piq \"^\\h*$l_systemd_parameter_value\\b\" <<< \"$l_systemd_file_parameter_value\"; then\n l_output=\"$l_output\\n - \\\"$l_systemd_parameter_name\\\" is correctly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is incorrectly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value matching: \\\"$l_systemd_parameter_value\\\"\\n\"\n fi\n done < <(grep -Pio -- \"^\\h*$l_systemd_parameter_name\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is not set in an included file\\n ** Note: \\\"$l_systemd_parameter_name\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_systemd_parameter_name l_systemd_parameter_value; do # Assess and check parameters\n l_systemd_parameter_name=\"${l_systemd_parameter_name// /}\"\n l_systemd_parameter_value=\"${l_systemd_parameter_value// /}\"\n config_file_parameter_chk\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.5.4",
                "title": "Ensure core dump storage is disabled",
                "props": [
                  {
                    "name": "label",
                    "value": "1.5.4"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.5.4_statement",
                    "prose": "A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also be used to glean confidential information from a core file."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.5.4_assessment-objective",
                    "prose": "Rationale: A core dump includes a memory image taken at the time the operating system terminates an application. The memory image could contain sensitive data and is generally useful only for developers trying to debug problems."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.5.4_guidance",
                    "prose": "Create or edit the file `/etc/systemd/coredump.conf`, or a file in the `/etc/systemd/coredump.conf.d` directory ending in `.conf`.\n\nEdit or add the following line in the `[Coredump]` section:\n\n```\nStorage=none\n```\n\n_Example:_\n\n```\n#!/usr/bin/env bash\n\n{\n [ ! -d /etc/systemd/coredump.conf.d/ ] && mkdir /etc/systemd/coredump.conf.d/\n if grep -Psq -- '^\\h*\\[Coredump\\]' /etc/systemd/coredump.conf.d/60-coredump.conf; then\n printf '%s\\n' \"Storage=none\" >> /etc/systemd/coredump.conf.d/60-coredump.conf\n else\n printf '%s\\n' \"[Coredump]\" \"Storage=none\" >> /etc/systemd/coredump.conf.d/60-coredump.conf\n fi\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.5.4_assessment-method",
                    "prose": "Run the following script to verify `Storage` is set to `none` in `/etc/systemd/coredump.conf` or a file in the `/etc/systemd/coredump.conf.d/` directory:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n a_parlist=(\"Storage=none\")\n l_systemd_config_file=\"/etc/systemd/coredump.conf\" # Main systemd configuration file\n config_file_parameter_chk()\n {\n unset A_out; declare -A A_out # Check config file(s) setting\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" && A_out+=([\"$l_systemd_parameter\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_systemd_file_parameter_name l_systemd_file_parameter_value; do\n l_systemd_file_parameter_name=\"${l_systemd_file_parameter_name// /}\"\n l_systemd_file_parameter_value=\"${l_systemd_file_parameter_value// /}\"\n if grep -Piq \"^\\h*$l_systemd_parameter_value\\b\" <<< \"$l_systemd_file_parameter_value\"; then\n l_output=\"$l_output\\n - \\\"$l_systemd_parameter_name\\\" is correctly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is incorrectly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value matching: \\\"$l_systemd_parameter_value\\\"\\n\"\n fi\n done < <(grep -Pio -- \"^\\h*$l_systemd_parameter_name\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is not set in an included file\\n ** Note: \\\"$l_systemd_parameter_name\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_systemd_parameter_name l_systemd_parameter_value; do # Assess and check parameters\n l_systemd_parameter_name=\"${l_systemd_parameter_name// /}\"\n l_systemd_parameter_value=\"${l_systemd_parameter_value// /}\"\n config_file_parameter_chk\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-1-6",
            "title": "Configure system wide crypto policy",
            "props": [
              {
                "name": "label",
                "value": "1.6"
              }
            ],
            "controls": [
              {
                "id": "cis-1.6.1",
                "title": "Ensure system wide crypto policy is not set to legacy",
                "props": [
                  {
                    "name": "label",
                    "value": "1.6.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.6.1_statement",
                    "prose": "When a system-wide policy is set up, the default behavior of applications will be to follow the policy. Applications will be unable to use algorithms and\nprotocols that do not meet the policy, unless you explicitly request the application to do so.\n\nThe system-wide crypto-policies followed by the crypto core components allow consistently deprecating and disabling algorithms system-wide.\n\nThe `LEGACY` policy ensures maximum compatibility with version 5 of the operating system and earlier; it is less secure due to an increased attack surface. In addition to the `DEFAULT` level algorithms and protocols, it includes support for the `TLS 1.0` and `1.1` protocols. The algorithms `DSA`, `3DES`, and `RC4` are allowed, while `RSA keys` and `Diffie-Hellman` parameters are accepted if they are at least 1023 bits long."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.6.1_assessment-objective",
                    "prose": "Rationale: If the `LEGACY` system-wide crypto policy is selected, it includes support for TLS 1.0, TLS 1.1, and SSH2 protocols or later. The algorithms DSA, 3DES, and RC4 are allowed, while RSA and Diffie-Hellman parameters are accepted if larger than 1023-bits.\n\nThese legacy protocols and algorithms can make the system vulnerable to attacks, including those listed in RFC 7457\nImpact: Environments that require compatibility with older insecure protocols may require the use\nof the less secure `LEGACY` policy level."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.6.1_guidance",
                    "prose": "Run the following command to change the system-wide crypto policy\n\n```\n# update-crypto-policies --set <CRYPTO POLICY>\n```\n\n_Example:_\n\n```\n# update-crypto-policies --set DEFAULT\n```\n\nRun the following to make the updated system-wide crypto policy active\n\n```\n# update-crypto-policies\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.6.1_assessment-method",
                    "prose": "Run the following command to verify that the system-wide crypto policy is not `LEGACY`\n\n```\n# grep -Pi '^\\h*LEGACY\\b' /etc/crypto-policies/config\n```\n\nVerify that no lines are returned",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.6.2",
                "title": "Ensure system wide crypto policy is not set in sshd configuration",
                "props": [
                  {
                    "name": "label",
                    "value": "1.6.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.6.2_statement",
                    "prose": "System-wide Crypto policy can be over-ridden or opted out of for openSSH"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.6.2_assessment-objective",
                    "prose": "Rationale: Over-riding or opting out of the system-wide crypto policy could allow for the use of less secure Ciphers, MACs, KexAlgorithms and GSSAPIKexAlgorithm\n\n**Note:** If changes to the system-wide crypto policy are required to meet local site policy for the openSSH server, these changes should be done with a `sub-policy` assigned to the system-wide crypto policy. For additional information see the CRYPTO-POLICIES(7) man page"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.6.2_guidance",
                    "prose": "Run the following commands:\n\n```\n# sed -ri \"s/^\\s*(CRYPTO_POLICY\\s*=.*)$/# \\1/\" /etc/sysconfig/sshd\n\n# systemctl reload sshd\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.6.2_assessment-method",
                    "prose": "Run the following command:\n\n```\n# grep -Pi '^\\h*CRYPTO_POLICY\\h*=' /etc/sysconfig/sshd\n```\n\nNo output should be returned",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.6.3",
                "title": "Ensure system wide crypto policy disables sha1 hash and signature support",
                "props": [
                  {
                    "name": "label",
                    "value": "1.6.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.6.3_statement",
                    "prose": "SHA-1 (Secure Hash Algorithm) is a cryptographic hash function that produces a 160 bit hash value."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.6.3_assessment-objective",
                    "prose": "Rationale: The SHA-1 hash function has an inherently weak design, and advancing cryptanalysis has made it vulnerable to attacks. The most significant danger for a hash algorithm is when a \"collision\" which happens when two different pieces of data produce the same hash value occurs. This hashing algorithm has been considered weak since 2005.\n\n**Note:** The use of SHA-1 with hashbased message authentication codes (HMAC) do not rely on the collision resistance of the corresponding hash function, and therefore the recent attacks on SHA-1 have a significantly lower impact on the use of SHA-1 for HMAC. Because of this, the recommendation does not disable the hmac-sha1 MAC."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.6.3_guidance",
                    "prose": "**Note:** \n- The commands below are written for the included `DEFAULT` system-wide crypto policy. If another policy is in use and follows local site policy, replace `DEFAULT` with the name of your system-wide crypto policy.\n- Multiple subpolicies may be assigned to a policy as a colon separated list. e.g. `DEFAULT:NO-SHA1:NO-SSHCBC`\n- Subpolicies:\n - Not included in the `update-crypto-policies --set` command will **not** be applied to the system wide crypto policy.\n - **must exist** before they can be applied to the system wide crypto policy.\n - `.pmod` file filenames must be in all upper case, upper case, e.g. `NO-SHA1.pmod`, or they will **not** be read by the `update-crypto-policies --set` command.\n\nCreate or edit a file in `/etc/crypto-policies/policies/modules/` ending in `.pmod` and add or modify the following lines:\n\n```\nhash = -SHA1\nsign = -*-SHA1\nsha1_in_certs = 0\n```\n\n_Example:_\n\n```\n# printf '%s\\n' \"# This is a subpolicy dropping the SHA1 hash and signature support\" \"hash = -SHA1\" \"sign = -*-SHA1\" \"sha1_in_certs = 0\" >> /etc/crypto-policies/policies/modules/NO-SHA1.pmod\n```\n\nRun the following command to update the system-wide cryptographic policy\n\n```\n# update-crypto-policies --set <CRYPTO_POLICY>:<CRYPTO_SUBPOLICY1>:<CRYPTO_SUBPOLICY2>:<CRYPTO_SUBPOLICY3>\n```\n\n_Example:_\n\n```\nupdate-crypto-policies --set DEFAULT:NO-SHA1\n```\n\nRun the following command to reboot the system to make your cryptographic settings effective for already running services and applications:\n\n```\n# reboot\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.6.3_assessment-method",
                    "prose": "Run the following commands to verify `SHA1` hash and signature support has been disabled:\n\nRun the following command to verify that the `hash` and `sign` lines do not include the `SHA1` hash:\n\n```\n# awk -F= '($1~/(hash|sign)/ && $2~/SHA1/ && $2!~/^\\s*\\-\\s*([^#\\n\\r]+)?SHA1/){print}' /etc/crypto-policies/state/CURRENT.pol\n```\n\nNothing should be returned\n\nRun the following command to verify that `sha1_in_certs` is set to `0` (disabled):\n\n```\n# grep -Psi -- '^\\h*sha1_in_certs\\h*=\\h*' /etc/crypto-policies/state/CURRENT.pol\n\nsha1_in_certs = 0\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.6.4",
                "title": "Ensure system wide crypto policy disables macs less than 128 bits",
                "props": [
                  {
                    "name": "label",
                    "value": "1.6.4"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.6.4_statement",
                    "prose": "Message Authentication Code (MAC) algorithm is a family of cryptographic functions that is parameterized by a symmetric key. Each of the functions can act on input data (called a \u201cmessage\u201d) of variable length to produce an output value of a specified length. The output value is called the MAC of the input message.\n\nA MAC algorithm can be used to provide data-origin authentication and data-integrity protection"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.6.4_assessment-objective",
                    "prose": "Rationale: Weak algorithms continue to have a great deal of attention as a weak spot that can be exploited with expanded computing power. An attacker that breaks the algorithm could take advantage of a MiTM position to decrypt the tunnel and capture credentials and information.\n\nA MAC algorithm must be computationally infeasible to determine the MAC of a message without knowledge of the key, even if one has already seen the results of using that key to compute the MAC's of other messages."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.6.4_guidance",
                    "prose": "**Note:** \n- The commands below are written for the included `DEFAULT` system-wide crypto policy. If another policy is in use and follows local site policy, replace `DEFAULT` with the name of your system-wide crypto policy.\n- Multiple subpolicies may be assigned to a policy as a colon separated list. e.g. `DEFAULT:NO-SHA1:NO-SSHCBC`\n- Subpolicies:\n - Not included in the `update-crypto-policies --set` command will **not** be applied to the system wide crypto policy.\n - **must exist** before they can be applied to the system wide crypto policy.\n - `.pmod` file filenames must be in all upper case, upper case, e.g. `NO-WEAKMAC.pmod`, or they will **not** be read by the `update-crypto-policies --set` command.\n\nCreate or edit a file in `/etc/crypto-policies/policies/modules/` ending in `.pmod` and add or modify **one** of the following lines:\n\n```\nmac = -*-64* # Disables weak macs\n```\n\n_Example:_\n\n```\n# printf '%s\\n' \"# This is a subpolicy to disable weak macs\" \"mac = -*-64\" >> /etc/crypto-policies/policies/modules/NO-WEAKMAC.pmod\n```\n\nRun the following command to update the system-wide cryptographic policy\n\n```\n# update-crypto-policies --set <CRYPTO_POLICY>:<CRYPTO_SUBPOLICY1>:<CRYPTO_SUBPOLICY2>:<CRYPTO_SUBPOLICY3>\n```\n\n_Example:_\n\n```\nupdate-crypto-policies --set DEFAULT:NO-SHA1:NO-WEAKMAC\n```\n\nRun the following command to reboot the system to make your cryptographic settings effective for already running services and applications:\n\n```\n# reboot\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.6.4_assessment-method",
                    "prose": "Run the following script to verify weak MACs are disabled:\n\n```\n# grep -Pi -- '^\\h*mac\\h*=\\h*([^#\\n\\r]+)?-64\\b' /etc/crypto-policies/state/CURRENT.pol\n\nNothing should be returned\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.6.5",
                "title": "Ensure system wide crypto policy disables cbc for ssh",
                "props": [
                  {
                    "name": "label",
                    "value": "1.6.5"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.6.5_statement",
                    "prose": "Cypher Block Chaining (CBC) is an algorithm that uses a block cipher."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.6.5_assessment-objective",
                    "prose": "Rationale: A vulnerability exists in SSH messages that employ CBC mode that may allow an attacker to recover plaintext from a block of ciphertext. If exploited, this attack can potentially allow an attacker to recover up to 32 bits of plaintext from an arbitrary block of ciphertext from a connection secured using the SSH protocol.\nImpact: CBC ciphers might be the only common cyphers when connecting to older SSH clients and servers"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.6.5_guidance",
                    "prose": "**Note:** \n- The commands below are written for the included `DEFAULT` system-wide crypto policy. If another policy is in use and follows local site policy, replace `DEFAULT` with the name of your system-wide crypto policy.\n- `CBC` can be turned off globally by using the argument `cipher` opposed to `cipher@SSH`\n- Multiple subpolicies may be assigned to a policy as a colon separated list. e.g. `DEFAULT:NO-SHA1:NO-SSHCBC`\n- Subpolicies:\n - Not included in the `update-crypto-policies --set` command will **not** be applied to the system wide crypto policy.\n - **must exist** before they can be applied to the system wide crypto policy.\n - `.pmod` file filenames must be in all upper case, upper case, e.g. `NO-SSHCBC.pmod`, or they will **not** be read by the `update-crypto-policies --set` command.\nCreate or edit a file in `/etc/crypto-policies/policies/modules/` ending in `.pmod` and add or modify **one** of the the following lines:\n\n```\ncipher@SSH = -*-CBC # Disables the CBC cipher for SSH\n```\n\n_Example:_\n\n```\n# printf '%s\\n' \"# This is a subpolicy to disable all CBC mode ciphers\" \"# for the SSH protocol (libssh and OpenSSH)\" \"cipher@SSH = -*-CBC\" >> /etc/crypto-policies/policies/modules/NO-SSHCBC.pmod\n```\n\nRun the following command to update the system-wide cryptographic policy\n\n```\n# update-crypto-policies --set <CRYPTO_POLICY>:<CRYPTO_SUBPOLICY1>:<CRYPTO_SUBPOLICY2>:<CRYPTO_SUBPOLICY3>\n```\n\n_Example:_\n\n```\nupdate-crypto-policies --set DEFAULT:NO-SHA1:NO-WEAKMAC:NO-SSHCBC\n```\n\nRun the following command to reboot the system to make your cryptographic settings effective for already running services and applications:\n\n```\n# reboot\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.6.5_assessment-method",
                    "prose": "Run the following script to verify `CBC` is disabled for `SSH`:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n if grep -Piq -- '^\\h*cipher\\h*=\\h*([^#\\n\\r]+)?-CBC\\b' /etc/crypto-policies/state/CURRENT.pol; then\n if grep -Piq -- '^\\h*cipher@(lib|open)ssh(-server|-client)?\\h*=\\h*' /etc/crypto-policies/state/CURRENT.pol; then\n if ! grep -Piq -- '^\\h*cipher@(lib|open)ssh(-server|-client)?\\h*=\\h*([^#\\n\\r]+)?-CBC\\b' /etc/crypto-policies/state/CURRENT.pol; then\n l_output=\"$l_output\\n - Cipher Block Chaining (CBC) is disabled for SSH\"\n else\n l_output2=\"$l_output2\\n - Cipher Block Chaining (CBC) is enabled for SSH\"\n fi\n else\n l_output2=\"$l_output2\\n - Cipher Block Chaining (CBC) is enabled for SSH\"\n fi\n else\n l_output=\" - Cipher Block Chaining (CBC) is disabled\"\n fi\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.6.6",
                "title": "Ensure system wide crypto policy disables chacha20-poly1305 for ssh",
                "props": [
                  {
                    "name": "label",
                    "value": "1.6.6"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.6.6_statement",
                    "prose": "ChaCha20-Poly1305 is an authenticated encryption with additional data (AEAD) algorithm, that combines the ChaCha20 stream cipher with the Poly1305 message authentication code. Its usage in IETF protocols is standardized in RFC 8439."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.6.6_assessment-objective",
                    "prose": "Rationale: A vulnerability exists in ChaCha20-Poly1305 as referenced in `CVE-2023-48795`"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.6.6_guidance",
                    "prose": "**Note:** \n- The commands below are written for the included `DEFAULT` system-wide crypto policy. If another policy is in use and follows local site policy, replace `DEFAULT` with the name of your system-wide crypto policy.\n- `chacha20-poly1305` can be turned off globally by using the argument `cipher` opposed to `cipher@SSH`\n- Multiple subpolicies may be assigned to a policy as a colon separated list. e.g. `DEFAULT:NO-SHA1:NO-SSHCBC`\n- Subpolicies:\n - Not included in the `update-crypto-policies --set` command will **not** be applied to the system wide crypto policy.\n - **must exist** before they can be applied to the system wide crypto policy.\n - `.pmod` file filenames must be in all upper case, upper case, e.g. `NO-SSHCHACHA20.pmod`, or they will **not** be read by the `update-crypto-policies --set` command.\n\n**- IF -** `CVE-2023-48795` has been addressed, and it meets local site policy, this recommendation may be skipped.\n\nCreate or edit a file in `/etc/crypto-policies/policies/modules/` ending in `.pmod` and add or modify **one** of the the following lines:\n\n```\ncipher@SSH = -CHACHA20-POLY1305 # Disables the chacha20-poly1305 cipher for SSH\n```\n\n_Example:_\n\n```\n# printf '%s\\n' \"# This is a subpolicy to disable the chacha20-poly1305 ciphers\" \"# for the SSH protocol (libssh and OpenSSH)\" \"cipher@SSH = -CHACHA20-POLY1305\" >> /etc/crypto-policies/policies/modules/NO-SSHCHACHA20.pmod\n```\n\nRun the following command to update the system-wide cryptographic policy\n\n```\n# update-crypto-policies --set <CRYPTO_POLICY>:<CRYPTO_SUBPOLICY1>:<CRYPTO_SUBPOLICY2>:<CRYPTO_SUBPOLICY3>\n```\n\n_Example:_\n\n```\n# update-crypto-policies --set DEFAULT:NO-SHA1:NO-WEAKMAC:NO-SSHCBC:NO-SSHCHACHA20\n```\n\nRun the following command to reboot the system to make your cryptographic settings effective for already running services and applications:\n\n```\n# reboot\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.6.6_assessment-method",
                    "prose": "**- IF -** `CVE-2023-48795` has been addressed, and it meets local site policy, this recommendation may be skipped.\n\nRun the following script to verify `chacha20-poly1305` is disabled for `SSH`:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n if grep -Piq -- '^\\h*cipher\\h*=\\h*([^#\\n\\r]+)?-CBC\\b' /etc/crypto-policies/state/CURRENT.pol; then\n if grep -Piq -- '^\\h*cipher@(lib|open)ssh(-server|-client)?\\h*=\\h*' /etc/crypto-policies/state/CURRENT.pol; then\n if ! grep -Piq -- '^\\h*cipher@(lib|open)ssh(-server|-client)?\\h*=\\h*([^#\\n\\r]+)?\\bchacha20-poly1305\\b' /etc/crypto-policies/state/CURRENT.pol; then\n l_output=\"$l_output\\n - chacha20-poly1305 is disabled for SSH\"\n else\n l_output2=\"$l_output2\\n - chacha20-poly1305 is enabled for SSH\"\n fi\n else\n l_output2=\"$l_output2\\n - chacha20-poly1305 is enabled for SSH\"\n fi\n else\n l_output=\" - chacha20-poly1305 is disabled\"\n fi\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.6.7",
                "title": "Ensure system wide crypto policy disables EtM for ssh",
                "props": [
                  {
                    "name": "label",
                    "value": "1.6.7"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.6.7_statement",
                    "prose": "Encrypt-then-MAC (EtM) - The ciphertext is generated by encrypting the plaintext and then appending a MAC of the encrypted plaintext"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.6.7_assessment-objective",
                    "prose": "Rationale: There is an effective attack against SSH's use of Cypher-Block-Chaining (CBC) with Encrypt-then-MAC as referenced in `CVE-2023-48795`"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.6.7_guidance",
                    "prose": "**Note:** \n- The commands below are written for the included `DEFAULT` system-wide crypto policy. If another policy is in use and follows local site policy, replace `DEFAULT` with the name of your system-wide crypto policy.\n- `EtM` can be turned off globally by using the argument `etm` opposed to `etm@SSH`\n- Multiple subpolicies may be assigned to a policy as a colon separated list. e.g. `DEFAULT:NO-SHA1:NO-SSHCBC`\n- Subpolicies:\n - Not included in the `update-crypto-policies --set` command will **not** be applied to the system wide crypto policy.\n - **must exist** before they can be applied to the system wide crypto policy.\n - `.pmod` file filenames must be in all upper case, upper case, e.g. `NO-SSHCHACHA20.pmod`, or they will **not** be read by the `update-crypto-policies --set` command.\n\n**- IF -** `CVE-2023-48795` has been addressed, and it meets local site policy, this recommendation may be skipped.\n\nCreate or edit a file in `/etc/crypto-policies/policies/modules/` ending in `.pmod` and add or modify the following line:\n\n```\netm@SSH = DISABLE_ETM # This disables EtM for openSSH and libssh\n```\n\n_Example:_\n\n```\n# printf '%s\\n' \"# This is a subpolicy to disable Encrypt then MAC\" \"# for the SSH protocol (libssh and OpenSSH)\" \"etm@SSH = DISABLE_ETM\" >> /etc/crypto-policies/policies/modules/NO-SSHETM.pmod\n```\n\nRun the following command to update the system-wide cryptographic policy\n\n```\n# update-crypto-policies --set <CRYPTO_POLICY>:<CRYPTO_SUBPOLICY1>:<CRYPTO_SUBPOLICY2>:<CRYPTO_SUBPOLICY3>\n```\n\n_Example:_\n\n```\n# update-crypto-policies --set DEFAULT:NO-SHA1:NO-WEAKMAC:NO-SSHCBC:NO-SSHCHACHA20:NO-SSHETM\n```\n\nRun the following command to reboot the system to make your cryptographic settings effective for already running services and applications:\n\n```\n# reboot\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.6.7_assessment-method",
                    "prose": "**- IF -** `CVE-2023-48795` has been addressed or if CBC is disabled for OpenSSH server this recommendation is not needed.\n\nRun the following command to verify `EtM` is disabled for `SSH`:\n\n```\n# grep -Psi -- '^\\h*etm\\b' /etc/crypto-policies/state/CURRENT.pol\n```\n\nVerify output includes either:\n\n```\netm@libssh = DISABLE_ETM\netm@openssh-client = DISABLE_ETM\netm@openssh-server = DISABLE_ETM\n```\n\n**- OR -**\n\n```\netm = DISABLE_ETM\n```\n\n**Note:** The ability to disable EtM through system wide crypto policy was added in version 9.3",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-1-7",
            "title": "Configure Command Line Warning Banners",
            "props": [
              {
                "name": "label",
                "value": "1.7"
              }
            ],
            "controls": [
              {
                "id": "cis-1.7.1",
                "title": "Ensure message of the day is configured properly",
                "props": [
                  {
                    "name": "label",
                    "value": "1.7.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.7.1_statement",
                    "prose": "The contents of the `/etc/motd` file are displayed to users after login and function as a message of the day for authenticated users.\n\nUnix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If `mingetty(8)` supports the following options, they display operating system information: `\\m` - machine architecture `\\r` - operating system release `\\s` - operating system name `\\v` - operating system version"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.7.1_assessment-objective",
                    "prose": "Rationale: Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \" `uname -a` \" command once they have logged in."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.7.1_guidance",
                    "prose": "Edit the file found in `/etc/motd.d/*` with the appropriate contents according to your site policy, remove any instances of `\\m` , `\\r` , `\\s` , `\\v` or references to the `OS platform`\n\n**- OR -**\n\n**- IF -** the `motd` is not used, this file can be removed.\n\nRun the following command to remove the `motd` file:\n\n```\n# rm /etc/motd\n```\n\nRun the following script and review and/or update all returned files' contents to:\n- Remove all system information (`\\v`, `\\r`; `\\m`, `\\s`)\n- Remove any refence to the operating system\n- Ensure contents follow local site policy\n\n```\n#!/usr/bin/env bash\n\n{\n a_files=()\n for l_file in /etc/motd{,.d/*}; do\n if grep -Psqi -- \"(\\\\\\v|\\\\\\r|\\\\\\m|\\\\\\s|\\b$(grep ^ID= /etc/os-release | cut -d= -f2 | sed -e 's/\"//g')\\b)\" \"$l_file\"; then\n echo -e \"\\n - File: \\\"$l_file\\\" includes system information. Edit this file to remove these entries\"\n else\n a_files+=(\"$l_file\")\n fi\n done\n if [ \"${#a_files[@]}\" -gt 0 ]; then\n echo -e \"\\n- ** Please review the following files and verify their contents follow local site policy **\\n\"\n printf '%s\\n' \"${a_files[@]}\"\n fi\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.7.1_assessment-method",
                    "prose": "Run the following script to verify `MOTD` files do not contain system information:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n a_files=()\n for l_file in /etc/motd{,.d/*}; do\n if grep -Psqi -- \"(\\\\\\v|\\\\\\r|\\\\\\m|\\\\\\s|\\b$(grep ^ID= /etc/os-release | cut -d= -f2 | sed -e 's/\"//g')\\b)\" \"$l_file\"; then\n l_output2=\"$l_output2\\n - File: \\\"$l_file\\\" includes system information\"\n else\n a_files+=(\"$l_file\")\n fi\n done\n if [ \"${#a_files[@]}\" -gt 0 ]; then\n echo -e \"\\n- ** Please review the following files and verify their contents follow local site policy **\\n\"\n printf '%s\\n' \"${a_files[@]}\"\n elif [ -z \"$l_output2\" ]; then\n echo -e \"- ** No MOTD files with any size were found. Please verify this conforms to local site policy ** -\"\n fi\n if [ -z \"$l_output2\" ]; then\n l_output=\" - No MOTD files include system information\"\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n fi\n}\n```\n\nReview any files returned and verify that they follow local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.7.2",
                "title": "Ensure local login warning banner is configured properly",
                "props": [
                  {
                    "name": "label",
                    "value": "1.7.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.7.2_statement",
                    "prose": "The contents of the `/etc/issue` file are displayed to users prior to login for local terminals.\n\nUnix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If `mingetty(8)` supports the following options, they display operating system information: `\\m` - machine architecture `\\r` - operating system release `\\s` - operating system name `\\v` - operating system version - or the operating system's name"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.7.2_assessment-objective",
                    "prose": "Rationale: Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \" `uname -a` \" command once they have logged in."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.7.2_guidance",
                    "prose": "Edit the `/etc/issue` file with the appropriate contents according to your site policy, remove any instances of `\\m` , `\\r` , `\\s` , `\\v` or references to the `OS platform`\n\n_Example:_\n\n```\n# echo \"Authorized users only. All activity may be monitored and reported.\" > /etc/issue\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.7.2_assessment-method",
                    "prose": "Run the following command and verify that the contents match site policy:\n\n```\n# cat /etc/issue\n```\n\nRun the following command and verify no results are returned:\n\n```\n# grep -E -i \"(\\\\\\v|\\\\\\r|\\\\\\m|\\\\\\s|$(grep '^ID=' /etc/os-release | cut -d= -f2 | sed -e 's/\"//g'))\" /etc/issue\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.7.3",
                "title": "Ensure remote login warning banner is configured properly",
                "props": [
                  {
                    "name": "label",
                    "value": "1.7.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.7.3_statement",
                    "prose": "The contents of the `/etc/issue.net` file are displayed to users prior to login for remote connections from configured services.\n\nUnix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If `mingetty(8)` supports the following options, they display operating system information: `\\m` - machine architecture `\\r` - operating system release `\\s` - operating system name `\\v` - operating system version"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.7.3_assessment-objective",
                    "prose": "Rationale: Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \" `uname -a` \" command once they have logged in."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.7.3_guidance",
                    "prose": "Edit the `/etc/issue.net` file with the appropriate contents according to your site policy, remove any instances of `\\m` , `\\r` , `\\s` , `\\v` or references to the `OS platform`\n\n_Example:_\n\n```\n# echo \"Authorized users only. All activity may be monitored and reported.\" > /etc/issue.net\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.7.3_assessment-method",
                    "prose": "Run the following command and verify that the contents match site policy:\n\n```\n# cat /etc/issue.net\n```\n\nRun the following command and verify no results are returned:\n\n```\n# grep -E -i \"(\\\\\\v|\\\\\\r|\\\\\\m|\\\\\\s|$(grep '^ID=' /etc/os-release | cut -d= -f2 | sed -e 's/\"//g'))\" /etc/issue.net\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.7.4",
                "title": "Ensure access to /etc/motd is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "1.7.4"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.7.4_statement",
                    "prose": "The contents of the `/etc/motd` file are displayed to users after login and function as a message of the day for authenticated users."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.7.4_assessment-objective",
                    "prose": "Rationale: **- IF -** the `/etc/motd` file does not have the correct access configured, it could be modified by unauthorized users with incorrect or misleading information."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.7.4_guidance",
                    "prose": "Run the following commands to set mode, owner, and group on `/etc/motd`:\n\n```\n# chown root:root $(readlink -e /etc/motd)\n# chmod u-x,go-wx $(readlink -e /etc/motd)\n```\n\n **- OR -**\n\nRun the following command to remove the `/etc/motd` file:\n\n```\n# rm /etc/motd\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.7.4_assessment-method",
                    "prose": "Run the following command and verify that if `/etc/motd` exists, `Access` is `644` or more restrictive, `Uid` and `Gid` are both `0/root`:\n\n```\n# [ -e /etc/motd ] && stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/motd\n\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)\n -- OR --\nNothing is returned\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.7.5",
                "title": "Ensure access to /etc/issue is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "1.7.5"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.7.5_statement",
                    "prose": "The contents of the `/etc/issue` file are displayed to users prior to login for local terminals."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.7.5_assessment-objective",
                    "prose": "Rationale: **- IF -** the `/etc/issue` file does not have the correct access configured, it could be modified by unauthorized users with incorrect or misleading information."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.7.5_guidance",
                    "prose": "Run the following commands to set mode, owner, and group on `/etc/issue`:\n\n```\n# chown root:root $(readlink -e /etc/issue)\n# chmod u-x,go-wx $(readlink -e /etc/issue)\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.7.5_assessment-method",
                    "prose": "Run the following command and verify `Access` is `644` or more restrictive and `Uid` and `Gid` are both `0/root`:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/issue\n\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: { 0/ root)\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.7.6",
                "title": "Ensure access to /etc/issue.net is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "1.7.6"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.7.6_statement",
                    "prose": "The contents of the `/etc/issue.net` file are displayed to users prior to login for remote connections from configured services."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.7.6_assessment-objective",
                    "prose": "Rationale: **- IF -** the `/etc/issue.net` file does not have the correct access configured, it could be modified by unauthorized users with incorrect or misleading information."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.7.6_guidance",
                    "prose": "Run the following commands to set mode, owner, and group on `/etc/issue.net`:\n\n```\n# chown root:root $(readlink -e /etc/issue.net)\n# chmod u-x,go-wx $(readlink -e /etc/issue.net)\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.7.6_assessment-method",
                    "prose": "Run the following command and verify `Access` is `644` or more restrictive and `Uid` and `Gid` are both `0/root`:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/issue.net\n\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-1-8",
            "title": "Configure GNOME Display Manager",
            "props": [
              {
                "name": "label",
                "value": "1.8"
              }
            ],
            "controls": [
              {
                "id": "cis-1.8.2",
                "title": "Ensure GDM login banner is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "1.8.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.8.2_statement",
                    "prose": "GDM is the GNOME Display Manager which handles graphical login for GNOME based systems."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.8.2_assessment-objective",
                    "prose": "Rationale: Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.8.2_guidance",
                    "prose": "Run the following script to verify that the banner message is enabled and set:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pkgoutput=\"\"\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n done\n if [ -n \"$l_pkgoutput\" ]; then\n\n l_gdmprofile=\"gdm\" # Set this to desired profile name IaW Local site policy\n l_bmessage=\"'Authorized uses only. All activity may be monitored and reported'\" # Set to desired banner message\n if [ ! -f \"/etc/dconf/profile/$l_gdmprofile\" ]; then\n echo \"Creating profile \\\"$l_gdmprofile\\\"\"\n echo -e \"user-db:user\\nsystem-db:$l_gdmprofile\\nfile-db:/usr/share/$l_gdmprofile/greeter-dconf-defaults\" > /etc/dconf/profile/$l_gdmprofile\n fi\n if [ ! -d \"/etc/dconf/db/$l_gdmprofile.d/\" ]; then\n echo \"Creating dconf database directory \\\"/etc/dconf/db/$l_gdmprofile.d/\\\"\"\n mkdir /etc/dconf/db/$l_gdmprofile.d/\n fi\n if ! grep -Piq '^\\h*banner-message-enable\\h*=\\h*true\\b' /etc/dconf/db/$l_gdmprofile.d/*; then\n echo \"creating gdm keyfile for machine-wide settings\"\n if ! grep -Piq -- '^\\h*banner-message-enable\\h*=\\h*' /etc/dconf/db/$l_gdmprofile.d/*; then\n l_kfile=\"/etc/dconf/db/$l_gdmprofile.d/01-banner-message\"\n echo -e \"\\n[org/gnome/login-screen]\\nbanner-message-enable=true\" >> \"$l_kfile\"\n else\n l_kfile=\"$(grep -Pil -- '^\\h*banner-message-enable\\h*=\\h*' /etc/dconf/db/$l_gdmprofile.d/*)\"\n ! grep -Pq '^\\h*\\[org\\/gnome\\/login-screen\\]' \"$l_kfile\" && sed -ri '/^\\s*banner-message-enable/ i\\[org/gnome/login-screen]' \"$l_kfile\"\n ! grep -Pq '^\\h*banner-message-enable\\h*=\\h*true\\b' \"$l_kfile\" && sed -ri 's/^\\s*(banner-message-enable\\s*=\\s*)(\\S+)(\\s*.*$)/\\1true \\3//' \"$l_kfile\"\n # sed -ri '/^\\s*\\[org\\/gnome\\/login-screen\\]/ a\\\\nbanner-message-enable=true' \"$l_kfile\"\n fi\n fi\n if ! grep -Piq \"^\\h*banner-message-text=[\\'\\\"]+\\S+\" \"$l_kfile\"; then\n sed -ri \"/^\\s*banner-message-enable/ a\\banner-message-text=$l_bmessage\" \"$l_kfile\"\n fi\n dconf update\n else\n echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n - Recommendation is Not Applicable\\n - No remediation required\\n\"\n fi\n}\n```\n\n**Note:**\n- There is no character limit for the banner message. gnome-shell autodetects longer stretches of text and enters two column mode.\n- The banner message cannot be read from an external file.\n\n **- OR -**\n\nRun the following command to remove the gdm package:\n\n```\n# dnf remove gdm\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.8.2_assessment-method",
                    "prose": "Run the following script to verify that the text banner on the login screen is enabled and set:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pkgoutput=\"\"\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n done\n if [ -n \"$l_pkgoutput\" ]; then\n l_output=\"\" l_output2=\"\"\n echo -e \"$l_pkgoutput\"\n # Look for existing settings and set variables if they exist\n l_gdmfile=\"$(grep -Prils '^\\h*banner-message-enable\\b' /etc/dconf/db/*.d)\"\n if [ -n \"$l_gdmfile\" ]; then\n # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n l_gdmprofile=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_gdmfile\")\"\n # Check if banner message is enabled\n if grep -Pisq '^\\h*banner-message-enable=true\\b' \"$l_gdmfile\"; then\n l_output=\"$l_output\\n - The \\\"banner-message-enable\\\" option is enabled in \\\"$l_gdmfile\\\"\"\n else\n l_output2=\"$l_output2\\n - The \\\"banner-message-enable\\\" option is not enabled\"\n fi\n l_lsbt=\"$(grep -Pios '^\\h*banner-message-text=.*$' \"$l_gdmfile\")\"\n if [ -n \"$l_lsbt\" ]; then\n l_output=\"$l_output\\n - The \\\"banner-message-text\\\" option is set in \\\"$l_gdmfile\\\"\\n - banner-message-text is set to:\\n - \\\"$l_lsbt\\\"\"\n else\n l_output2=\"$l_output2\\n - The \\\"banner-message-text\\\" option is not set\"\n fi\n if grep -Pq \"^\\h*system-db:$l_gdmprofile\" /etc/dconf/profile/\"$l_gdmprofile\"; then\n l_output=\"$l_output\\n - The \\\"$l_gdmprofile\\\" profile exists\"\n else\n l_output2=\"$l_output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist\"\n fi\n if [ -f \"/etc/dconf/db/$l_gdmprofile\" ]; then\n l_output=\"$l_output\\n - The \\\"$l_gdmprofile\\\" profile exists in the dconf database\"\n else\n l_output2=\"$l_output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist in the dconf database\"\n fi\n else\n l_output2=\"$l_output2\\n - The \\\"banner-message-enable\\\" option isn't configured\"\n fi\n else\n echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n - Recommendation is Not Applicable\\n- Audit result:\\n *** PASS ***\\n\"\n fi\n # Report results. If no failures output in l_output2, we pass\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.8.3",
                "title": "Ensure GDM disable-user-list option is enabled",
                "props": [
                  {
                    "name": "label",
                    "value": "1.8.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.8.3_statement",
                    "prose": "GDM is the GNOME Display Manager which handles graphical login for GNOME based systems.\n\nThe `disable-user-list` option controls if a list of users is displayed on the login screen"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.8.3_assessment-objective",
                    "prose": "Rationale: Displaying the user list eliminates half of the Userid/Password equation that an unauthorized person would need to log on."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.8.3_guidance",
                    "prose": "Run the following script to enable the `disable-user-list` option:\n\n**Note:** the `l_gdm_profile` variable in the script can be changed if a different profile name is desired in accordance with local site policy.\n\n```\n#!/usr/bin/env bash\n\n{\n l_gdmprofile=\"gdm\"\n if [ ! -f \"/etc/dconf/profile/$l_gdmprofile\" ]; then\n echo \"Creating profile \\\"$l_gdmprofile\\\"\"\n echo -e \"user-db:user\\nsystem-db:$l_gdmprofile\\nfile-db:/usr/share/$l_gdmprofile/greeter-dconf-defaults\" > /etc/dconf/profile/$l_gdmprofile\n fi\n if [ ! -d \"/etc/dconf/db/$l_gdmprofile.d/\" ]; then\n echo \"Creating dconf database directory \\\"/etc/dconf/db/$l_gdmprofile.d/\\\"\"\n mkdir /etc/dconf/db/$l_gdmprofile.d/\n fi\n if ! grep -Piq '^\\h*disable-user-list\\h*=\\h*true\\b' /etc/dconf/db/$l_gdmprofile.d/*; then\n echo \"creating gdm keyfile for machine-wide settings\"\n if ! grep -Piq -- '^\\h*\\[org\\/gnome\\/login-screen\\]' /etc/dconf/db/$l_gdmprofile.d/*; then\n echo -e \"\\n[org/gnome/login-screen]\\n# Do not show the user list\\ndisable-user-list=true\" >> /etc/dconf/db/$l_gdmprofile.d/00-login-screen\n else\n sed -ri '/^\\s*\\[org\\/gnome\\/login-screen\\]/ a\\# Do not show the user list\\ndisable-user-list=true' $(grep -Pil -- '^\\h*\\[org\\/gnome\\/login-screen\\]' /etc/dconf/db/$l_gdmprofile.d/*)\n fi\n fi\n dconf update\n}\n```\n\n**Note:** When the user profile is created or changed, the user will need to log out and log in again before the changes will be applied.\n\n **- OR -**\n\nRun the following command to remove the GNOME package:\n\n```\n# dnf remove gdm\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.8.3_assessment-method",
                    "prose": "Run the following script and to verify that the `disable-user-list` option is enabled or GNOME isn't installed:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pkgoutput=\"\"\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n done\n if [ -n \"$l_pkgoutput\" ]; then\n output=\"\" output2=\"\"\n l_gdmfile=\"$(grep -Pril '^\\h*disable-user-list\\h*=\\h*true\\b' /etc/dconf/db)\"\n if [ -n \"$l_gdmfile\" ]; then\n output=\"$output\\n - The \\\"disable-user-list\\\" option is enabled in \\\"$l_gdmfile\\\"\"\n l_gdmprofile=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_gdmfile\")\"\n if grep -Pq \"^\\h*system-db:$l_gdmprofile\" /etc/dconf/profile/\"$l_gdmprofile\"; then\n output=\"$output\\n - The \\\"$l_gdmprofile\\\" exists\"\n else\n output2=\"$output2\\n - The \\\"$l_gdmprofile\\\" doesn't exist\"\n fi\n if [ -f \"/etc/dconf/db/$l_gdmprofile\" ]; then\n output=\"$output\\n - The \\\"$l_gdmprofile\\\" profile exists in the dconf database\"\n else\n output2=\"$output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist in the dconf database\"\n fi\n else\n output2=\"$output2\\n - The \\\"disable-user-list\\\" option is not enabled\"\n fi\n if [ -z \"$output2\" ]; then\n echo -e \"$l_pkgoutput\\n- Audit result:\\n *** PASS: ***\\n$output\\n\"\n else\n echo -e \"$l_pkgoutput\\n- Audit Result:\\n *** FAIL: ***\\n$output2\\n\"\n [ -n \"$output\" ] && echo -e \"$output\\n\"\n fi\n else\n echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n - Recommendation is Not Applicable\\n- Audit result:\\n *** PASS ***\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.8.4",
                "title": "Ensure GDM screen locks when the user is idle",
                "props": [
                  {
                    "name": "label",
                    "value": "1.8.4"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.8.4_statement",
                    "prose": "GNOME Desktop Manager can make the screen lock automatically whenever the user is idle for some amount of time.\n\n- `idle-delay=uint32 {n}` - Number of seconds of inactivity before the screen goes blank\n- `lock-delay=uint32 {n}` - Number of seconds after the screen is blank before locking the screen\n\n_Example key file:_\n```\n# Specify the dconf path\n[org/gnome/desktop/session]\n\n# Number of seconds of inactivity before the screen goes blank\n# Set to 0 seconds if you want to deactivate the screensaver.\nidle-delay=uint32 900\n\n# Specify the dconf path\n[org/gnome/desktop/screensaver]\n\n# Number of seconds after the screen is blank before locking the screen\nlock-delay=uint32 5\n```"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.8.4_assessment-objective",
                    "prose": "Rationale: Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.8.4_guidance",
                    "prose": "Create or edit a file in the `/etc/dconf/profile/` and verify it includes the following:\n\n```\nuser-db:user\nsystem-db:{NAME_OF_DCONF_DATABASE}\n```\n\n**Note:** `local` is the name of a dconf database used in the examples.\n\n_Example:_\n\n```\n# echo -e '\\nuser-db:user\\nsystem-db:local' >> /etc/dconf/profile/user\n```\n\nCreate the directory `/etc/dconf/db/{NAME_OF_DCONF_DATABASE}.d/` if it doesn't already exist:\n\n_Example:_\n\n```\n# mkdir /etc/dconf/db/local.d\n```\n\nCreate the key file `/etc/dconf/db/{NAME_OF_DCONF_DATABASE}.d/{FILE_NAME}` to provide information for the `{NAME_OF_DCONF_DATABASE}` database:\n\n_Example script:_\n\n```\n#!/usr/bin/env bash\n\n{\n l_key_file=\"/etc/dconf/db/local.d/00-screensaver\"\n l_idmv=\"900\" # Set max value for idle-delay in seconds (between 1 and 900)\n l_ldmv=\"5\" # Set max value for lock-delay in seconds (between 0 and 5)\n {\n echo '# Specify the dconf path'\n echo '[org/gnome/desktop/session]'\n echo ''\n echo '# Number of seconds of inactivity before the screen goes blank'\n echo '# Set to 0 seconds if you want to deactivate the screensaver.'\n echo \"idle-delay=uint32 $l_idmv\"\n echo ''\n echo '# Specify the dconf path'\n echo '[org/gnome/desktop/screensaver]'\n echo ''\n echo '# Number of seconds after the screen is blank before locking the screen'\n echo \"lock-delay=uint32 $l_ldmv\"\n } > \"$l_key_file\"\n}\n```\n**Note:** You must include the uint32 along with the integer key values as shown.\n\nRun the following command to update the system databases:\n\n```\n# dconf update\n```\n**Note:** Users must log out and back in again before the system-wide settings take effect."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.8.4_assessment-method",
                    "prose": "Run the following script to verify that the screen locks when the user is idle:\n\n```\n#!/usr/bin/env bash\n\n{\n # Check if GNMOE Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\\n\n # determine system's package manager\n l_pkgoutput=\"\"\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n # Check if GDM is installed\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n done\n # Check configuration (If applicable)\n if [ -n \"$l_pkgoutput\" ]; then\n l_output=\"\" l_output2=\"\"\n l_idmv=\"900\" # Set for max value for idle-delay in seconds\n l_ldmv=\"5\" # Set for max value for lock-delay in seconds\n # Look for idle-delay to determine profile in use, needed for remaining tests\n l_kfile=\"$(grep -Psril '^\\h*idle-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/)\" # Determine file containing idle-delay key\n if [ -n \"$l_kfile\" ]; then\n # set profile name (This is the name of a dconf database)\n l_profile=\"$(awk -F'/' '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile\")\" #Set the key profile name\n l_pdbdir=\"/etc/dconf/db/$l_profile.d\" # Set the key file dconf db directory\n # Confirm that idle-delay exists, includes unit32, and value is between 1 and max value for idle-delay\n l_idv=\"$(awk -F 'uint32' '/idle-delay/{print $2}' \"$l_kfile\" | xargs)\"\n if [ -n \"$l_idv\" ]; then\n [ \"$l_idv\" -gt \"0\" -a \"$l_idv\" -le \"$l_idmv\" ] && l_output=\"$l_output\\n - The \\\"idle-delay\\\" option is set to \\\"$l_idv\\\" seconds in \\\"$l_kfile\\\"\"\n [ \"$l_idv\" = \"0\" ] && l_output2=\"$l_output2\\n - The \\\"idle-delay\\\" option is set to \\\"$l_idv\\\" (disabled) in \\\"$l_kfile\\\"\"\n [ \"$l_idv\" -gt \"$l_idmv\" ] && l_output2=\"$l_output2\\n - The \\\"idle-delay\\\" option is set to \\\"$l_idv\\\" seconds (greater than $l_idmv) in \\\"$l_kfile\\\"\"\n else\n l_output2=\"$l_output2\\n - The \\\"idle-delay\\\" option is not set in \\\"$l_kfile\\\"\"\n fi\n # Confirm that lock-delay exists, includes unit32, and value is between 0 and max value for lock-delay\n l_ldv=\"$(awk -F 'uint32' '/lock-delay/{print $2}' \"$l_kfile\" | xargs)\"\n if [ -n \"$l_ldv\" ]; then\n [ \"$l_ldv\" -ge \"0\" -a \"$l_ldv\" -le \"$l_ldmv\" ] && l_output=\"$l_output\\n - The \\\"lock-delay\\\" option is set to \\\"$l_ldv\\\" seconds in \\\"$l_kfile\\\"\"\n [ \"$l_ldv\" -gt \"$l_ldmv\" ] && l_output2=\"$l_output2\\n - The \\\"lock-delay\\\" option is set to \\\"$l_ldv\\\" seconds (greater than $l_ldmv) in \\\"$l_kfile\\\"\"\n else\n l_output2=\"$l_output2\\n - The \\\"lock-delay\\\" option is not set in \\\"$l_kfile\\\"\"\n fi\n # Confirm that dconf profile exists\n if grep -Psq \"^\\h*system-db:$l_profile\" /etc/dconf/profile/*; then\n l_output=\"$l_output\\n - The \\\"$l_profile\\\" profile exists\"\n else\n l_output2=\"$l_output2\\n - The \\\"$l_profile\\\" doesn't exist\"\n fi\n # Confirm that dconf profile database file exists\n if [ -f \"/etc/dconf/db/$l_profile\" ]; then\n l_output=\"$l_output\\n - The \\\"$l_profile\\\" profile exists in the dconf database\"\n else\n l_output2=\"$l_output2\\n - The \\\"$l_profile\\\" profile doesn't exist in the dconf database\"\n fi\n else\n l_output2=\"$l_output2\\n - The \\\"idle-delay\\\" option doesn't exist, remaining tests skipped\"\n fi\n else\n l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n fi\n # Report results. If no failures output in l_output2, we pass\n [ -n \"$l_pkgoutput\" ] && echo -e \"\\n$l_pkgoutput\"\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```\n\n**Note:**\n- `idle-delay=uint32` Should be 900 seconds (15 minutes) or less, not `0` (disabled) and follow local site policy\n- `lock-delay=uint32` should be 5 seconds or less and follow local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.8.5",
                "title": "Ensure GDM screen locks cannot be overridden",
                "props": [
                  {
                    "name": "label",
                    "value": "1.8.5"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.8.5_statement",
                    "prose": "GNOME Desktop Manager can make the screen lock automatically whenever the user is idle for some amount of time.\n\nBy using the lockdown mode in dconf, you can prevent users from changing specific settings.\n\nTo lock down a dconf key or subpath, create a locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths to lock. Just as with the keyfiles, you may add any number of files to this directory.\n\n_Example Lock File:_\n\n```\n# Lock desktop screensaver settings\n/org/gnome/desktop/session/idle-delay\n/org/gnome/desktop/screensaver/lock-delay\n```"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.8.5_assessment-objective",
                    "prose": "Rationale: Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended.\n\nWithout locking down the system settings, user settings take precedence over the system settings."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.8.5_guidance",
                    "prose": "Run the following script to ensure screen locks cannot be overridden:\n\n```\n#!/usr/bin/env bash\n\n{\n # Check if GNMOE Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\\n\n # determine system's package manager\n l_pkgoutput=\"\"\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n # Check if GDM is installed\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"y\" && echo -e \"\\n - Package: \\\"$l_pn\\\" exists on the system\\n - remediating configuration if needed\"\n done\n # Check configuration (If applicable)\n if [ -n \"$l_pkgoutput\" ]; then\n # Look for idle-delay to determine profile in use, needed for remaining tests\n l_kfd=\"/etc/dconf/db/$(grep -Psril '^\\h*idle-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked\n # Look for lock-delay to determine profile in use, needed for remaining tests\n l_kfd2=\"/etc/dconf/db/$(grep -Psril '^\\h*lock-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked\n if [ -d \"$l_kfd\" ]; then # If key file directory doesn't exist, options can't be locked\n if grep -Prilq '^\\h*\\/org\\/gnome\\/desktop\\/session\\/idle-delay\\b' \"$l_kfd\"; then\n echo \" - \\\"idle-delay\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org\\/gnome\\/desktop\\/session\\/idle-delay\\b' \"$l_kfd\")\\\"\"\n else\n echo \"creating entry to lock \\\"idle-delay\\\"\"\n [ ! -d \"$l_kfd\"/locks ] && echo \"creating directory $l_kfd/locks\" && mkdir \"$l_kfd\"/locks\n {\n echo -e '\\n# Lock desktop screensaver idle-delay setting'\n echo '/org/gnome/desktop/session/idle-delay'\n } >> \"$l_kfd\"/locks/00-screensaver \n fi\n else\n echo -e \" - \\\"idle-delay\\\" is not set so it can not be locked\\n - Please follow Recommendation \\\"Ensure GDM screen locks when the user is idle\\\" and follow this Recommendation again\"\n fi\n if [ -d \"$l_kfd2\" ]; then # If key file directory doesn't exist, options can't be locked\n if grep -Prilq '^\\h*\\/org\\/gnome\\/desktop\\/screensaver\\/lock-delay\\b' \"$l_kfd2\"; then\n echo \" - \\\"lock-delay\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org\\/gnome\\/desktop\\/screensaver\\/lock-delay\\b' \"$l_kfd2\")\\\"\"\n else\n echo \"creating entry to lock \\\"lock-delay\\\"\"\n [ ! -d \"$l_kfd2\"/locks ] && echo \"creating directory $l_kfd2/locks\" && mkdir \"$l_kfd2\"/locks\n {\n echo -e '\\n# Lock desktop screensaver lock-delay setting'\n echo '/org/gnome/desktop/screensaver/lock-delay'\n } >> \"$l_kfd2\"/locks/00-screensaver \n fi\n else\n echo -e \" - \\\"lock-delay\\\" is not set so it can not be locked\\n - Please follow Recommendation \\\"Ensure GDM screen locks when the user is idle\\\" and follow this Recommendation again\"\n fi\n else\n echo -e \" - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n fi\n}\n```\n\nRun the following command to update the system databases:\n\n```\n# dconf update\n```\n**Note:** Users must log out and back in again before the system-wide settings take effect."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.8.5_assessment-method",
                    "prose": "Run the following script to verify that the screen lock cannot be overridden:\n\n```\n#!/usr/bin/env bash\n\n{\n # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\\n\n # determine system's package manager\n l_pkgoutput=\"\"\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n # Check if GDM is installed\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n done\n # Check configuration (If applicable)\n if [ -n \"$l_pkgoutput\" ]; then\n l_output=\"\" l_output2=\"\"\n # Look for idle-delay to determine profile in use, needed for remaining tests\n l_kfd=\"/etc/dconf/db/$(grep -Psril '^\\h*idle-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked\n l_kfd2=\"/etc/dconf/db/$(grep -Psril '^\\h*lock-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked\n if [ -d \"$l_kfd\" ]; then # If key file directory doesn't exist, options can't be locked\n if grep -Prilq '\\/org\\/gnome\\/desktop\\/session\\/idle-delay\\b' \"$l_kfd\"; then\n l_output=\"$l_output\\n - \\\"idle-delay\\\" is locked in \\\"$(grep -Pril '\\/org\\/gnome\\/desktop\\/session\\/idle-delay\\b' \"$l_kfd\")\\\"\"\n else\n l_output2=\"$l_output2\\n - \\\"idle-delay\\\" is not locked\"\n fi\n else\n l_output2=\"$l_output2\\n - \\\"idle-delay\\\" is not set so it can not be locked\"\n fi\n if [ -d \"$l_kfd2\" ]; then # If key file directory doesn't exist, options can't be locked\n if grep -Prilq '\\/org\\/gnome\\/desktop\\/screensaver\\/lock-delay\\b' \"$l_kfd2\"; then\n l_output=\"$l_output\\n - \\\"lock-delay\\\" is locked in \\\"$(grep -Pril '\\/org\\/gnome\\/desktop\\/screensaver\\/lock-delay\\b' \"$l_kfd2\")\\\"\"\n else\n l_output2=\"$l_output2\\n - \\\"lock-delay\\\" is not locked\"\n fi\n else\n l_output2=\"$l_output2\\n - \\\"lock-delay\\\" is not set so it can not be locked\"\n fi\n else\n l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n fi\n # Report results. If no failures output in l_output2, we pass\n [ -n \"$l_pkgoutput\" ] && echo -e \"\\n$l_pkgoutput\"\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.8.6",
                "title": "Ensure GDM automatic mounting of removable media is disabled",
                "props": [
                  {
                    "name": "label",
                    "value": "1.8.6"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.8.6_statement",
                    "prose": "By default GNOME automatically mounts removable media when inserted as a convenience to the user."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.8.6_assessment-objective",
                    "prose": "Rationale: With automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in system even if they lacked permissions to mount it themselves.\nImpact: The use of portable hard drives is very common for workstation users. If your organization allows the use of portable storage or media on workstations and physical access controls to workstations is considered adequate there is little value add in turning off automounting."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.8.6_guidance",
                    "prose": "Run the following script to disable automatic mounting of media for all GNOME users:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pkgoutput=\"\"\n l_gpname=\"local\" # Set to desired dconf profile name (default is local)\n # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\\n\n # determine system's package manager\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n # Check if GDM is installed\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n done\n # Check configuration (If applicable)\n if [ -n \"$l_pkgoutput\" ]; then\n echo -e \"$l_pkgoutput\"\n # Look for existing settings and set variables if they exist\n l_kfile=\"$(grep -Prils -- '^\\h*automount\\b' /etc/dconf/db/*.d)\"\n l_kfile2=\"$(grep -Prils -- '^\\h*automount-open\\b' /etc/dconf/db/*.d)\"\n # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n if [ -f \"$l_kfile\" ]; then\n l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile\")\"\n echo \" - updating dconf profile name to \\\"$l_gpname\\\"\"\n elif [ -f \"$l_kfile2\" ]; then\n l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile2\")\"\n echo \" - updating dconf profile name to \\\"$l_gpname\\\"\"\n fi\n # check for consistency (Clean up configuration if needed)\n if [ -f \"$l_kfile\" ] && [ \"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile\")\" != \"$l_gpname\" ]; then\n sed -ri \"/^\\s*automount\\s*=/s/^/# /\" \"$l_kfile\"\n l_kfile=\"/etc/dconf/db/$l_gpname.d/00-media-automount\"\n fi\n if [ -f \"$l_kfile2\" ] && [ \"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile2\")\" != \"$l_gpname\" ]; then\n sed -ri \"/^\\s*automount-open\\s*=/s/^/# /\" \"$l_kfile2\"\n fi\n [ -z \"$l_kfile\" ] && l_kfile=\"/etc/dconf/db/$l_gpname.d/00-media-automount\"\n # Check if profile file exists\n if grep -Pq -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*; then\n echo -e \"\\n - dconf database profile exists in: \\\"$(grep -Pl -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*)\\\"\"\n else\n if [ ! -f \"/etc/dconf/profile/user\" ]; then\n l_gpfile=\"/etc/dconf/profile/user\"\n else\n l_gpfile=\"/etc/dconf/profile/user2\"\n fi\n echo -e \" - creating dconf database profile\"\n {\n echo -e \"\\nuser-db:user\"\n echo \"system-db:$l_gpname\"\n } >> \"$l_gpfile\"\n fi\n # create dconf directory if it doesn't exists\n l_gpdir=\"/etc/dconf/db/$l_gpname.d\"\n if [ -d \"$l_gpdir\" ]; then\n echo \" - The dconf database directory \\\"$l_gpdir\\\" exists\"\n else\n echo \" - creating dconf database directory \\\"$l_gpdir\\\"\"\n mkdir \"$l_gpdir\"\n fi\n # check automount-open setting\n if grep -Pqs -- '^\\h*automount-open\\h*=\\h*false\\b' \"$l_kfile\"; then\n echo \" - \\\"automount-open\\\" is set to false in: \\\"$l_kfile\\\"\"\n else\n echo \" - creating \\\"automount-open\\\" entry in \\\"$l_kfile\\\"\"\n ! grep -Psq -- '\\^\\h*\\[org\\/gnome\\/desktop\\/media-handling\\]\\b' \"$l_kfile\" && echo '[org/gnome/desktop/media-handling]' >> \"$l_kfile\"\n sed -ri '/^\\s*\\[org\\/gnome\\/desktop\\/media-handling\\]/a \\\\nautomount-open=false' \"$l_kfile\"\n fi\n # check automount setting\n if grep -Pqs -- '^\\h*automount\\h*=\\h*false\\b' \"$l_kfile\"; then\n echo \" - \\\"automount\\\" is set to false in: \\\"$l_kfile\\\"\"\n else\n echo \" - creating \\\"automount\\\" entry in \\\"$l_kfile\\\"\"\n ! grep -Psq -- '\\^\\h*\\[org\\/gnome\\/desktop\\/media-handling\\]\\b' \"$l_kfile\" && echo '[org/gnome/desktop/media-handling]' >> \"$l_kfile\"\n sed -ri '/^\\s*\\[org\\/gnome\\/desktop\\/media-handling\\]/a \\\\nautomount=false' \"$l_kfile\"\n fi\n # update dconf database\n dconf update\n else\n echo -e \"\\n - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n fi\n}\n```\n\n**- OR -**\n\nRun the following command to uninstall the GNOME desktop Manager package:\n\n```\n# dnf remove gdm\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.8.6_assessment-method",
                    "prose": "Run the following script to verify automatic mounting is disabled:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pkgoutput=\"\" l_output=\"\" l_output2=\"\"\n # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\\n\n # determine system's package manager\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n # Check if GDM is installed\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n done\n # Check configuration (If applicable)\n if [ -n \"$l_pkgoutput\" ]; then\n echo -e \"$l_pkgoutput\"\n # Look for existing settings and set variables if they exist\n l_kfile=\"$(grep -Prils -- '^\\h*automount\\b' /etc/dconf/db/*.d)\"\n l_kfile2=\"$(grep -Prils -- '^\\h*automount-open\\b' /etc/dconf/db/*.d)\"\n # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n if [ -f \"$l_kfile\" ]; then\n l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile\")\"\n elif [ -f \"$l_kfile2\" ]; then\n l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile2\")\"\n fi\n # If the profile name exist, continue checks\n if [ -n \"$l_gpname\" ]; then\n l_gpdir=\"/etc/dconf/db/$l_gpname.d\"\n # Check if profile file exists\n if grep -Pq -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*; then\n l_output=\"$l_output\\n - dconf database profile file \\\"$(grep -Pl -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*)\\\" exists\"\n else\n l_output2=\"$l_output2\\n - dconf database profile isn't set\"\n fi\n # Check if the dconf database file exists\n if [ -f \"/etc/dconf/db/$l_gpname\" ]; then\n l_output=\"$l_output\\n - The dconf database \\\"$l_gpname\\\" exists\"\n else\n l_output2=\"$l_output2\\n - The dconf database \\\"$l_gpname\\\" doesn't exist\"\n fi\n # check if the dconf database directory exists\n if [ -d \"$l_gpdir\" ]; then\n l_output=\"$l_output\\n - The dconf directory \\\"$l_gpdir\\\" exist\"\n else\n l_output2=\"$l_output2\\n - The dconf directory \\\"$l_gpdir\\\" doesn't exist\"\n fi\n # check automount setting\n if grep -Pqrs -- '^\\h*automount\\h*=\\h*false\\b' \"$l_kfile\"; then\n l_output=\"$l_output\\n - \\\"automount\\\" is set to false in: \\\"$l_kfile\\\"\"\n else\n l_output2=\"$l_output2\\n - \\\"automount\\\" is not set correctly\"\n fi\n # check automount-open setting\n if grep -Pqs -- '^\\h*automount-open\\h*=\\h*false\\b' \"$l_kfile2\"; then\n l_output=\"$l_output\\n - \\\"automount-open\\\" is set to false in: \\\"$l_kfile2\\\"\"\n else\n l_output2=\"$l_output2\\n - \\\"automount-open\\\" is not set correctly\"\n fi\n else\n # Setings don't exist. Nothing further to check\n l_output2=\"$l_output2\\n - neither \\\"automount\\\" or \\\"automount-open\\\" is set\"\n fi\n else\n l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n fi\n # Report results. If no failures output in l_output2, we pass\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.8.7",
                "title": "Ensure GDM disabling automatic mounting of removable media is not overridden",
                "props": [
                  {
                    "name": "label",
                    "value": "1.8.7"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.8.7_statement",
                    "prose": "By default GNOME automatically mounts removable media when inserted as a convenience to the user\n\nBy using the lockdown mode in dconf, you can prevent users from changing specific settings.\n\nTo lock down a dconf key or subpath, create a locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths to lock. Just as with the keyfiles, you may add any number of files to this directory.\n\n_Example Lock File:_\n```\n# Lock automount settings\n/org/gnome/desktop/media-handling/automount\n/org/gnome/desktop/media-handling/automount-open\n```"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.8.7_assessment-objective",
                    "prose": "Rationale: With automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in system even if they lacked permissions to mount it themselves.\nImpact: The use of portable hard drives is very common for workstation users"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.8.7_guidance",
                    "prose": "Run the following script to lock disable automatic mounting of media for all GNOME users:\n\n```\n#!/usr/bin/env bash\n\n{\n # Check if GNMOE Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\\n\n # determine system's package manager\n l_pkgoutput=\"\"\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n # Check if GDM is installed\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"y\" && echo -e \"\\n - Package: \\\"$l_pn\\\" exists on the system\\n - remediating configuration if needed\"\n done\n # Check configuration (If applicable)\n if [ -n \"$l_pkgoutput\" ]; then\n # Look for automount to determine profile in use, needed for remaining tests\n l_kfd=\"/etc/dconf/db/$(grep -Psril '^\\h*automount\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked\n # Look for automount-open to determine profile in use, needed for remaining tests\n l_kfd2=\"/etc/dconf/db/$(grep -Psril '^\\h*automount-open\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked\n if [ -d \"$l_kfd\" ]; then # If key file directory doesn't exist, options can't be locked\n if grep -Priq '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount\\b' \"$l_kfd\"; then\n echo \" - \\\"automount\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount\\b' \"$l_kfd\")\\\"\"\n else\n echo \" - creating entry to lock \\\"automount\\\"\"\n [ ! -d \"$l_kfd\"/locks ] && echo \"creating directory $l_kfd/locks\" && mkdir \"$l_kfd\"/locks\n {\n echo -e '\\n# Lock desktop media-handling automount setting'\n echo '/org/gnome/desktop/media-handling/automount'\n } >> \"$l_kfd\"/locks/00-media-automount \n fi\n else\n echo -e \" - \\\"automount\\\" is not set so it can not be locked\\n - Please follow Recommendation \\\"Ensure GDM automatic mounting of removable media is disabled\\\" and follow this Recommendation again\"\n fi\n if [ -d \"$l_kfd2\" ]; then # If key file directory doesn't exist, options can't be locked\n if grep -Priq '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount-open\\b' \"$l_kfd2\"; then\n echo \" - \\\"automount-open\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount-open\\b' \"$l_kfd2\")\\\"\"\n else\n echo \" - creating entry to lock \\\"automount-open\\\"\"\n [ ! -d \"$l_kfd2\"/locks ] && echo \"creating directory $l_kfd2/locks\" && mkdir \"$l_kfd2\"/locks\n {\n echo -e '\\n# Lock desktop media-handling automount-open setting'\n echo '/org/gnome/desktop/media-handling/automount-open'\n } >> \"$l_kfd2\"/locks/00-media-automount\n fi\n else\n echo -e \" - \\\"automount-open\\\" is not set so it can not be locked\\n - Please follow Recommendation \\\"Ensure GDM automatic mounting of removable media is disabled\\\" and follow this Recommendation again\"\n fi\n # update dconf database\n dconf update\n else\n echo -e \" - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n fi\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.8.7_assessment-method",
                    "prose": "Run the following script to verify disable automatic mounting is locked:\n\n```\n#!/usr/bin/env bash\n\n{\n # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\\n\n # determine system's package manager\n l_pkgoutput=\"\"\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n # Check if GDM is installed\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n done\n # Check configuration (If applicable)\n if [ -n \"$l_pkgoutput\" ]; then\n l_output=\"\" l_output2=\"\"\n echo -e \"$l_pkgoutput\\n\"\n # Look for idle-delay to determine profile in use, needed for remaining tests\n l_kfd=\"/etc/dconf/db/$(grep -Psril '^\\h*automount\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked\n l_kfd2=\"/etc/dconf/db/$(grep -Psril '^\\h*automount-open\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked\n if [ -d \"$l_kfd\" ]; then # If key file directory doesn't exist, options can't be locked\n if grep -Priq '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount\\b' \"$l_kfd\"; then\n l_output=\"$l_output\\n - \\\"automount\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount\\b' \"$l_kfd\")\\\"\"\n else\n l_output2=\"$l_output2\\n - \\\"automount\\\" is not locked\"\n fi\n else\n l_output2=\"$l_output2\\n - \\\"automount\\\" is not set so it can not be locked\"\n fi\n if [ -d \"$l_kfd2\" ]; then # If key file directory doesn't exist, options can't be locked\n if grep -Priq '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount-open\\b' \"$l_kfd2\"; then\n l_output=\"$l_output\\n - \\\"lautomount-open\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount-open\\b' \"$l_kfd2\")\\\"\"\n else\n l_output2=\"$l_output2\\n - \\\"automount-open\\\" is not locked\"\n fi\n else\n l_output2=\"$l_output2\\n - \\\"automount-open\\\" is not set so it can not be locked\"\n fi\n else\n l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n fi\n # Report results. If no failures output in l_output2, we pass\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.8.8",
                "title": "Ensure GDM autorun-never is enabled",
                "props": [
                  {
                    "name": "label",
                    "value": "1.8.8"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.8.8_statement",
                    "prose": "The `autorun-never` setting allows the GNOME Desktop Display Manager to disable autorun through GDM."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.8.8_assessment-objective",
                    "prose": "Rationale: Malware on removable media may take advantage of Autorun features when the media is inserted into a system and execute."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.8.8_guidance",
                    "prose": "Run the following script to set `autorun-never` to `true` for GDM users:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pkgoutput=\"\" l_output=\"\" l_output2=\"\"\n l_gpname=\"local\" # Set to desired dconf profile name (default is local)\n # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\\n\n # determine system's package manager\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n # Check if GDM is installed\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n done\n echo -e \"$l_pkgoutput\"\n # Check configuration (If applicable)\n if [ -n \"$l_pkgoutput\" ]; then\n echo -e \"$l_pkgoutput\"\n # Look for existing settings and set variables if they exist\n l_kfile=\"$(grep -Prils -- '^\\h*autorun-never\\b' /etc/dconf/db/*.d)\"\n # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n if [ -f \"$l_kfile\" ]; then\n l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile\")\"\n echo \" - updating dconf profile name to \\\"$l_gpname\\\"\"\n fi\n [ ! -f \"$l_kfile\" ] && l_kfile=\"/etc/dconf/db/$l_gpname.d/00-media-autorun\"\n # Check if profile file exists\n if grep -Pq -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*; then\n echo -e \"\\n - dconf database profile exists in: \\\"$(grep -Pl -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*)\\\"\"\n else\n [ ! -f \"/etc/dconf/profile/user\" ] && l_gpfile=\"/etc/dconf/profile/user\" || l_gpfile=\"/etc/dconf/profile/user2\"\n echo -e \" - creating dconf database profile\"\n {\n echo -e \"\\nuser-db:user\"\n echo \"system-db:$l_gpname\"\n } >> \"$l_gpfile\"\n fi\n # create dconf directory if it doesn't exists\n l_gpdir=\"/etc/dconf/db/$l_gpname.d\"\n if [ -d \"$l_gpdir\" ]; then\n echo \" - The dconf database directory \\\"$l_gpdir\\\" exists\"\n else\n echo \" - creating dconf database directory \\\"$l_gpdir\\\"\"\n mkdir \"$l_gpdir\"\n fi\n # check autorun-never setting\n if grep -Pqs -- '^\\h*autorun-never\\h*=\\h*true\\b' \"$l_kfile\"; then\n echo \" - \\\"autorun-never\\\" is set to true in: \\\"$l_kfile\\\"\"\n else\n echo \" - creating or updating \\\"autorun-never\\\" entry in \\\"$l_kfile\\\"\"\n if grep -Psq -- '^\\h*autorun-never' \"$l_kfile\"; then\n sed -ri 's/(^\\s*autorun-never\\s*=\\s*)(\\S+)(\\s*.*)$/\\1true \\3/' \"$l_kfile\"\n else\n ! grep -Psq -- '\\^\\h*\\[org\\/gnome\\/desktop\\/media-handling\\]\\b' \"$l_kfile\" && echo '[org/gnome/desktop/media-handling]' >> \"$l_kfile\"\n sed -ri '/^\\s*\\[org\\/gnome\\/desktop\\/media-handling\\]/a \\\\nautorun-never=true' \"$l_kfile\"\n fi\n fi\n else\n echo -e \"\\n - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n fi\n # update dconf database\n dconf update\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.8.8_assessment-method",
                    "prose": "Run the following script to verify that `autorun-never` is set to `true` for GDM:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pkgoutput=\"\" l_output=\"\" l_output2=\"\"\n # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\\n\n # determine system's package manager\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n # Check if GDM is installed\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n echo -e \"$l_pkgoutput\"\n done\n # Check configuration (If applicable)\n if [ -n \"$l_pkgoutput\" ]; then\n echo -e \"$l_pkgoutput\"\n # Look for existing settings and set variables if they exist\n l_kfile=\"$(grep -Prils -- '^\\h*autorun-never\\b' /etc/dconf/db/*.d)\"\n # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n if [ -f \"$l_kfile\" ]; then\n l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile\")\"\n fi\n # If the profile name exist, continue checks\n if [ -n \"$l_gpname\" ]; then\n l_gpdir=\"/etc/dconf/db/$l_gpname.d\"\n # Check if profile file exists\n if grep -Pq -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*; then\n l_output=\"$l_output\\n - dconf database profile file \\\"$(grep -Pl -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*)\\\" exists\"\n else\n l_output2=\"$l_output2\\n - dconf database profile isn't set\"\n fi\n # Check if the dconf database file exists\n if [ -f \"/etc/dconf/db/$l_gpname\" ]; then\n l_output=\"$l_output\\n - The dconf database \\\"$l_gpname\\\" exists\"\n else\n l_output2=\"$l_output2\\n - The dconf database \\\"$l_gpname\\\" doesn't exist\"\n fi\n # check if the dconf database directory exists\n if [ -d \"$l_gpdir\" ]; then\n l_output=\"$l_output\\n - The dconf directory \\\"$l_gpdir\\\" exitst\"\n else\n l_output2=\"$l_output2\\n - The dconf directory \\\"$l_gpdir\\\" doesn't exist\"\n fi\n # check autorun-never setting\n if grep -Pqrs -- '^\\h*autorun-never\\h*=\\h*true\\b' \"$l_kfile\"; then\n l_output=\"$l_output\\n - \\\"autorun-never\\\" is set to true in: \\\"$l_kfile\\\"\"\n else\n l_output2=\"$l_output2\\n - \\\"autorun-never\\\" is not set correctly\"\n fi\n else\n # Settings don't exist. Nothing further to check\n l_output2=\"$l_output2\\n - \\\"autorun-never\\\" is not set\"\n fi\n else\n l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n fi\n # Report results. If no failures output in l_output2, we pass\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.8.9",
                "title": "Ensure GDM autorun-never is not overridden",
                "props": [
                  {
                    "name": "label",
                    "value": "1.8.9"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.8.9_statement",
                    "prose": "The autorun-never setting allows the GNOME Desktop Display Manager to disable autorun through GDM.\n\nBy using the lockdown mode in dconf, you can prevent users from changing specific settings.\n\nTo lock down a dconf key or subpath, create a locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths to lock. Just as with the keyfiles, you may add any number of files to this directory.\n\nExample Lock File:\n```\n# Lock desktop media-handling settings\n/org/gnome/desktop/media-handling/autorun-never\n```"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.8.9_assessment-objective",
                    "prose": "Rationale: Malware on removable media may take advantage of Autorun features when the media is inserted into a system and execute."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.8.9_guidance",
                    "prose": "Run the following script to ensure that `autorun-never=true` cannot be overridden:\n\n```\n#!/usr/bin/env bash\n\n{\n # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\\n\n # determine system's package manager\n l_pkgoutput=\"\"\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n # Check if GDM is installed\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"y\" && echo -e \"\\n - Package: \\\"$l_pn\\\" exists on the system\\n - remediating configuration if needed\"\n done\n # Check configuration (If applicable)\n if [ -n \"$l_pkgoutput\" ]; then\n # Look for autorun to determine profile in use, needed for remaining tests\n l_kfd=\"/etc/dconf/db/$(grep -Psril '^\\h*autorun-never\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked\n if [ -d \"$l_kfd\" ]; then # If key file directory doesn't exist, options can't be locked\n if grep -Priq '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/autorun-never\\b' \"$l_kfd\"; then\n echo \" - \\\"autorun-never\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/autorun-never\\b' \"$l_kfd\")\\\"\"\n else\n echo \" - creating entry to lock \\\"autorun-never\\\"\"\n [ ! -d \"$l_kfd\"/locks ] && echo \"creating directory $l_kfd/locks\" && mkdir \"$l_kfd\"/locks\n {\n echo -e '\\n# Lock desktop media-handling autorun-never setting'\n echo '/org/gnome/desktop/media-handling/autorun-never'\n } >> \"$l_kfd\"/locks/00-media-autorun \n fi\n else\n echo -e \" - \\\"autorun-never\\\" is not set so it can not be locked\\n - Please follow Recommendation \\\"Ensure GDM autorun-never is enabled\\\" and follow this Recommendation again\"\n fi\n # update dconf database\n dconf update\n else\n echo -e \" - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n fi\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.8.9_assessment-method",
                    "prose": "Run the following script to verify that `autorun-never=true` cannot be overridden:\n\n```\n#!/usr/bin/env bash\n\n{\n # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\\n\n # determine system's package manager\n l_pkgoutput=\"\"\n if command -v dpkg-query > /dev/null 2> then\n l_pq=\"dpkg-query -W\"\n elif command -v rpm > /dev/null 2> then\n l_pq=\"rpm -q\"\n fi\n # Check if GDM is installed\n l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n for l_pn in $l_pcl; do\n $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n done\n # Check configuration (If applicable)\n if [ -n \"$l_pkgoutput\" ]; then\n l_output=\"\" l_output2=\"\"\n echo -e \"$l_pkgoutput\\n\"\n # Look for idle-delay to determine profile in use, needed for remaining tests\n l_kfd=\"/etc/dconf/db/$(grep -Psril '^\\h*autorun-never\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked\n if [ -d \"$l_kfd\" ]; then # If key file directory doesn't exist, options can't be locked\n if grep -Priq '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/autorun-never\\b' \"$l_kfd\"; then\n l_output=\"$l_output\\n - \\\"autorun-never\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/autorun-never\\b' \"$l_kfd\")\\\"\"\n else\n l_output2=\"$l_output2\\n - \\\"autorun-never\\\" is not locked\"\n fi\n else\n l_output2=\"$l_output2\\n - \\\"autorun-never\\\" is not set so it can not be locked\"\n fi\n else\n l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n fi\n # Report results. If no failures output in l_output2, we pass\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.8.10",
                "title": "Ensure XDMCP is not enabled",
                "props": [
                  {
                    "name": "label",
                    "value": "1.8.10"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.8.10_statement",
                    "prose": "X Display Manager Control Protocol (XDMCP) is designed to provide authenticated access to display management services for remote displays"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.8.10_assessment-objective",
                    "prose": "Rationale: XDMCP is inherently insecure.\n- XDMCP is not a ciphered protocol. This may allow an attacker to capture keystrokes entered by a user\n- XDMCP is vulnerable to man-in-the-middle attacks. This may allow an attacker to steal the credentials of legitimate users by impersonating the XDMCP server."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.8.10_guidance",
                    "prose": "Edit the file `/etc/gdm/custom.conf` and remove the line:\n\n```\nEnable=true\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.8.10_assessment-method",
                    "prose": "Run the following command and verify the output:\n\n```\n# grep -Eis '^\\s*Enable\\s*=\\s*true' /etc/gdm/custom.conf\n\nNothing should be returned\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-1.8.1",
                "title": "Ensure GNOME Display Manager is removed",
                "props": [
                  {
                    "name": "label",
                    "value": "1.8.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-1.8.1_statement",
                    "prose": "The GNOME Display Manager (GDM) is a program that manages graphical display servers and handles graphical user logins."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-1.8.1_assessment-objective",
                    "prose": "Rationale: If a Graphical User Interface (GUI) is not required, it should be removed to reduce the attack surface of the system.\nImpact: Removing the GNOME Display manager will remove the Graphical User Interface (GUI) from the system."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-1.8.1_guidance",
                    "prose": "Run the following command to remove the `gdm` package\n\n```\n# dnf remove gdm\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-1.8.1_assessment-method",
                    "prose": "Run the following command and verify the output:\n\n```\n# rpm -q gdm\n\npackage gdm is not installed\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          }
        ]
      },
      {
        "id": "section-2",
        "title": "Services",
        "props": [
          {
            "name": "label",
            "value": "2"
          }
        ],
        "controls": [],
        "groups": [
          {
            "id": "section-2-1",
            "title": "Configure Server Services",
            "props": [
              {
                "name": "label",
                "value": "2.1"
              }
            ],
            "controls": [
              {
                "id": "cis-2.1.1",
                "title": "Ensure autofs services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.1_statement",
                    "prose": "`autofs` allows automatic mounting of devices, typically including CD/DVDs and USB drives."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.1_assessment-objective",
                    "prose": "Rationale: With automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in system even if they lacked permissions to mount it themselves.\nImpact: The use of portable hard drives is very common for workstation users. If your organization allows the use of portable storage or media on workstations and physical access controls to workstations is considered adequate there is little value add in turning off automounting.\n\nThere may be packages that are dependent on the `autofs` package. If the `autofs` package is removed, these dependent packages will be removed as well. Before removing the `autofs` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `autofs.service` leaving the `autofs` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.1_guidance",
                    "prose": "Run the following commands to stop `autofs.service` and remove `autofs` package:\n\n```\n# systemctl stop autofs.service\n# dnf remove autofs\n```\n\n**- OR -**\n\n**- IF -** the `autofs` package is required as a dependency:\n\nRun the following commands to stop and mask `autofs.service`:\n\n```\n# systemctl stop autofs.service\n# systemctl mask autofs.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.1_assessment-method",
                    "prose": "As a preference `autofs` should not be installed unless other packages depend on it.\n\nRun the following command to verify `autofs` is not installed:\n\n```\n# rpm -q autofs\n\npackage autofs is not installed\n```\n\n**- OR -** \n\n**- IF -** the package is required for dependencies:\n\nRun the following command to verify `autofs.service` is not enabled:\n\n```\n# systemctl is-enabled autofs.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify the `autofs.service` is not active:\n\n```\n# systemctl is-active autofs.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.2",
                "title": "Ensure avahi daemon services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.2_statement",
                    "prose": "Avahi is a free zeroconf implementation, including a system for multicast DNS/DNS-SD service discovery. Avahi allows programs to publish and discover services and hosts running on a local network with no specific configuration. For example, a user can plug a computer into a network and Avahi automatically finds printers to print to, files to look at and people to talk to, as well as network services running on the machine."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.2_assessment-objective",
                    "prose": "Rationale: Automatic discovery of network services is not normally required for system functionality. It is recommended to remove this package to reduce the potential attack surface.\nImpact: There may be packages that are dependent on the `avahi` package. If the `avahi` package is removed, these dependent packages will be removed as well. Before removing the `avahi` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `avahi-daemon.socket` and `avahi-daemon.service` leaving the `avahi` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.2_guidance",
                    "prose": "Run the following commands to stop `avahi-daemon.socket` and `avahi-daemon.service`, and remove the `avahi` package:\n\n```\n# systemctl stop avahi-daemon.socket avahi-daemon.service\n# dnf remove avahi\n```\n\n**- OR -**\n\n**- IF -** the `avahi` package is required as a dependency:\n\nRun the following commands to stop and mask the `avahi-daemon.socket` and `avahi-daemon.service`:\n\n```\n# systemctl stop avahi-daemon.socket avahi-daemon.service\n# systemctl mask avahi-daemon.socket avahi-daemon.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.2_assessment-method",
                    "prose": "Run the following command to verify the `avahi` package is not installed:\n\n```\n# rpm -q avahi\n\npackage avahi is not installed\n```\n\n**- OR -** \n\n**- IF -** the `avahi` package is required as a dependency:\n\nRun the following command to verify `avahi-daemon.socket` and `avahi-daemon.service` are not enabled:\n\n```\n# systemctl is-enabled avahi-daemon.socket avahi-daemon.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify `avahi-daemon.socket` and `avahi-daemon.service` are not active:\n\n```\n# systemctl is-active avahi-daemon.socket avahi-daemon.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.3",
                "title": "Ensure dhcp server services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.3_statement",
                    "prose": "The Dynamic Host Configuration Protocol (DHCP) is a service that allows machines to be dynamically assigned IP addresses. There are two versions of the DHCP protocol `DHCPv4` and `DHCPv6`. At startup the server may be started for one or the other via the `-4` or `-6` arguments."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.3_assessment-objective",
                    "prose": "Rationale: Unless a system is specifically set up to act as a DHCP server, it is recommended that the `dhcp-server` package be removed to reduce the potential attack surface.\nImpact: There may be packages that are dependent on the `dhcp-server` package. If the `dhcp-server` package is removed, these dependent packages will be removed as well. Before removing the `dhcp-server` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `dhcpd.service` and `dhcpd6.service` leaving the `dhcp-server` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.3_guidance",
                    "prose": "Run the following commands to stop `dhcpd.service` and `dhcpd6.service` and remove `dhcp-server` package:\n\n```\n# systemctl stop dhcpd.service dhcpd6.service\n# dnf remove dhcp-server\n```\n\n**- OR -**\n\n**- IF -** the `dhcp-server` package is required as a dependency:\n\nRun the following commands to stop and mask `dhcpd.service` and `dhcpd6.service`:\n\n```\n# systemctl stop dhcpd.service dhcpd6.service\n# systemctl mask dhcpd.service dhcpd6.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.3_assessment-method",
                    "prose": "Run the following command to verify `dhcp-server` is not installed:\n\n```\n# rpm -q dhcp-server\n\npackage dhcp-server is not installed\n```\n\n**- OR -** \n\n**- IF -** the package is required for dependencies:\n\nRun the following command to verify `dhcpd.service` and `dhcpd6.service` are not enabled:\n\n```\n# systemctl is-enabled dhcpd.service dhcpd6.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify `dhcpd.service` and `dhcpd6.service` are not active:\n\n```\n# systemctl is-active dhcpd.service dhcpd6.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.4",
                "title": "Ensure dns server services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.4"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.4_statement",
                    "prose": "The Domain Name System (DNS) is a hierarchical naming system that maps names to IP addresses for computers, services and other resources connected to a network."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.4_assessment-objective",
                    "prose": "Rationale: Unless a system is specifically designated to act as a DNS server, it is recommended that the package be removed to reduce the potential attack surface.\nImpact: There may be packages that are dependent on the `bind` package. If the `bind` package is removed, these dependent packages will be removed as well. Before removing the `bind` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `named.service` leaving the `bind` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.4_guidance",
                    "prose": "Run the following commands to stop `named.service` and remove `bind` package:\n\n```\n# systemctl stop named.service\n# dnf remove bind\n```\n\n**- OR -**\n\n**- IF -** the `bind` package is required as a dependency:\n\nRun the following commands to stop and mask `named.service`:\n\n```\n# systemctl stop named.service\n# systemctl mask named.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.4_assessment-method",
                    "prose": "Run one of the following commands to verify `bind` is not installed:\n\n```\n# rpm -q bind\n\npackage bind is not installed\n```\n\n**- OR -** \n\n**- IF -** the package is required for dependencies:\n\nRun the following command to verify `named.service` is not enabled:\n\n```\n# systemctl is-enabled named.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify the `named.service` is not active:\n\n```\n# systemctl is-active named.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.5",
                "title": "Ensure dnsmasq services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.5"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.5_statement",
                    "prose": "`dnsmasq` is a lightweight tool that provides DNS caching, DNS forwarding and DHCP (Dynamic Host Configuration Protocol) services."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.5_assessment-objective",
                    "prose": "Rationale: Unless a system is specifically designated to act as a DNS caching, DNS forwarding and/or DHCP server, it is recommended that the package be removed to reduce the potential attack surface.\nImpact: There may be packages that are dependent on the `dnsmasq` package. If the `dnsmasq` package is removed, these dependent packages will be removed as well. Before removing the `dnsmasq` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `dnsmasq.service` leaving the `dnsmasq` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.5_guidance",
                    "prose": "Run the following commands to stop `dnsmasq.service` and remove `dnsmasq` package:\n\n```\n# systemctl stop dnsmasq.service\n# dnf remove dnsmasq\n```\n\n**- OR -**\n\n**- IF -** the `dnsmasq` package is required as a dependency:\n\nRun the following commands to stop and mask the `dnsmasq.service`:\n\n```\n# systemctl stop dnsmasq.service\n# systemctl mask dnsmasq.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.5_assessment-method",
                    "prose": "Run one of the following commands to verify `dnsmasq` is not installed:\n\n```\n# rpm -q dnsmasq\n\npackage dnsmasq is not installed\n```\n\n**- OR -** \n\n**- IF -** the package is required for dependencies:\n\nRun the following command to verify `dnsmasq.service` is not enabled:\n\n```\n# systemctl is-enabled dnsmasq.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify the `dnsmasq.service` is not active:\n\n```\n# systemctl is-active dnsmasq.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.6",
                "title": "Ensure samba file server services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.6"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.6_statement",
                    "prose": "The Samba daemon allows system administrators to configure their Linux systems to share file systems and directories with Windows desktops. Samba will advertise the file systems and directories via the Server Message Block (SMB) protocol. Windows desktop users will be able to mount these directories and file systems as letter drives on their systems."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.6_assessment-objective",
                    "prose": "Rationale: If there is no need to mount directories and file systems to Windows systems, then this package can be removed to reduce the potential attack surface.\nImpact: There may be packages that are dependent on the `samba` package. If the `samba` package is removed, these dependent packages will be removed as well. Before removing the `samba` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `smb.service` leaving the `samba` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.6_guidance",
                    "prose": "Run the following command to stop `smb.service` and remove `samba` package:\n\n```\n# systemctl stop smb.service\n# dnf remove samba\n```\n\n**- OR -**\n\n**- IF -** the `samba` package is required as a dependency:\n\nRun the following commands to stop and mask the `smb.service`:\n\n```\n# systemctl stop smb.service\n# systemctl mask smb.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.6_assessment-method",
                    "prose": "Run the following command to verify `samba` package is not installed:\n\n```\n# rpm -q samba\n\npackage samba is not installed\n```\n\n**- OR -** \n\n**- IF -** the package is required for dependencies:\n\nRun the following command to verify `smb.service` is not enabled:\n\n```\n# systemctl is-enabled smb.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify the `smb.service` is not active:\n\n```\n# systemctl is-active smb.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.7",
                "title": "Ensure ftp server services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.7"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.7_statement",
                    "prose": "FTP (File Transfer Protocol) is a traditional and widely used standard tool for transferring files between a server and clients over a network, especially where no authentication is necessary (permits anonymous users to connect to a server)."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.7_assessment-objective",
                    "prose": "Rationale: Unless there is a need to run the system as a FTP server, it is recommended that the package be removed to reduce the potential attack surface.\nImpact: There may be packages that are dependent on the `vsftpd` package. If the `vsftpd` package is removed, these dependent packages will be removed as well. Before removing the `vsftpd` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `vsftpd.service` leaving the `vsftpd` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.7_guidance",
                    "prose": "Run the following commands to stop `vsftpd.service` and remove `vsftpd` package:\n\n```\n# systemctl stop vsftpd.service\n# dnf remove vsftpd\n```\n\n**- OR -**\n\n**- IF -** the `vsftpd` package is required as a dependency:\n\nRun the following commands to stop and mask the `vsftpd.service`:\n\n```\n# systemctl stop vsftpd.service\n# systemctl mask vsftpd.service\n```\n\n**Note:** Other ftp server packages may exist. If not required and authorized by local site policy, they should also be removed. If the package is required for a dependency, the service should be stopped and masked."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.7_assessment-method",
                    "prose": "Run the following command to verify `vsftpd` is not installed:\n\n```\n# rpm -q vsftpd\n\npackage vsftpd is not installed\n```\n\n**- OR -** \n\n**- IF -** the package is required for dependencies:\n\nRun the following command to verify `vsftpd` service is not enabled:\n\n```\n# systemctl is-enabled vsftpd.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify the `vsftpd` service is not active:\n\n```\n# systemctl is-active vsftpd.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** \n- Other ftp server packages may exist. They should also be audited, if not required and authorized by local site policy\n - If the package is required for a dependency:\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.8",
                "title": "Ensure message access server services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.8"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.8_statement",
                    "prose": "`dovecot` and `cyrus-imapd` are open source IMAP and POP3 server packages for Linux based systems."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.8_assessment-objective",
                    "prose": "Rationale: Unless POP3 and/or IMAP servers are to be provided by this system, it is recommended that the package be removed to reduce the potential attack surface.\n\n**Note:** Several IMAP/POP3 servers exist and can use other service names. These should also be audited and the packages removed if not required.\nImpact: There may be packages that are dependent on `dovecot` and `cyrus-imapd` packages. If `dovecot` and `cyrus-imapd` packages are removed, these dependent packages will be removed as well. Before removing `dovecot` and `cyrus-imapd` packages, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask `dovecot.socket`, `dovecot.service` and `cyrus-imapd.service` leaving `dovecot` and `cyrus-imapd` packages installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.8_guidance",
                    "prose": "Run the following commands to stop `dovecot.socket`, `dovecot.service`, and `cyrus-imapd.service`, and remove `dovecot` and `cyrus-imapd` packages:\n\n```\n# systemctl stop dovecot.socket dovecot.service cyrus-imapd.service\n# dnf remove dovecot cyrus-imapd\n```\n\n**- OR -**\n\n**- IF -** a package is installed **and** is required for dependencies:\n\nRun the following commands to stop and mask `dovecot.socket`, `dovecot.service`, and `cyrus-imapd.service`:\n\n```\n# systemctl stop dovecot.socket dovecot.service cyrus-imapd.service\n# systemctl mask dovecot.socket dovecot.service cyrus-imapd.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.8_assessment-method",
                    "prose": "Run the following command to verify `dovecot` and `cyrus-imapd` are not installed:\n\n```\n# rpm -q dovecot cyrus-imapd\n\npackage dovecot is not installed\npackage cyrus-imapd is not installed\n```\n**- OR -**\n\n**- IF -** a package is installed **and** is required for dependencies:\n\nRun the following commands to verify `dovecot.socket`, `dovecot.service`, and `cyrus-imapd.service` are not enabled:\n\n```\n# systemctl is-enabled dovecot.socket dovecot.service cyrus-imapd.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify `dovecot.socket`, `dovecot.service`, and `cyrus-imapd.service` are not active:\n\n```\n# systemctl is-active dovecot.socket dovecot.service cyrus-imapd.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.9",
                "title": "Ensure network file system services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.9"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.9_statement",
                    "prose": "The Network File System (NFS) is one of the first and most widely distributed file systems in the UNIX environment. It provides the ability for systems to mount file systems of other servers through the network."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.9_assessment-objective",
                    "prose": "Rationale: If the system does not require access to network shares or the ability to provide network file system services for other host's network shares, it is recommended that the `nfs-utils` package be removed to reduce the attack surface of the system.\nImpact: Many of the `libvirt` packages used by Enterprise Linux virtualization are dependent on the `nfs-utils` package. If the `nfs-utils` package is removed, these dependent packages will be removed as well. Before removing the `nfs-utils` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `nfs-server.service` leaving the `nfs-utils` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.9_guidance",
                    "prose": "Run the following command to stop `nfs-server.service` and remove `nfs-utils` package:\n```\n# systemctl stop nfs-server.service\n# dnf remove nfs-utils\n```\n\n**- OR -**\n\n**- IF -** the `nfs-utils` package is required as a dependency:\n\nRun the following commands to stop and mask the `nfs-server.service`:\n\n```\n# systemctl stop nfs-server.service\n# systemctl mask nfs-server.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.9_assessment-method",
                    "prose": "Run the following command to verify `nfs-utils` is not installed:\n\n```\n# rpm -q nfs-utils\n\npackage nfs-utils is not installed\n```\n\n**- OR -** If package is required for dependencies: \n\nRun the following command to verify that the `nfs-server.service` is not enabled:\n\n```\n# systemctl is-enabled nfs-server.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify the `nfs-server.service` is not active:\n\n```\n# systemctl is-active nfs-server.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.10",
                "title": "Ensure nis server services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.10"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.10_statement",
                    "prose": "The Network Information Service (NIS), formerly known as Yellow Pages, is a client-server directory service protocol used to distribute system configuration files. The NIS client ( `ypbind` ) was used to bind a machine to an NIS server and receive the distributed configuration files."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.10_assessment-objective",
                    "prose": "Rationale: The NIS service is inherently an insecure system that has been vulnerable to DOS attacks, buffer overflows and has poor authentication for querying NIS maps. NIS generally has been replaced by such protocols as Lightweight Directory Access Protocol (LDAP). It is recommended that the service be removed.\nImpact: There may be packages that are dependent on the `ypserv` package. If the `ypserv` package is removed, these dependent packages will be removed as well. Before removing the `ypserv` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `ypserv.service` leaving the `ypserv` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.10_guidance",
                    "prose": "Run the following commands to stop `ypserv.service` and remove `ypserv` package:\n\n```\n# systemctl stop ypserv.service\n# dnf remove ypserv\n```\n\n**- OR -**\n\n**- IF -** the `ypserv` package is required as a dependency:\n\nRun the following commands to stop and mask `ypserv.service`:\n\n```\n# systemctl stop ypserv.service\n# systemctl mask ypserv.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.10_assessment-method",
                    "prose": "Run the following command to verify `ypserv` is not installed:\n\n```\n# rpm -q ypserv\n\npackage ypserv is not installed\n```\n\n**- OR -** \n\n**- IF -** the package is required for dependencies:\n\nRun the following command to verify `ypserv.service` is not enabled:\n\n```\n# systemctl is-enabled ypserv.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify `ypserv.service` is not active:\n\n```\n# systemctl is-active ypserv.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.11",
                "title": "Ensure print server services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.11"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.11_statement",
                    "prose": "The Common Unix Print System (CUPS) provides the ability to print to both local and network printers. A system running CUPS can also accept print jobs from remote systems and print them to local printers. It also provides a web based remote administration capability."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.11_assessment-objective",
                    "prose": "Rationale: If the system does not need to print jobs or accept print jobs from other systems, it is recommended that CUPS be removed to reduce the potential attack surface.\nImpact: Removing the cups package, or disabling `cups.socket` and/or `cups.service` will prevent printing from the system, a common task for workstation systems.\n\nThere may be packages that are dependent on the `cups` package. If the `cups` package is removed, these dependent packages will be removed as well. Before removing the `cups` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask `cups.socket` and `cups.service` leaving the `cups` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.11_guidance",
                    "prose": "Run the following commands to stop `cups.socket` and `cups.service`, and remove the `cups` package:\n\n```\n# systemctl stop cups.socket cups.service\n# dnf remove cups\n```\n\n**- OR -** \n\n**- IF -** the `cups` package is required as a dependency:\n\nRun the following commands to stop and mask the `cups.socket` and `cups.service`:\n\n```\n# systemctl stop cups.socket cups.service\n# systemctl mask cups.socket cups.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.11_assessment-method",
                    "prose": "Run the following command to verify `cups` is not installed:\n```\n# rpm -q cups\n\npackage cups is not installed\n```\n\n**- OR -**\n\n**- IF -** the `cups` package is required as a dependency:\n\nRun the following command to verify the `cups.socket` and `cups.service` are not enabled:\n\n```\n# systemctl is-enabled cups.socket cups.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify the `cups.socket` and `cups.service` are not active:\n\n```\n# systemctl is-active cups.socket cups.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.12",
                "title": "Ensure rpcbind services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.12"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.12_statement",
                    "prose": "The `rpcbind` utility maps RPC services to the ports on which they listen. RPC processes notify `rpcbind` when they start, registering the ports they are listening on and the RPC program numbers they expect to serve. The client system then contacts `rpcbind` on the server with a particular RPC program number. The `rpcbind.service` redirects the client to the proper port number so it can communicate with the requested service.\n\nPortmapper is an RPC service, which always listens on tcp and udp 111, and is used to map other RPC services (such as nfs, nlockmgr, quotad, mountd, etc.) to their corresponding port number on the server. When a remote host makes an RPC call to that server, it first consults with portmap to determine where the RPC server is listening."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.12_assessment-objective",
                    "prose": "Rationale: A small request (~82 bytes via UDP) sent to the Portmapper generates a large response (7x to 28x amplification), which makes it a suitable tool for DDoS attacks. If `rpcbind` is not required, it is recommended to remove `rpcbind` package to reduce the potential attack surface.\nImpact: Many of the libvirt packages used by Enterprise Linux virtualization, and the `nfs-utils` package used for The Network File System (NFS), are dependent on the `rpcbind` package. If the `rpcbind` package is removed, these dependent packages will be removed as well. Before removing the `rpcbind` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `rpcbind.socket` and `rpcbind.service` leaving the `rpcbind` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.12_guidance",
                    "prose": "Run the following commands to stop `rpcbind.socket` and `rpcbind.service`, and remove the `rpcbind` package:\n\n```\n# systemctl stop rpcbind.socket rpcbind.service\n# dnf remove rpcbind\n```\n\n**- OR -**\n\n**- IF -** the `rpcbind` package is required as a dependency:\n\nRun the following commands to stop and mask the `rpcbind.socket` and `rpcbind.service`:\n\n```\n# systemctl stop rpcbind.socket rpcbind.service\n# systemctl mask rpcbind.socket rpcbind.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.12_assessment-method",
                    "prose": "Run the following command to verify `rpcbind` package is not installed:\n\n```\n# rpm -q rpcbind\n\npackage rpcbind is not installed\n```\n\n**- OR -** \n\n**- IF -** the `rpcbind` package is required as a dependency:\n\nRun the following command to verify `rpcbind.socket` and `rpcbind.service` are not enabled:\n\n```\n# systemctl is-enabled rpcbind.socket rpcbind.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify `rpcbind.socket` and `rpcbind.service` are not active:\n\n```\n# systemctl is-active rpcbind.socket rpcbind.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.13",
                "title": "Ensure rsync services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.13"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.13_statement",
                    "prose": "The `rsyncd.service` can be used to synchronize files between systems over network links."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.13_assessment-objective",
                    "prose": "Rationale: Unless required, the `rsync-daemon` package should be removed to reduce the potential attack surface.\n\nThe `rsyncd.service` presents a security risk as it uses unencrypted protocols for communication.\nImpact: There may be packages that are dependent on the `rsync-daemon` package. If the `rsync-daemon` package is removed, these dependent packages will be removed as well. Before removing the `rsync-daemon` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `rsyncd.socket` and `rsyncd.service` leaving the `rsync-daemon` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.13_guidance",
                    "prose": "Run the following commands to stop `rsyncd.socket` and `rsyncd.service`, and remove the `rsync-daemon` package:\n\n```\n# systemctl stop rsyncd.socket rsyncd.service\n# dnf remove rsync-daemon\n```\n\n**- OR -**\n\n**- IF -** the `rsync-daemon` package is required as a dependency:\n\nRun the following commands to stop and mask the `rsyncd.socket` and `rsyncd.service`:\n\n```\n# systemctl stop rsyncd.socket rsyncd.service\n# systemctl mask rsyncd.socket rsyncd.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.13_assessment-method",
                    "prose": "Run the following command to verify the `rsync-daemon` package is not installed:\n\n```\n# rpm -q rsync-daemon\n\npackage rsync-daemon is not installed\n```\n\n**- OR -** \n\n**- IF -** the `rsync-daemon` package is required as a dependency:\n\nRun the following command to verify `rsyncd.socket` and `rsyncd.service` are not enabled:\n\n```\n# systemctl is-enabled rsyncd.socket rsyncd.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify `rsyncd.socket` and `rsyncd.service` are not active:\n\n```\n# systemctl is-active rsyncd.socket rsyncd.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.14",
                "title": "Ensure snmp services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.14"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.14_statement",
                    "prose": "Simple Network Management Protocol (SNMP) is a widely used protocol for monitoring the health and welfare of network equipment, computer equipment and devices like UPSs. \n\nNet-SNMP is a suite of applications used to implement SNMPv1 (RFC 1157), SNMPv2 (RFCs 1901-1908), and SNMPv3 (RFCs 3411-3418) using both IPv4 and IPv6. \n\nSupport for SNMPv2 classic (a.k.a. \"SNMPv2 historic\" - RFCs 1441-1452) was dropped with the 4.0 release of the UCD-snmp package.\n\nThe Simple Network Management Protocol (SNMP) server is used to listen for SNMP commands from an SNMP management system, execute the commands or collect the information and then send results back to the requesting system."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.14_assessment-objective",
                    "prose": "Rationale: The SNMP server can communicate using `SNMPv1`, which transmits data in the clear and does not require authentication to execute commands. `SNMPv3` replaces the simple/clear text password sharing used in `SNMPv2` with more securely encoded parameters. If the the SNMP service is not required, the `net-snmp` package should be removed to reduce the attack surface of the system.\n\n**Note:** If SNMP is required:\n- The server should be configured for `SNMP v3` only. `User Authentication` and `Message Encryption` should be configured.\n- If `SNMP v2` is **absolutely** necessary, modify the community strings' values.\nImpact: There may be packages that are dependent on the `net-snmp` package. If the `net-snmp` package is removed, these packages will be removed as well.\n\nBefore removing the `net-snmp` package, review any dependent packages to determine if they are required on the system. If a dependent package is required, stop and mask the `snmpd.service` leaving the `net-snmp` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.14_guidance",
                    "prose": "Run the following commands to stop `snmpd.service` and remove `net-snmp` package:\n\n```\n# systemctl stop snmpd.service\n# dnf remove net-snmp\n```\n\n**- OR -** If the package is required for dependencies:\n\nRun the following commands to stop and mask the `snmpd.service`:\n\n```\n# systemctl stop snmpd.service\n# systemctl mask snmpd.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.14_assessment-method",
                    "prose": "Run the following command to verify `net-snmp` package is not installed:\n\n```\n# rpm -q net-snmp\n\npackage net-snmp is not installed\n```\n\n**- OR -** If the package is required for dependencies:\n\nRun the following command to verify the `snmpd.service` is not enabled:\n\n```\n# systemctl is-enabled snmpd.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify the `snmpd.service` is not active:\n\n```\n# systemctl is-active snmpd.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.15",
                "title": "Ensure telnet server services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.15"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.15_statement",
                    "prose": "The `telnet-server` package contains the `telnet` daemon, which accepts connections from users from other systems via the `telnet` protocol."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.15_assessment-objective",
                    "prose": "Rationale: The `telnet` protocol is insecure and unencrypted. The use of an unencrypted transmission medium could allow a user with access to sniff network traffic the ability to steal credentials. The `ssh` package provides an encrypted session and stronger security.\nImpact: There may be packages that are dependent on the `telnet-server` package. If the `telnet-server` package is removed, these dependent packages will be removed as well. Before removing the `telnet-server` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `telnet.socket` leaving the `telnet-server` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.15_guidance",
                    "prose": "Run the following commands to stop `telnet.socket` and remove the `telnet-server` package:\n\n```\n# systemctl stop telnet.socket\n# dnf remove telnet-server\n```\n\n**- OR -**\n\n**- IF -** a package is installed **and** is required for dependencies:\n\nRun the following commands to stop and mask `telnet.socket`:\n\n```\n# systemctl stop telnet.socket\n# systemctl mask telnet.socket\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.15_assessment-method",
                    "prose": "Run the following command to verify the `telnet-server` package is not installed:\n\n```\nrpm -q telnet-server\n\npackage telnet-server is not installed\n```\n**- OR -**\n\n**- IF -** a package is installed **and** is required for dependencies:\n\nRun the following command to verify `telnet.socket` is not enabled:\n\n```\n# systemctl is-enabled telnet.socket 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify `telnet.socket` is not active:\n\n```\n# systemctl is-active telnet.socket 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.16",
                "title": "Ensure tftp server services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.16"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.16_statement",
                    "prose": "Trivial File Transfer Protocol (TFTP) is a simple protocol for exchanging files between two TCP/IP machines. TFTP servers allow connections from a TFTP Client for sending and receiving files."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.16_assessment-objective",
                    "prose": "Rationale: Unless there is a need to run the system as a TFTP server, it is recommended that the package be removed to reduce the potential attack surface.\n\nTFTP does not have built-in encryption, access control or authentication. This makes it very easy for an attacker to exploit TFTP to gain access to files\nImpact: TFTP is often used to provide files for network booting such as for PXE based installation of servers.\n\nThere may be packages that are dependent on the `tftp-server` package. If the `tftp-server` package is removed, these dependent packages will be removed as well. Before removing the `tftp-server` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `tftp.socket` and `tftp.service` leaving the `tftp-server` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.16_guidance",
                    "prose": "Run the following commands to stop `tftp.socket` and `tftp.service`, and remove the `tftp-server` package:\n\n```\n# systemctl stop tftp.socket tftp.service\n# dnf remove tftp-server\n```\n\n**- OR -**\n\n**- IF -** the `tftp-server` package is required as a dependency:\n\nRun the following commands to stop and mask `tftp.socket` and `tftp.service`:\n\n```\n# systemctl stop tftp.socket tftp.service\n# systemctl mask tftp.socket tftp.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.16_assessment-method",
                    "prose": "Run the following command to verify `tftp-server` is not installed:\n\n```\n# rpm -q tftp-server\n\npackage tftp-server is not installed\n```\n\n**- OR -** \n\n**- IF -** the package is required for dependencies:\n\nRun the following command to verify `tftp.socket` and `tftp.service` are not enabled:\n\n```\n# systemctl is-enabled tftp.socket tftp.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify the `tftp.socket` and `tftp.service` are not active:\n\n```\n# systemctl is-active tftp.socket tftp.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.17",
                "title": "Ensure web proxy server services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.17"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.17_statement",
                    "prose": "Squid is a standard proxy server used in many distributions and environments."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.17_assessment-objective",
                    "prose": "Rationale: Unless a system is specifically set up to act as a proxy server, it is recommended that the squid package be removed to reduce the potential attack surface.\n\n**Note:** Several HTTP proxy servers exist. These should be checked and removed unless required.\nImpact: There may be packages that are dependent on the `squid` package. If the `squid` package is removed, these dependent packages will be removed as well. Before removing the `squid` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `squid.service` leaving the `squid` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.17_guidance",
                    "prose": "Run the following commands to stop `squid.service` and remove the `squid` package:\n\n```\n# systemctl stop squid.service\n# dnf remove squid\n```\n\n**- OR -** If the `squid` package is required as a dependency:\n\nRun the following commands to stop and mask the `squid.service`:\n\n```\n# systemctl stop squid.service\n# systemctl mask squid.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.17_assessment-method",
                    "prose": "Run the following command to verify `squid` package is not installed:\n\n```\n# rpm -q squid\n\npackage squid is not installed\n```\n\n**- OR -** \n\n**- IF -** the package is required for dependencies:\n\nRun the following command to verify `squid.service` is not enabled:\n\n```\n# systemctl is-enabled squid.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify the `squid.service` is not active:\n\n```\n# systemctl is-active squid.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.18",
                "title": "Ensure web server services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.18"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.18_statement",
                    "prose": "Web servers provide the ability to host web site content."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.18_assessment-objective",
                    "prose": "Rationale: Unless there is a local site approved requirement to run a web server service on the system, web server packages should be removed to reduce the potential attack surface.\nImpact: Removal of web server packages will remove that ability for the server to host web services.\n\n**- IF -** the web server package is required for a dependency, any related service or socket should be stopped and masked.\n\n**Note:** If the remediation steps to mask a service are followed and that package is not installed on the system, the service and/or socket will still be masked. If the package is installed due to an approved requirement to host a web server, the associated service and/or socket would need to be unmasked before it could be enabled and/or started."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.18_guidance",
                    "prose": "Run the following commands to stop `httpd.socket`, `httpd.service`, and `nginx.service`, and remove `httpd` and `nginx` packages:\n\n```\n# systemctl stop httpd.socket httpd.service nginx.service\n# dnf remove httpd nginx\n```\n\n**- OR -**\n\n**- IF -** a package is installed **and** is required for dependencies:\n\nRun the following commands to stop and mask `httpd.socket`, `httpd.service`, and `nginx.service`:\n\n```\n# systemctl stop httpd.socket httpd.service nginx.service\n# systemctl mask httpd.socket httpd.service nginx.service\n```\n\n**Note:** Other web server packages may exist. If not required and authorized by local site policy, they should also be removed. If the package is required for a dependency, the service and socket should be stopped and masked."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.18_assessment-method",
                    "prose": "Run the following command to verify `httpd` and `nginx` are not installed:\n\n```\n# rpm -q httpd nginx\n\npackage httpd is not installed\npackage nginx is not installed\n```\n**- OR -**\n\n**- IF -** a package is installed **and** is required for dependencies:\n\nRun the following command to verify `httpd.socket`, `httpd.service`, and `nginx.service` are not enabled:\n\n```\n# systemctl is-enabled httpd.socket httpd.service nginx.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify `httpd.socket`, `httpd.service`, and `nginx.service` are not active:\n\n```\n# systemctl is-active httpd.socket httpd.service nginx.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** \n- Other web server packages may exist. They should also be audited, if not required and authorized by local site policy\n - If the package is required for a dependency:\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.19",
                "title": "Ensure xinetd services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.19"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.19_statement",
                    "prose": "The eXtended InterNET Daemon (`xinetd`) is an open source super daemon that replaced the original `inetd` daemon. The `xinetd` daemon listens for well known services and dispatches the appropriate daemon to properly respond to service requests."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.19_assessment-objective",
                    "prose": "Rationale: If there are no `xinetd` services required, it is recommended that the package be removed to reduce the attack surface are of the system.\n\n**Note:** If an `xinetd` service or services are required, ensure that any `xinetd` service not required is stopped and masked\nImpact: There may be packages that are dependent on the `xinetd` package. If the `xinetd` package is removed, these dependent packages will be removed as well. Before removing the `xinetd` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the avahi-daemon.socket and avahi-daemon.service leaving the avahi package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.19_guidance",
                    "prose": "Run the following commands to stop `xinetd.service`, and remove the `xinetd` package:\n\n```\n# systemctl stop xinetd.service\n# dnf remove xinetd\n```\n\n**- OR -**\n\n**- IF -** the `xinetd` package is required as a dependency:\n\nRun the following commands to stop and mask the `xinetd.service`:\n\n```\n# systemctl stop xinetd.service\n# systemctl mask xinetd.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.19_assessment-method",
                    "prose": "Run the following command to verify the `xinetd` package is not installed:\n\n```\n# rpm -q xinetd\n\npackage xinetd is not installed\n```\n\n**- OR -** \n\n**- IF -** the `xinetd` package is required as a dependency:\n\nRun the following command to verify `xinetd.service` is not enabled:\n\n```\n# systemctl is-enabled xinetd.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify `xinetd.service` is not active:\n\n```\n# systemctl is-active xinetd.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.21",
                "title": "Ensure mail transfer agents are configured for local-only mode",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.21"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.21_statement",
                    "prose": "Mail Transfer Agents (MTA), such as sendmail and Postfix, are used to listen for incoming mail and transfer the messages to the appropriate user or mail server. If the system is not intended to be a mail server, it is recommended that the MTA be configured to only process local mail."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.21_assessment-objective",
                    "prose": "Rationale: The software for all Mail Transfer Agents is complex and most have a long history of security issues. While it is important to ensure that the system can process local mail messages, it is not necessary to have the MTA's daemon listening on a port unless the server is intended to be a mail server that receives and processes mail from other systems."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.21_guidance",
                    "prose": "Edit `/etc/postfix/main.cf` and add the following line to the RECEIVING MAIL section. If the line already exists, change it to look like the line below:\n\n```\ninet_interfaces = loopback-only\n```\n\nRun the following command to restart `postfix`:\n\n```\n# systemctl restart postfix\n```\n\n**Note:**\n- This remediation is designed around the postfix mail server.\n- Depending on your environment you may have an alternative MTA installed such as sendmail. If this is the case consult the documentation for your installed MTA to configure the recommended state."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.21_assessment-method",
                    "prose": "Run the following script to verify that the MTA is not listening on any non-loopback address `( 127.0.0.1 or ::1)`:\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n a_port_list=(\"25\" \"465\" \"587\")\n if [ \"$(postconf -n inet_interfaces)\" != \"inet_interfaces = all\" ]; then\n for l_port_number in \"${a_port_list[@]}\"; do\n if ss -plntu | grep -P -- ':'\"$l_port_number\"'\\b' | grep -Pvq -- '\\h+(127\\.0\\.0\\.1|\\[?::1\\]?):'\"$l_port_number\"'\\b'; then\n l_output2=\"$l_output2\\n - Port \\\"$l_port_number\\\" is listening on a non-loopback network interface\"\n else\n l_output=\"$l_output\\n - Port \\\"$l_port_number\\\" is not listening on a non-loopback network interface\"\n fi\n done\n else\n l_output2=\"$l_output2\\n - Postfix is bound to all interfaces\"\n fi\n unset a_port_list\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.22",
                "title": "Ensure only approved services are listening on a network interface",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.22"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.22_statement",
                    "prose": "A network port is identified by its number, the associated IP address, and the type of the communication protocol such as TCP or UDP.\n\nA listening port is a network port on which an application or process listens on, acting as a communication endpoint.\n\nEach listening port can be open or closed (filtered) using a firewall. In general terms, an open port is a network port that accepts incoming packets from remote locations."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.22_assessment-objective",
                    "prose": "Rationale: Services listening on the system pose a potential risk as an attack vector. These services should be reviewed, and if not required, the service should be stopped, and the package containing the service should be removed. If required packages have a dependency, the service should be stopped and masked to reduce the attack surface of the system.\nImpact: There may be packages that are dependent on the service's package. If the service's package is removed, these dependent packages will be removed as well. Before removing the service's package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask the `<service_name>.socket` and `<service_name>.service` leaving the service's package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.22_guidance",
                    "prose": "Run the following commands to stop the service and remove the package containing the service:\n\n```\n# systemctl stop <service_name>.socket <service_name>.service\n# dnf remove <package_name>\n```\n\n**- OR -** If required packages have a dependency:\n\nRun the following commands to stop and mask the service and socket:\n\n```\n# systemctl stop <service_name>.socket <service_name>.service\n# systemctl mask <service_name>.socket <service_name>.service\n```\n\n**Note:** replace `<service_name>` with the appropriate service name."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.22_assessment-method",
                    "prose": "Run the following command:\n\n```\n# ss -plntu\n```\n\nReview the output to ensure:\n- All services listed are required on the system and approved by local site policy. \n- Both the port and interface the service is listening on are approved by local site policy.\n- If a listed service is not required:\n - Remove the package containing the service\n - **- IF -** the service's package is required for a dependency, stop and mask the service and/or socket",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.1.20",
                "title": "Ensure X window server services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.1.20"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.1.20_statement",
                    "prose": "The X Window System provides a Graphical User Interface (GUI) where users can have multiple windows in which to run programs and various add on. The X Windows system is typically used on workstations where users login, but not on servers where users typically do not login."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.1.20_assessment-objective",
                    "prose": "Rationale: Unless your organization specifically requires graphical login access via X Windows, remove it to reduce the potential attack surface.\nImpact: If a Graphical Desktop Manager (GDM) is in use on the system, there may be a dependency on the `xorg-x11-server-common` package. If the GDM is required and approved by local site policy, the package should **not** be removed.\n\nMany Linux systems run applications which require a Java runtime. Some Linux Java packages have a dependency on specific X Windows xorg-x11-fonts. One workaround to avoid this dependency is to use the \"headless\" Java packages for your specific Java runtime."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.1.20_guidance",
                    "prose": "**- IF -** a Graphical Desktop Manager or X-Windows server is not required and approved by local site policy:\n\nRun the following command to remove the X Windows Server packages:\n\n```\n# dnf remove xorg-x11-server-common\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.1.20_assessment-method",
                    "prose": "**- IF -** a Graphical Desktop Manager or X-Windows server is not required and approved by local site policy:\n\nRun the following command to Verify X Windows Server is not installed.\n\n```\n# rpm -q xorg-x11-server-common\n\npackage xorg-x11-server-common is not installed\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-2-2",
            "title": "Configure Client Services",
            "props": [
              {
                "name": "label",
                "value": "2.2"
              }
            ],
            "controls": [
              {
                "id": "cis-2.2.1",
                "title": "Ensure ftp client is not installed",
                "props": [
                  {
                    "name": "label",
                    "value": "2.2.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.2.1_statement",
                    "prose": "FTP (File Transfer Protocol) is a traditional and widely used standard tool for transferring files between a server and clients over a network, especially where no authentication is necessary (permits anonymous users to connect to a server)."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.2.1_assessment-objective",
                    "prose": "Rationale: FTP does not protect the confidentiality of data or authentication credentials. It is recommended SFTP be used if file transfer is required. Unless there is a need to run the system as a FTP server (for example, to allow anonymous downloads), it is recommended that the package be removed to reduce the potential attack surface."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.2.1_guidance",
                    "prose": "Run the following command to remove `ftp`:\n\n```\n# dnf remove ftp\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.2.1_assessment-method",
                    "prose": "Run the following command to verify `ftp` is not installed:\n\n```\n# rpm -q ftp\n\npackage ftp is not installed\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.2.3",
                "title": "Ensure nis client is not installed",
                "props": [
                  {
                    "name": "label",
                    "value": "2.2.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.2.3_statement",
                    "prose": "The Network Information Service (NIS), formerly known as Yellow Pages, is a client-server directory service protocol used to distribute system configuration files. The NIS client ( `ypbind` ) was used to bind a machine to an NIS server and receive the distributed configuration files."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.2.3_assessment-objective",
                    "prose": "Rationale: The NIS service is inherently an insecure system that has been vulnerable to DOS attacks, buffer overflows and has poor authentication for querying NIS maps. NIS generally has been replaced by such protocols as Lightweight Directory Access Protocol (LDAP). It is recommended that the service be removed.\nImpact: Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.2.3_guidance",
                    "prose": "Run the following command to remove the ypbind package:\n\n```\n# dnf remove ypbind\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.2.3_assessment-method",
                    "prose": "Run the following command to verify that the `ypbind` package is not installed:\n\n```\n# rpm -q ypbind\n\npackage ypbind is not installed\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.2.4",
                "title": "Ensure telnet client is not installed",
                "props": [
                  {
                    "name": "label",
                    "value": "2.2.4"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.2.4_statement",
                    "prose": "The `telnet` package contains the `telnet` client, which allows users to start connections to other systems via the telnet protocol."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.2.4_assessment-objective",
                    "prose": "Rationale: The `telnet` protocol is insecure and unencrypted. The use of an unencrypted transmission medium could allow an unauthorized user to steal credentials. The `ssh` package provides an encrypted session and stronger security and is included in most Linux distributions.\nImpact: Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.2.4_guidance",
                    "prose": "Run the following command to remove the `telnet` package:\n\n```\n# dnf remove telnet\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.2.4_assessment-method",
                    "prose": "Run the following command to verify that the `telnet` package is not installed:\n\n```\n# rpm -q telnet\n\npackage telnet is not installed\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.2.5",
                "title": "Ensure tftp client is not installed",
                "props": [
                  {
                    "name": "label",
                    "value": "2.2.5"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.2.5_statement",
                    "prose": "Trivial File Transfer Protocol (TFTP) is a simple protocol for exchanging files between two TCP/IP machines. TFTP servers allow connections from a TFTP Client for sending and receiving files."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.2.5_assessment-objective",
                    "prose": "Rationale: TFTP does not have built-in encryption, access control or authentication. This makes it very easy for an attacker to exploit TFTP to gain access to files"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.2.5_guidance",
                    "prose": "Run the following command to remove `tftp`:\n\n```\n# dnf remove tftp\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.2.5_assessment-method",
                    "prose": "Run the following command to verify `tftp` is not installed:\n\n```\n# rpm -q tftp\n\npackage tftp is not installed\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.2.2",
                "title": "Ensure ldap client is not installed",
                "props": [
                  {
                    "name": "label",
                    "value": "2.2.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.2.2_statement",
                    "prose": "The Lightweight Directory Access Protocol (LDAP) was introduced as a replacement for NIS/YP. It is a service that provides a method for looking up information from a central database."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.2.2_assessment-objective",
                    "prose": "Rationale: If the system will not need to act as an LDAP client, it is recommended that the software be removed to reduce the potential attack surface.\nImpact: Removing the LDAP client will prevent or inhibit using LDAP for authentication in your environment."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.2.2_guidance",
                    "prose": "Run the following command to remove the `openldap-clients` package:\n\n```\n# dnf remove openldap-clients\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.2.2_assessment-method",
                    "prose": "Run the following command to verify that the `openldap-clients` package is not installed:\n\n```\n# rpm -q openldap-clients\n\npackage openldap-clients is not installed\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-2-3",
            "title": "Configure Time Synchronization",
            "props": [
              {
                "name": "label",
                "value": "2.3"
              }
            ],
            "controls": [
              {
                "id": "cis-2.3.1",
                "title": "Ensure time synchronization is in use",
                "props": [
                  {
                    "name": "label",
                    "value": "2.3.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.3.1_statement",
                    "prose": "System time should be synchronized between all systems in an environment. This is typically done by establishing an authoritative time server or set of servers and having all systems synchronize their clocks to them.\n\n**Note:** If another method for time synchronization is being used, this section may be skipped."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.3.1_assessment-objective",
                    "prose": "Rationale: Time synchronization is important to support time sensitive security mechanisms like Kerberos and also ensures log files have consistent time records across the enterprise, which aids in forensic investigations."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.3.1_guidance",
                    "prose": "Run the following command to install `chrony`:\n\n```\n# dnf install chrony\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.3.1_assessment-method",
                    "prose": "Run the following commands to verify that `chrony` is installed:\n```\n# rpm -q chrony\n\nchrony-<version>\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.3.2",
                "title": "Ensure chrony is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "2.3.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.3.2_statement",
                    "prose": "`chrony` is a daemon which implements the Network Time Protocol (NTP) and is designed to synchronize system clocks across a variety of systems and use a source that is highly accurate. More information on `chrony` can be found at <http://chrony.tuxfamily.org/>. `chrony` can be configured to be a client and/or a server."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.3.2_assessment-objective",
                    "prose": "Rationale: If `chrony` is in use on the system proper configuration is vital to ensuring time synchronization is working properly."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.3.2_guidance",
                    "prose": "Add or edit server or pool lines to `/etc/chrony.conf` or a file in the `/etc/chrony.d` directory as appropriate:\n\n_Example:_\n\n```\nserver <remote-server>\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.3.2_assessment-method",
                    "prose": "Run the following command and verify remote server is configured properly:\n\n```\n# grep -Prs -- '^\\h*(server|pool)\\h+[^#\\n\\r]+' /etc/chrony.conf /etc/chrony.d/\n\nserver <remote-server>\n```\n\nMultiple servers may be configured.",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-2.3.3",
                "title": "Ensure chrony is not run as the root user",
                "props": [
                  {
                    "name": "label",
                    "value": "2.3.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-2.3.3_statement",
                    "prose": "The file `/etc/sysconfig/chronyd` allows configuration of options for `chrony` to include the user `chrony` is run as. By default, this is set to the user `chrony`"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-2.3.3_assessment-objective",
                    "prose": "Rationale: Services should not be set to run as the root user"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-2.3.3_guidance",
                    "prose": "Edit the file `/etc/sysconfig/chronyd` and add or modify the following line to remove \"`-u root`\" from any `OPTIONS=` argument:\n\n_Example:_\n```\nOPTIONS=\"-F 2\"\n```\n\nRun the following command to reload the `chronyd.service` configuration:\n\n```\n# systemctl reload-or-restart chronyd.service\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-2.3.3_assessment-method",
                    "prose": "Run the following command to verify that `chrony` isn't configured to run as the `root` user:\n\n```\n# grep -Psi -- '^\\h*OPTIONS=\\\"?\\h*([^#\\n\\r]+\\h+)?-u\\h+root\\b' /etc/sysconfig/chronyd\n\nNothing should be returned\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-2-4",
            "title": "Job Schedulers",
            "props": [
              {
                "name": "label",
                "value": "2.4"
              }
            ],
            "controls": [],
            "groups": [
              {
                "id": "section-2-4-1",
                "title": "Configure cron",
                "props": [
                  {
                    "name": "label",
                    "value": "2.4.1"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-2.4.1.1",
                    "title": "Ensure cron daemon is enabled and active",
                    "props": [
                      {
                        "name": "label",
                        "value": "2.4.1.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-2.4.1.1_statement",
                        "prose": "The `cron` daemon is used to execute batch jobs on the system."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-2.4.1.1_assessment-objective",
                        "prose": "Rationale: While there may not be user jobs that need to be run on the system, the system does have maintenance jobs that may include security monitoring that have to run, and `cron` is used to execute them."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-2.4.1.1_guidance",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following commands to unmask, enable, and start `cron`:\n\n```\n# systemctl unmask \"$(systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $1}')\"\n# systemctl --now enable \"$(systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $1}')\"\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-2.4.1.1_assessment-method",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following command to verify `cron` is enabled:\n\n```\n# systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $2}'\n\nenabled\n```\n\nRun the following command to verify that `cron` is active:\n\n```\n# systemctl list-units | awk '$1~/^crond?\\.service/{print $3}'\n\nactive\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-2.4.1.2",
                    "title": "Ensure permissions on /etc/crontab are configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "2.4.1.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-2.4.1.2_statement",
                        "prose": "The `/etc/crontab` file is used by `cron` to control its own jobs. The commands in this item make sure that root is the user and group owner of the file and that only the owner can access the file."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-2.4.1.2_assessment-objective",
                        "prose": "Rationale: This file contains information on what system jobs are run by cron. Write access to these files could provide unprivileged users with the ability to elevate their privileges. Read access to these files could provide users with the ability to gain insight on system jobs that run on the system and could provide them a way to gain unauthorized privileged access."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-2.4.1.2_guidance",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following commands to set ownership and permissions on `/etc/crontab`:\n\n```\n# chown root:root /etc/crontab\n# chmod og-rwx /etc/crontab\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-2.4.1.2_assessment-method",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following command and verify `Uid` and `Gid` are both `0/root` and `Access` does not grant permissions to `group` or `other` :\n\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/crontab\n\nAccess: (600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-2.4.1.3",
                    "title": "Ensure permissions on /etc/cron.hourly are configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "2.4.1.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-2.4.1.3_statement",
                        "prose": "This directory contains system `cron` jobs that need to run on an hourly basis. The files in this directory cannot be manipulated by the `crontab` command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-2.4.1.3_assessment-objective",
                        "prose": "Rationale: Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-2.4.1.3_guidance",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following commands to set ownership and permissions on the `/etc/cron.hourly` directory:\n\n```\n# chown root:root /etc/cron.hourly/\n# chmod og-rwx /etc/cron.hourly/\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-2.4.1.3_assessment-method",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following command and verify `Uid` and `Gid` are both `0/root` and `Access` does not grant permissions to `group` or `other`:\n\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.hourly/\n\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-2.4.1.4",
                    "title": "Ensure permissions on /etc/cron.daily are configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "2.4.1.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-2.4.1.4_statement",
                        "prose": "The `/etc/cron.daily` directory contains system cron jobs that need to run on a daily basis. The files in this directory cannot be manipulated by the `crontab` command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-2.4.1.4_assessment-objective",
                        "prose": "Rationale: Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-2.4.1.4_guidance",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following commands to set ownership and permissions on the `/etc/cron.daily` directory:\n\n```\n# chown root:root /etc/cron.daily/\n# chmod og-rwx /etc/cron.daily/\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-2.4.1.4_assessment-method",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following command and verify `Uid` and `Gid` are both `0/root` and `Access` does not grant permissions to `group` or `other`:\n\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.daily/\n\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-2.4.1.5",
                    "title": "Ensure permissions on /etc/cron.weekly are configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "2.4.1.5"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-2.4.1.5_statement",
                        "prose": "The `/etc/cron.weekly` directory contains system cron jobs that need to run on a weekly basis. The files in this directory cannot be manipulated by the `crontab` command but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-2.4.1.5_assessment-objective",
                        "prose": "Rationale: Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-2.4.1.5_guidance",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following commands to set ownership and permissions on the `/etc/cron.weekly` directory:\n\n```\n# chown root:root /etc/cron.weekly/\n# chmod og-rwx /etc/cron.weekly/\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-2.4.1.5_assessment-method",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following command and verify `Uid` and `Gid` are both `0/root` and `Access` does not grant permissions to `group` or `other`:\n\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.weekly/\n\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-2.4.1.6",
                    "title": "Ensure permissions on /etc/cron.monthly are configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "2.4.1.6"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-2.4.1.6_statement",
                        "prose": "The `/etc/cron.monthly` directory contains system cron jobs that need to run on a monthly basis. The files in this directory cannot be manipulated by the `crontab` command but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-2.4.1.6_assessment-objective",
                        "prose": "Rationale: Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-2.4.1.6_guidance",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following commands to set ownership and permissions on the `/etc/cron.monthly` directory:\n\n```\n# chown root:root /etc/cron.monthly/\n# chmod og-rwx /etc/cron.monthly/\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-2.4.1.6_assessment-method",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following command and verify `Uid` and `Gid` are both `0/root` and `Access` does not grant permissions to `group` or `other`:\n\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.monthly/\n\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-2.4.1.7",
                    "title": "Ensure permissions on /etc/cron.d are configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "2.4.1.7"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-2.4.1.7_statement",
                        "prose": "The `/etc/cron.d` directory contains system `cron` jobs that need to run in a similar manner to the hourly, daily weekly and monthly jobs from `/etc/crontab`, but require more granular control as to when they run. The files in this directory cannot be manipulated by the `crontab` command but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-2.4.1.7_assessment-objective",
                        "prose": "Rationale: Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-2.4.1.7_guidance",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following commands to set ownership and permissions on the `/etc/cron.d` directory:\n\n```\n# chown root:root /etc/cron.d/\n# chmod og-rwx /etc/cron.d/\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-2.4.1.7_assessment-method",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following command and verify `Uid` and `Gid` are both `0/root` and `Access` does not grant permissions to `group` or `other`:\n\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.d/\n\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-2.4.1.8",
                    "title": "Ensure crontab is restricted to authorized users",
                    "props": [
                      {
                        "name": "label",
                        "value": "2.4.1.8"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-2.4.1.8_statement",
                        "prose": "`crontab` is the program used to install, deinstall, or list the tables used to drive the cron daemon. Each user can have their own crontab, and though these are files in `/var/spool/cron/crontabs`, they are not intended to be edited directly.\n\nIf the `/etc/cron.allow` file exists, then you must be listed (one user per line) therein in order to be allowed to use this command. If the `/etc/cron.allow` file does not exist but the `/etc/cron.deny` file does exist, then you must not be listed in the `/etc/cron.deny` file in order to use this command.\n\nIf neither of these files exists, then depending on site-dependent configuration parameters, only the super user will be allowed to use this command, or all users will be able to use this command.\n\nIf both files exist then `/etc/cron.allow` takes precedence. Which means that `/etc/cron.deny` is not considered and your user must be listed in `/etc/cron.allow` in order to be able to use the crontab.\n\nRegardless of the existence of any of these files, the root administrative user is always allowed to setup a crontab.\n\nThe files `/etc/cron.allow` and `/etc/cron.deny`, if they exist, must be either world-readable, or readable by group `crontab`. If they are not, then cron will deny access to all users until the permissions are fixed.\n\nThere is one file for each user's crontab under the `/var/spool/cron/crontabs` directory. Users are not allowed to edit the files under that directory directly to ensure that only users allowed by the system to run periodic tasks can add them, and only syntactically correct crontabs will be written there. This is enforced by having the directory writable only by the `crontab` group and configuring crontab command with the setgid bid set for that specific group.\n\n**Note:**\n- Even though a given user is not listed in `cron.allow`, cron jobs can still be run as that user\n- The files `/etc/cron.allow` and `/etc/cron.deny`, if they exist, only controls administrative access to the crontab command for scheduling and modifying cron jobs"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-2.4.1.8_assessment-objective",
                        "prose": "Rationale: On many systems, only the system administrator is authorized to schedule `cron` jobs. Using the `cron.allow` file to control who can run `cron` jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-2.4.1.8_guidance",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following script to:\n- Create `/etc/cron.allow` if it doesn't exist\n- Change owner to user `root`\n- Change group owner to group `root`\n- Change mode to `640` or more restrictive\n\n```\n#!/usr/bin/env bash\n\n{\n [ ! -e \"/etc/cron.allow\" ] && touch /etc/cron.allow\n chown root:root /etc/cron.allow\n chmod u-x,g-wx,o-rwx /etc/cron.allow\n}\n```\n\n**- IF -** `/etc/cron.deny` exists, run the following commands to:\n- Change owner to user `root`\n- Change group owner to group `root`\n- Change mode to `640` or more restrictive\n\n```\n# [ -e \"/etc/cron.deny\" ] && chown root:root /etc/cron.deny\n# [ -e \"/etc/cron.deny\" ] && chmod u-x,g-wx,o-rwx /etc/cron.deny\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-2.4.1.8_assessment-method",
                        "prose": "**- IF -** cron is installed on the system:\n\nRun the following command to verify `/etc/cron.allow`:\n- Exists\n- Is mode `0640` or more restrictive\n- Is owned by the user `root`\n- Is group owned by the group `root`\n\n```\n# stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/cron.allow\n\nAccess: (640/-rw-r-----) Owner: (root) Group: (root)\n```\n\nRun the following command to verify either `cron.deny` doesn't exist or is:\n- Mode `0640` or more restrictive\n- Owned by the user `root`\n- Group owned by the group `root`\n\n```\n# [ -e \"/etc/cron.deny\" ] && stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/cron.deny\n```\n\nVerify either nothing is returned or returned value is:\n\n```\nAccess: (640/-rw-r-----) Owner: (root) Group: (root)\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              },
              {
                "id": "section-2-4-2",
                "title": "Configure at",
                "props": [
                  {
                    "name": "label",
                    "value": "2.4.2"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-2.4.2.1",
                    "title": "Ensure at is restricted to authorized users",
                    "props": [
                      {
                        "name": "label",
                        "value": "2.4.2.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-2.4.2.1_statement",
                        "prose": "`at` allows fairly complex time specifications, extending the POSIX.2 standard. It accepts times of the form HH:MM to run a job at a specific time of day. (If that time is already past, the next day is assumed.) You may also specify midnight, noon, or teatime (4pm) and you can have a time-of-day suffixed with AM or PM for running in the morning or the evening. You can also say what day the job will be run, by giving a date in the form month-name day with an optional year, or giving a date of the form MMDD[CC]YY, MM/DD/[CC]YY, DD.MM.[CC]YY or [CC]YY-MM-DD. The specification of a date must follow the specification of the time of day. You can also give times like now + count time-units, where the time-units can be minutes, hours, days, or weeks and you can tell at to run the job today by suffixing the time with today and to run the job tomorrow by suffixing the time with tomorrow.\n\nThe `/etc/at.allow` and `/etc/at.deny` files determine which user can submit commands for later execution via at or batch. The format of the files is a list of usernames, one on each line. Whitespace is not permitted. If the file `/etc/at.allow` exists, only usernames mentioned in it are allowed to use at. If `/etc/at.allow` does not exist, `/etc/at.deny` is checked, every username not mentioned in it is then allowed to use at. An empty `/etc/at.deny` means that every user may use at. If neither file exists, only the superuser is allowed to use at."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-2.4.2.1_assessment-objective",
                        "prose": "Rationale: On many systems, only the system administrator is authorized to schedule `at` jobs. Using the `at.allow` file to control who can run `at` jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-2.4.2.1_guidance",
                        "prose": "**- IF -** at is installed on the system:\n\nRun the following script to:\n- `/etc/at.allow`:\n - Create the file if it doesn't exist\n - Change owner or user `root`\n - If group `daemon` exists, change to group `daemon`, else change group to `root`\n - Change mode to `640` or more restrictive\n- **- IF -** `/etc/at.deny` exists:\n - Change owner or user `root`\n - If group `daemon` exists, change to group `daemon`, else change group to `root`\n - Change mode to `640` or more restrictive\n\n```\n#!/usr/bin/env bash\n\n{\n grep -Pq -- '^daemon\\b' /etc/group && l_group=\"daemon\" || l_group=\"root\"\n [ ! -e \"/etc/at.allow\" ] && touch /etc/at.allow\n chown root:\"$l_group\" /etc/at.allow\n chmod u-x,g-wx,o-rwx /etc/at.allow\n [ -e \"/etc/at.deny\" ] && chown root:\"$l_group\" /etc/at.deny\n [ -e \"/etc/at.deny\" ] && chmod u-x,g-wx,o-rwx /etc/at.deny\n}\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-2.4.2.1_assessment-method",
                        "prose": "**- IF -** at is installed on the system:\n\nRun the following command to verify `/etc/at.allow`:\n- Exists\n- Is mode `0640` or more restrictive\n- Is owned by the user `root`\n- Is group owned by the group `daemon` or group `root`\n\n```\n# stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/at.allow\n\nAccess: (640/-rw-r-----) Owner: (root) Group: (daemon)\n-OR-\nAccess: (640/-rw-r-----) Owner: (root) Group: (root)\n```\n\nVerify mode is `640` or more restrictive, owner is `root`, and group is `daemon` or `root`\n\nRun the following command to verify `at.deny` doesn't exist, **-OR-** is:\n- Mode `0640` or more restrictive\n- Owned by the user `root`\n- Group owned by the group `daemon` or group `root`\n\n```\n# [ -e \"/etc/at.deny\" ] && stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/at.deny\n\nAccess: (640/-rw-r-----) Owner: (root) Group: (daemon)\n-OR-\nAccess: (640/-rw-r-----) Owner: (root) Group: (root)\n-OR-\nNothing is returned\n```\n\nIf a value is returned, verify mode is 640 or more restrictive, owner is `root`, and group is `daemon` or `root`",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              }
            ]
          }
        ]
      },
      {
        "id": "section-3",
        "title": "Network",
        "props": [
          {
            "name": "label",
            "value": "3"
          }
        ],
        "controls": [],
        "groups": [
          {
            "id": "section-3-1",
            "title": "Configure Network Devices",
            "props": [
              {
                "name": "label",
                "value": "3.1"
              }
            ],
            "controls": [
              {
                "id": "cis-3.1.1",
                "title": "Ensure IPv6 status is identified",
                "props": [
                  {
                    "name": "label",
                    "value": "3.1.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.1.1_statement",
                    "prose": "Internet Protocol Version 6 (IPv6) is the most recent version of Internet Protocol (IP). It's designed to supply IP addressing and additional security to support the predicted growth of connected devices. IPv6 is based on 128-bit addressing and can support 340 undecillion, which is 340,282,366,920,938,463,463,374,607,431,768,211,456 unique addresses.\n\nFeatures of IPv6\n- Hierarchical addressing and routing infrastructure\n- Statefull and Stateless configuration\n- Support for quality of service (QoS)\n- An ideal protocol for neighboring node interaction"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.1.1_assessment-objective",
                    "prose": "Rationale: IETF RFC 4038 recommends that applications are built with an assumption of dual stack. It is recommended that IPv6 be enabled and configured in accordance with Benchmark recommendations.\n\n**- IF -** dual stack and IPv6 are not used in your environment, IPv6 may be disabled to reduce the attack surface of the system, and recommendations pertaining to IPv6 can be skipped.\n\n**Note:** It is recommended that IPv6 be enabled and configured unless this is against local site policy\nImpact: IETF RFC 4038 recommends that applications are built with an assumption of dual stack.\n\nWhen enabled, IPv6 will require additional configuration to reduce risk to the system."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.1.1_guidance",
                    "prose": "Enable or disable IPv6 in accordance with system requirements and local site policy"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.1.1_assessment-method",
                    "prose": "Run the following script to identify if IPv6 is enabled on the system:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\"\n ! grep -Pqs -- '^\\h*0\\b' /sys/module/ipv6/parameters/disable && l_output=\"- IPv6 is not enabled\"\n if sysctl net.ipv6.conf.all.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\h*=\\h*1\\b\" && \\\n sysctl net.ipv6.conf.default.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\h*=\\h*1\\b\"; then\n l_output=\"- IPv6 is not enabled\"\n fi\n [ -z \"$l_output\" ] && l_output=\"- IPv6 is enabled\"\n echo -e \"\\n$l_output\\n\"\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.1.2",
                "title": "Ensure wireless interfaces are disabled",
                "props": [
                  {
                    "name": "label",
                    "value": "3.1.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.1.2_statement",
                    "prose": "Wireless networking is used when wired networks are unavailable."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.1.2_assessment-objective",
                    "prose": "Rationale: **- IF -** wireless is not to be used, wireless devices can be disabled to reduce the potential attack surface.\nImpact: Many if not all laptop workstations and some desktop workstations will connect via wireless requiring these interfaces be enabled."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.1.2_guidance",
                    "prose": "Run the following script to disable any wireless interfaces:\n\n```\n#!/usr/bin/env bash\n\n{\n module_fix()\n {\n if ! modprobe -n -v \"$l_mname\" | grep -P -- '^\\h*install \\/bin\\/(true|false)'; then\n echo -e \" - setting module: \\\"$l_mname\\\" to be un-loadable\"\n echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mname\".conf\n fi\n if lsmod | grep \"$l_mname\" > /dev/null 2> then\n echo -e \" - unloading module \\\"$l_mname\\\"\"\n modprobe -r \"$l_mname\"\n fi\n if ! grep -Pq -- \"^\\h*blacklist\\h+$l_mname\\b\" /etc/modprobe.d/*; then\n echo -e \" - deny listing \\\"$l_mname\\\"\"\n echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mname\".conf\n fi\n }\n if [ -n \"$(find /sys/class/net/*/ -type d -name wireless)\" ]; then\n l_dname=$(for driverdir in $(find /sys/class/net/*/ -type d -name wireless | xargs -0 dirname); do basename \"$(readlink -f \"$driverdir\"/device/driver/module)\";done | sort -u)\n for l_mname in $l_dname; do\n module_fix\n done\n fi\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.1.2_assessment-method",
                    "prose": "Run the following script to verify no wireless interfaces are active on the system:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n module_chk()\n {\n # Check how module will be loaded\n l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\"\n else\n l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\"\n fi\n # Check is the module currently loaded\n if ! lsmod | grep \"$l_mname\" > /dev/null 2> then\n l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\"\n else\n l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\"\n fi\n # Check if the module is deny listed\n if modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mname\\b\"; then\n l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pl -- \"^\\h*blacklist\\h+$l_mname\\b\" /etc/modprobe.d/*)\\\"\"\n else\n l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\"\n fi\n }\n if [ -n \"$(find /sys/class/net/*/ -type d -name wireless)\" ]; then\n l_dname=$(for driverdir in $(find /sys/class/net/*/ -type d -name wireless | xargs -0 dirname); do basename \"$(readlink -f \"$driverdir\"/device/driver/module)\";done | sort -u)\n for l_mname in $l_dname; do\n module_chk\n done\n fi\n # Report results. If no failures output in l_output2, we pass\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n ** PASS **\"\n if [ -z \"$l_output\" ]; then\n echo -e \"\\n - System has no wireless NICs installed\"\n else\n echo -e \"\\n$l_output\\n\"\n fi\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.1.3",
                "title": "Ensure bluetooth services are not in use",
                "props": [
                  {
                    "name": "label",
                    "value": "3.1.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.1.3_statement",
                    "prose": "Bluetooth is a short-range wireless technology standard that is used for exchanging data between devices over short distances. It employs UHF radio waves in the ISM bands, from 2.402 GHz to 2.48 GHz. It is mainly used as an alternative to wire connections."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.1.3_assessment-objective",
                    "prose": "Rationale: An attacker may be able to find a way to access or corrupt your data. One example of this type of activity is `bluesnarfing`, which refers to attackers using a Bluetooth connection to steal information off of your Bluetooth device. Also, viruses or other malicious code can take advantage of Bluetooth technology to infect other devices. If you are infected, your data may be corrupted, compromised, stolen, or lost.\nImpact: Many personal electronic devices (PEDs) use Bluetooth technology. For example, you may be able to operate your computer with a wireless keyboard. Disabling Bluetooth will prevent these devices from connecting to the system.\n\nThere may be packages that are dependent on the `bluez` package. If the `bluez` package is removed, these dependent packages will be removed as well. Before removing the `bluez` package, review any dependent packages to determine if they are required on the system.\n\n**- IF -** a dependent package is required: stop and mask `bluetooth.service` leaving the `bluez` package installed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.1.3_guidance",
                    "prose": "Run the following commands to stop `bluetooth.service`, and remove the `bluez` package:\n\n```\n# systemctl stop bluetooth.service\n# dnf remove bluez\n```\n\n**- OR -**\n\n**- IF -** the `bluez` package is required as a dependency:\n\nRun the following commands to stop and mask `bluetooth.service`:\n\n```\n# systemctl stop bluetooth.service\n# systemctl mask bluetooth.service\n```\n\n**Note:** A reboot may be required"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.1.3_assessment-method",
                    "prose": "Run the following command to verify the `bluez` package is not installed:\n\n```\n# rpm -q bluez\n\npackage bluez is not installed\n```\n\n**- OR -** \n\n**- IF -** the `bluez` package is required as a dependency:\n\nRun the following command to verify `bluetooth.service` is not enabled:\n\n```\n# systemctl is-enabled bluetooth.service 2>/dev/null | grep 'enabled'\n\nNothing should be returned\n```\n\nRun the following command to verify `bluetooth.service` is not active:\n\n```\n# systemctl is-active bluetooth.service 2>/dev/null | grep '^active'\n\nNothing should be returned\n```\n\n**Note:** If the package is required for a dependency\n - Ensure the dependent package is approved by local site policy\n - Ensure stopping and masking the service and/or socket meets local site policy",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-3-2",
            "title": "Configure Network Kernel Modules",
            "props": [
              {
                "name": "label",
                "value": "3.2"
              }
            ],
            "controls": [
              {
                "id": "cis-3.2.1",
                "title": "Ensure dccp kernel module is not available",
                "props": [
                  {
                    "name": "label",
                    "value": "3.2.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.2.1_statement",
                    "prose": "The Datagram Congestion Control Protocol (DCCP) is a transport layer protocol that supports streaming media and telephony. DCCP provides a way to gain access to congestion control, without having to do it at the application layer, but does not provide in-sequence delivery."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.2.1_assessment-objective",
                    "prose": "Rationale: **- IF -** the protocol is not required, it is recommended that the drivers not be installed to reduce the potential attack surface."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.2.1_guidance",
                    "prose": "Run the following script to unload and disable the `dccp` module:\n\n**- IF -** the `dccp` kernel module is available in ANY installed kernel:\n - Create a file ending in `.conf` with `install dccp /bin/false` in the `/etc/modprobe.d/` directory\n - Create a file ending in `.conf` with `blacklist dccp` in the `/etc/modprobe.d/` directory\n - Run `modprobe -r dccp 2>/dev/null; rmmod dccp 2>/dev/null` to remove `dccp` from the kernel\n\n**- IF -** the `dccp` kernel module is not available on the system, or pre-compiled into the kernel, no remediation is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n unset a_output2; l_output3=\"\" l_dl=\"\" # unset arrays and clear variables\n l_mod_name=\"dccp\" # set module name\n l_mod_type=\"net\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_fix()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output2+=(\" - unloading kernel module: \\\"$l_mod_name\\\"\")\n modprobe -r \"$l_mod_name\" 2>/dev/null; rmmod \"$l_mod_name\" 2>/dev/null\n fi\n if ! grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - setting kernel module: \\\"$l_mod_name\\\" to \\\"/bin/false\\\"\")\n printf '%s\\n' \"install $l_mod_name /bin/false\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n if ! grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - denylisting kernel module: \\\"$l_mod_name\\\"\")\n printf '%s\\n' \"blacklist $l_mod_name\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_fix\n else\n echo -e \" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\"\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"${a_output2[@]}\"\n echo -e \"\\n - remediation of kernel module: \\\"$l_mod_name\\\" complete\\n\"\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.2.1_assessment-method",
                    "prose": "Run the following script to verify:\n\n**- IF -** the `dccp` kernel module is available in ANY installed kernel, verify:\n- An entry including `/bin/true` or `/bin/false` exists in a file within the `/etc/modprobe.d/` directory\n- The module is deny listed in a file within the `/etc/modprobe.d/` directory\n- The module is not loaded in the running kernel\n\n**- IF -** the `dccp` kernel module is not available on the system, or pre-compiled into the kernel, no additional configuration is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n l_output3=\"\" l_dl=\"\" # clear variables\n unset a_output; unset a_output2 # unset arrays\n l_mod_name=\"dccp\" # set module name\n l_mod_type=\"net\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_chk()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if ! lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loaded\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loaded\")\n fi\n if grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loadable\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loadable\")\n fi\n if grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is deny listed\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is not deny listed\")\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_chk\n else\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\")\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" - Reason(s) for audit failure:\" \"${a_output2[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.2.2",
                "title": "Ensure tipc kernel module is not available",
                "props": [
                  {
                    "name": "label",
                    "value": "3.2.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.2.2_statement",
                    "prose": "The Transparent Inter-Process Communication (TIPC) protocol is designed to provide communication between cluster nodes."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.2.2_assessment-objective",
                    "prose": "Rationale: **- IF -** the protocol is not being used, it is recommended that kernel module not be loaded, disabling the service to reduce the potential attack surface."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.2.2_guidance",
                    "prose": "Run the following script to unload and disable the `tipc` module:\n\n**- IF -** the `tipc` kernel module is available in ANY installed kernel:\n - Create a file ending in `.conf` with `install tipc /bin/false` in the `/etc/modprobe.d/` directory\n - Create a file ending in `.conf` with `blacklist tipc` in the `/etc/modprobe.d/` directory\n - Run `modprobe -r tipc 2>/dev/null; rmmod tipc 2>/dev/null` to remove `tipc` from the kernel\n\n**- IF -** the `tipc` kernel module is not available on the system, or pre-compiled into the kernel, no remediation is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n unset a_output2; l_output3=\"\" l_dl=\"\" # unset arrays and clear variables\n l_mod_name=\"tipc\" # set module name\n l_mod_type=\"net\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_fix()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output2+=(\" - unloading kernel module: \\\"$l_mod_name\\\"\")\n modprobe -r \"$l_mod_name\" 2>/dev/null; rmmod \"$l_mod_name\" 2>/dev/null\n fi\n if ! grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - setting kernel module: \\\"$l_mod_name\\\" to \\\"/bin/false\\\"\")\n printf '%s\\n' \"install $l_mod_name /bin/false\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n if ! grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - denylisting kernel module: \\\"$l_mod_name\\\"\")\n printf '%s\\n' \"blacklist $l_mod_name\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_fix\n else\n echo -e \" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\"\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"${a_output2[@]}\"\n echo -e \"\\n - remediation of kernel module: \\\"$l_mod_name\\\" complete\\n\"\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.2.2_assessment-method",
                    "prose": "Run the following script to verify:\n\n**- IF -** the `tipc` kernel module is available in ANY installed kernel, verify:\n- An entry including `/bin/true` or `/bin/false` exists in a file within the `/etc/modprobe.d/` directory\n- The module is deny listed in a file within the `/etc/modprobe.d/` directory\n- The module is not loaded in the running kernel\n\n**- IF -** the `tipc` kernel module is not available on the system, or pre-compiled into the kernel, no additional configuration is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n l_output3=\"\" l_dl=\"\" # clear variables\n unset a_output; unset a_output2 # unset arrays\n l_mod_name=\"tipc\" # set module name\n l_mod_type=\"net\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_chk()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if ! lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loaded\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loaded\")\n fi\n if grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loadable\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loadable\")\n fi\n if grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is deny listed\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is not deny listed\")\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_chk\n else\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\")\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" - Reason(s) for audit failure:\" \"${a_output2[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.2.3",
                "title": "Ensure rds kernel module is not available",
                "props": [
                  {
                    "name": "label",
                    "value": "3.2.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.2.3_statement",
                    "prose": "The Reliable Datagram Sockets (RDS) protocol is a transport layer protocol designed to provide low-latency, high-bandwidth communications between cluster nodes. It was developed by the Oracle Corporation."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.2.3_assessment-objective",
                    "prose": "Rationale: **- IF -** the protocol is not being used, it is recommended that kernel module not be loaded, disabling the service to reduce the potential attack surface."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.2.3_guidance",
                    "prose": "Run the following script to unload and disable the `rds` module:\n\n**- IF -** the `rds` kernel module is available in ANY installed kernel:\n - Create a file ending in `.conf` with `install rds /bin/false` in the `/etc/modprobe.d/` directory\n - Create a file ending in `.conf` with `blacklist rds` in the `/etc/modprobe.d/` directory\n - Run `modprobe -r rds 2>/dev/null; rmmod rds 2>/dev/null` to remove `rds` from the kernel\n\n**- IF -** the `rds` kernel module is not available on the system, or pre-compiled into the kernel, no remediation is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n unset a_output2; l_output3=\"\" l_dl=\"\" # unset arrays and clear variables\n l_mod_name=\"rds\" # set module name\n l_mod_type=\"net\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_fix()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output2+=(\" - unloading kernel module: \\\"$l_mod_name\\\"\")\n modprobe -r \"$l_mod_name\" 2>/dev/null; rmmod \"$l_mod_name\" 2>/dev/null\n fi\n if ! grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - setting kernel module: \\\"$l_mod_name\\\" to \\\"/bin/false\\\"\")\n printf '%s\\n' \"install $l_mod_name /bin/false\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n if ! grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - denylisting kernel module: \\\"$l_mod_name\\\"\")\n printf '%s\\n' \"blacklist $l_mod_name\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_fix\n else\n echo -e \" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\"\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"${a_output2[@]}\"\n echo -e \"\\n - remediation of kernel module: \\\"$l_mod_name\\\" complete\\n\"\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.2.3_assessment-method",
                    "prose": "Run the following script to verify:\n\n**- IF -** the `rds` kernel module is available in ANY installed kernel, verify:\n- An entry including `/bin/true` or `/bin/false` exists in a file within the `/etc/modprobe.d/` directory\n- The module is deny listed in a file within the `/etc/modprobe.d/` directory\n- The module is not loaded in the running kernel\n\n**- IF -** the `rds` kernel module is not available on the system, or pre-compiled into the kernel, no additional configuration is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n l_output3=\"\" l_dl=\"\" # clear variables\n unset a_output; unset a_output2 # unset arrays\n l_mod_name=\"rds\" # set module name\n l_mod_type=\"net\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_chk()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if ! lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loaded\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loaded\")\n fi\n if grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loadable\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loadable\")\n fi\n if grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is deny listed\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is not deny listed\")\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_chk\n else\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\")\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" - Reason(s) for audit failure:\" \"${a_output2[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.2.4",
                "title": "Ensure sctp kernel module is not available",
                "props": [
                  {
                    "name": "label",
                    "value": "3.2.4"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.2.4_statement",
                    "prose": "The Stream Control Transmission Protocol (SCTP) is a transport layer protocol used to support message oriented communication, with several streams of messages in one connection. It serves a similar function as TCP and UDP, incorporating features of both. It is message-oriented like UDP, and ensures reliable in-sequence transport of messages with congestion control like TCP."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.2.4_assessment-objective",
                    "prose": "Rationale: **- IF -** the protocol is not being used, it is recommended that kernel module not be loaded, disabling the service to reduce the potential attack surface."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.2.4_guidance",
                    "prose": "Run the following script to unload and disable the `sctp` module:\n\n**- IF -** the `sctp` kernel module is available in ANY installed kernel:\n - Create a file ending in `.conf` with `install sctp /bin/false` in the `/etc/modprobe.d/` directory\n - Create a file ending in `.conf` with `blacklist sctp` in the `/etc/modprobe.d/` directory\n - Run `modprobe -r sctp 2>/dev/null; rmmod sctp 2>/dev/null` to remove `sctp` from the kernel\n\n**- IF -** the `sctp` kernel module is not available on the system, or pre-compiled into the kernel, no remediation is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n unset a_output2; l_output3=\"\" l_dl=\"\" # unset arrays and clear variables\n l_mod_name=\"sctp\" # set module name\n l_mod_type=\"net\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_fix()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output2+=(\" - unloading kernel module: \\\"$l_mod_name\\\"\")\n modprobe -r \"$l_mod_name\" 2>/dev/null; rmmod \"$l_mod_name\" 2>/dev/null\n fi\n if ! grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - setting kernel module: \\\"$l_mod_name\\\" to \\\"/bin/false\\\"\")\n printf '%s\\n' \"install $l_mod_name /bin/false\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n if ! grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output2+=(\" - denylisting kernel module: \\\"$l_mod_name\\\"\")\n printf '%s\\n' \"blacklist $l_mod_name\" >> /etc/modprobe.d/\"$l_mod_name\".conf\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_fix\n else\n echo -e \" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\"\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"${a_output2[@]}\"\n echo -e \"\\n - remediation of kernel module: \\\"$l_mod_name\\\" complete\\n\"\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.2.4_assessment-method",
                    "prose": "Run the following script to verify:\n\n**- IF -** the `sctp` kernel module is available in ANY installed kernel, verify:\n- An entry including `/bin/true` or `/bin/false` exists in a file within the `/etc/modprobe.d/` directory\n- The module is deny listed in a file within the `/etc/modprobe.d/` directory\n- The module is not loaded in the running kernel\n\n**- IF -** the `sctp` kernel module is not available on the system, or pre-compiled into the kernel, no additional configuration is necessary\n\n```\n#!/usr/bin/env bash\n\n{\n l_output3=\"\" l_dl=\"\" # clear variables\n unset a_output; unset a_output2 # unset arrays\n l_mod_name=\"sctp\" # set module name\n l_mod_type=\"net\" # set module type\n l_mod_path=\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\"\n f_module_chk()\n {\n l_dl=\"y\" # Set to ignore duplicate checks\n a_showconfig=() # Create array with modprobe output\n while IFS= read -r l_showconfig; do\n a_showconfig+=(\"$l_showconfig\")\n done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\"${l_mod_name//-/_}\"'\\b')\n if ! lsmod | grep \"$l_mod_name\" &> /dev/null; then # Check if the module is currently loaded\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loaded\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loaded\")\n fi\n if grep -Pq -- '\\binstall\\h+'\"${l_mod_name//-/_}\"'\\h+\\/bin\\/(true|false)\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is not loadable\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is loadable\")\n fi\n if grep -Pq -- '\\bblacklist\\h+'\"${l_mod_name//-/_}\"'\\b' <<< \"${a_showconfig[*]}\"; then\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" is deny listed\")\n else\n a_output2+=(\" - kernel module: \\\"$l_mod_name\\\" is not deny listed\")\n fi\n }\n for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n if [ -d \"$l_mod_base_directory/${l_mod_name/-/\\/}\" ] && [ -n \"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\/})\" ]; then\n l_output3=\"$l_output3\\n - \\\"$l_mod_base_directory\\\"\"\n [[ \"$l_mod_name\" =~ overlay ]] && l_mod_name=\"${l_mod_name::-2}\" \n [ \"$l_dl\" != \"y\" ] && f_module_chk\n else\n a_output+=(\" - kernel module: \\\"$l_mod_name\\\" doesn't exist in \\\"$l_mod_base_directory\\\"\")\n fi\n done\n [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mod_name\\\" exists in:$l_output3\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" - Reason(s) for audit failure:\" \"${a_output2[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-3-3",
            "title": "Configure Network Kernel Parameters",
            "props": [
              {
                "name": "label",
                "value": "3.3"
              }
            ],
            "controls": [
              {
                "id": "cis-3.3.1",
                "title": "Ensure ip forwarding is disabled",
                "props": [
                  {
                    "name": "label",
                    "value": "3.3.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.3.1_statement",
                    "prose": "The `net.ipv4.ip_forward` and `net.ipv6.conf.all.forwarding` flags are used to tell the system whether it can forward packets or not."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.3.1_assessment-objective",
                    "prose": "Rationale: Setting `net.ipv4.ip_forward` and `net.ipv6.conf.all.forwarding` to `0` ensures that a system with multiple interfaces (for example, a hard proxy), will never be able to forward packets, and therefore, never serve as a router.\nImpact: IP forwarding is required on systems configured to act as a router. If these parameters are disabled, the system will not be able to perform as a router.\n\nMany Cloud Service Provider (CSP) hosted systems require IP forwarding to be enabled. If the system is running on a CSP platform, this requirement should be reviewed before disabling IP forwarding."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.3.1_guidance",
                    "prose": "Set the following parameter in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv4.ip_forward = 0`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.ip_forward = 0\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n```\n\nRun the following script to set the active kernel parameters:\n\n```\n#!/usr/bin/env bash\n\n{\n sysctl -w net.ipv4.ip_forward=0\n sysctl -w net.ipv4.route.flush=1\n}\n```\n\n**- IF -** IPv6 is enabled on the system:\n\nSet the following parameter in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv6.conf.all.forwarding = 0`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv6.conf.all.forwarding = 0\" >> /etc/sysctl.d/60-netipv6_sysctl.conf\n```\n\nRun the following script to set the active kernel parameters:\n\n```\n#!/usr/bin/env bash \n\n{\n sysctl -w net.ipv6.conf.all.forwarding=0\n sysctl -w net.ipv6.route.flush=1\n}\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.3.1_assessment-method",
                    "prose": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n- `net.ipv4.ip_forward` is set to `0`\n- `net.ipv6.conf.all.forwarding` is set to `0`\n\n**Note:**\n- kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n- IPv6 kernel parameters only apply to systems where IPv6 is enabled\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_ipv6_disabled=\"\" # Clear output variables\n a_parlist=(\"net.ipv4.ip_forward=0\" \"net.ipv6.conf.all.forwarding=0\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n f_ipv6_chk()\n {\n l_ipv6_disabled=\"\"\n ! grep -Pqs -- '^\\h*0\\b' /sys/module/ipv6/parameters/disable && l_ipv6_disabled=\"yes\"\n if sysctl net.ipv6.conf.all.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\h*=\\h*1\\b\" && \\\n sysctl net.ipv6.conf.default.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\h*=\\h*1\\b\"; then\n l_ipv6_disabled=\"yes\"\n fi\n [ -z \"$l_ipv6_disabled\" ] && l_ipv6_disabled=\"no\"\n }\n f_kernel_parameter_chk()\n {\n l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\"\n if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n fi\n unset A_out; declare -A A_out # Check durable setting (files)\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n l_kpar=\"${l_kpar//\\//.}\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n fi\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n fi\n done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n if grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n [ -z \"$l_ipv6_disabled\" ] && f_ipv6_chk\n if [ \"$l_ipv6_disabled\" = \"yes\" ]; then\n l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n else\n f_kernel_parameter_chk\n fi\n else\n f_kernel_parameter_chk\n fi\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n unset a_parlist; unset A_out # unset arrays\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.3.2",
                "title": "Ensure packet redirect sending is disabled",
                "props": [
                  {
                    "name": "label",
                    "value": "3.3.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.3.2_statement",
                    "prose": "ICMP Redirects are used to send routing information to other hosts. As a host itself does not act as a router (in a host only configuration), there is no need to send redirects."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.3.2_assessment-objective",
                    "prose": "Rationale: An attacker could use a compromised host to send invalid ICMP redirects to other router devices in an attempt to corrupt routing and have users access a system set up by the attacker as opposed to a valid system.\nImpact: IP forwarding is required on systems configured to act as a router. If these parameters are disabled, the system will not be able to perform as a router."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.3.2_guidance",
                    "prose": "Set the following parameters in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv4.conf.all.send_redirects = 0`\n- `net.ipv4.conf.default.send_redirects = 0`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.conf.all.send_redirects = 0\" \"net.ipv4.conf.default.send_redirects = 0\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n```\n\nRun the following script to set the active kernel parameters:\n\n```\n#!/usr/bin/env bash\n\n{\n sysctl -w net.ipv4.conf.all.send_redirects=0\n sysctl -w net.ipv4.conf.default.send_redirects=0\n sysctl -w net.ipv4.route.flush=1\n}\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.3.2_assessment-method",
                    "prose": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n- `net.ipv4.conf.all.send_redirects` is set to `0`\n- `net.ipv4.conf.default.send_redirects` is set to `0`\n\n**Note:** kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. \n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_ipv6_disabled=\"\" # Clear output variables\n a_parlist=(\"net.ipv4.conf.all.send_redirects=0\" \"net.ipv4.conf.default.send_redirects=0\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n f_ipv6_chk()\n {\n l_ipv6_disabled=\"\"\n ! grep -Pqs -- '^\\h*0\\b' /sys/module/ipv6/parameters/disable && l_ipv6_disabled=\"yes\"\n if sysctl net.ipv6.conf.all.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\h*=\\h*1\\b\" && \\\n sysctl net.ipv6.conf.default.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\h*=\\h*1\\b\"; then\n l_ipv6_disabled=\"yes\"\n fi\n [ -z \"$l_ipv6_disabled\" ] && l_ipv6_disabled=\"no\"\n }\n f_kernel_parameter_chk()\n {\n l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\"\n if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n fi\n unset A_out; declare -A A_out # Check durable setting (files)\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n l_kpar=\"${l_kpar//\\//.}\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n fi\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n fi\n done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n if grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n [ -z \"$l_ipv6_disabled\" ] && f_ipv6_chk\n if [ \"$l_ipv6_disabled\" = \"yes\" ]; then\n l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n else\n f_kernel_parameter_chk\n fi\n else\n f_kernel_parameter_chk\n fi\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n unset a_parlist; unset A_out # unset arrays\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.3.3",
                "title": "Ensure bogus icmp responses are ignored",
                "props": [
                  {
                    "name": "label",
                    "value": "3.3.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.3.3_statement",
                    "prose": "Setting `net.ipv4.icmp_ignore_bogus_error_responses` to `1` prevents the kernel from logging bogus responses (RFC-1122 non-compliant) from broadcast reframes, keeping file systems from filling up with useless log messages."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.3.3_assessment-objective",
                    "prose": "Rationale: Some routers (and some attackers) will send responses that violate RFC-1122 and attempt to fill up a log file system with many useless error messages."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.3.3_guidance",
                    "prose": "Set the following parameter in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv4.icmp_ignore_bogus_error_responses = 1`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.icmp_ignore_bogus_error_responses = 1\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n```\n\nRun the following script to set the active kernel parameters:\n\n```\n#!/usr/bin/env bash\n\n{\n sysctl -w net.ipv4.icmp_ignore_bogus_error_responses=1\n sysctl -w net.ipv4.route.flush=1\n}\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.3.3_assessment-method",
                    "prose": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file:\n- `net.ipv4.icmp_ignore_bogus_error_responses` is set to `1`\n\n**Note:** kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_ipv6_disabled=\"\" # Clear output variables\n a_parlist=(\"net.ipv4.icmp_ignore_bogus_error_responses=1\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n f_ipv6_chk()\n {\n l_ipv6_disabled=\"\"\n ! grep -Pqs -- '^\\h*0\\b' /sys/module/ipv6/parameters/disable && l_ipv6_disabled=\"yes\"\n if sysctl net.ipv6.conf.all.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\h*=\\h*1\\b\" && \\\n sysctl net.ipv6.conf.default.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\h*=\\h*1\\b\"; then\n l_ipv6_disabled=\"yes\"\n fi\n [ -z \"$l_ipv6_disabled\" ] && l_ipv6_disabled=\"no\"\n }\n f_kernel_parameter_chk()\n {\n l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\"\n if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n fi\n unset A_out; declare -A A_out # Check durable setting (files)\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n l_kpar=\"${l_kpar//\\//.}\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n fi\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n fi\n done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n if grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n [ -z \"$l_ipv6_disabled\" ] && f_ipv6_chk\n if [ \"$l_ipv6_disabled\" = \"yes\" ]; then\n l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n else\n f_kernel_parameter_chk\n fi\n else\n f_kernel_parameter_chk\n fi\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n unset a_parlist; unset A_out # unset arrays\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.3.4",
                "title": "Ensure broadcast icmp requests are ignored",
                "props": [
                  {
                    "name": "label",
                    "value": "3.3.4"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.3.4_statement",
                    "prose": "Setting `net.ipv4.icmp_echo_ignore_broadcasts` to `1` will cause the system to ignore all ICMP echo and timestamp requests to broadcast and multicast addresses."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.3.4_assessment-objective",
                    "prose": "Rationale: Accepting ICMP echo and timestamp requests with broadcast or multicast destinations for your network could be used to trick your host into starting (or participating) in a Smurf attack. A Smurf attack relies on an attacker sending large amounts of ICMP broadcast messages with a spoofed source address. All hosts receiving this message and responding would send echo-reply messages back to the spoofed address, which is probably not routable. If many hosts respond to the packets, the amount of traffic on the network could be significantly multiplied."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.3.4_guidance",
                    "prose": "Set the following parameter in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv4.icmp_echo_ignore_broadcasts = 1`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.icmp_echo_ignore_broadcasts = 1\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n```\n\nRun the following script to set the active kernel parameters:\n\n```\n#!/usr/bin/env bash\n\n{\n sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=1\n sysctl -w net.ipv4.route.flush=1\n}\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.3.4_assessment-method",
                    "prose": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file:\n- `net.ipv4.icmp_echo_ignore_broadcasts` is set to `1`\n\n**Note:** kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_ipv6_disabled=\"\" # Clear output variables\n a_parlist=(\"net.ipv4.icmp_echo_ignore_broadcasts=1\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n f_ipv6_chk()\n {\n l_ipv6_disabled=\"\"\n ! grep -Pqs -- '^\\h*0\\b' /sys/module/ipv6/parameters/disable && l_ipv6_disabled=\"yes\"\n if sysctl net.ipv6.conf.all.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\h*=\\h*1\\b\" && \\\n sysctl net.ipv6.conf.default.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\h*=\\h*1\\b\"; then\n l_ipv6_disabled=\"yes\"\n fi\n [ -z \"$l_ipv6_disabled\" ] && l_ipv6_disabled=\"no\"\n }\n f_kernel_parameter_chk()\n {\n l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\"\n if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n fi\n unset A_out; declare -A A_out # Check durable setting (files)\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n l_kpar=\"${l_kpar//\\//.}\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n fi\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n fi\n done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n if grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n [ -z \"$l_ipv6_disabled\" ] && f_ipv6_chk\n if [ \"$l_ipv6_disabled\" = \"yes\" ]; then\n l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n else\n f_kernel_parameter_chk\n fi\n else\n f_kernel_parameter_chk\n fi\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n unset a_parlist; unset A_out # unset arrays\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.3.5",
                "title": "Ensure icmp redirects are not accepted",
                "props": [
                  {
                    "name": "label",
                    "value": "3.3.5"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.3.5_statement",
                    "prose": "ICMP redirect messages are packets that convey routing information and tell your host (acting as a router) to send packets via an alternate path. It is a way of allowing an outside routing device to update your system routing tables."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.3.5_assessment-objective",
                    "prose": "Rationale: ICMP redirect messages are packets that convey routing information and tell your host (acting as a router) to send packets via an alternate path. It is a way of allowing an outside routing device to update your system routing tables. By setting `net.ipv4.conf.all.accept_redirects`, `net.ipv4.conf.default.accept_redirects`, `net.ipv6.conf.all.accept_redirects`, and `net.ipv6.conf.default.accept_redirects` to `0`, the system will not accept any ICMP redirect messages, and therefore, won't allow outsiders to update the system's routing tables."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.3.5_guidance",
                    "prose": "Set the following parameters in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv4.conf.all.accept_redirects = 0`\n- `net.ipv4.conf.default.accept_redirects = 0`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.conf.all.accept_redirects = 0\" \"net.ipv4.conf.default.accept_redirects = 0\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n```\n\nRun the following script to set the active kernel parameters:\n\n```\n#!/usr/bin/env bash\n\n{\n sysctl -w net.ipv4.conf.all.accept_redirects=0\n sysctl -w net.ipv4.conf.default.accept_redirects=0\n sysctl -w net.ipv4.route.flush=1\n}\n```\n\n**- IF -** IPv6 is enabled on the system:\n\nSet the following parameters in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv6.conf.all.accept_redirects = 0`\n- `net.ipv6.conf.default.accept_redirects = 0`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv6.conf.all.accept_redirects = 0\" \"net.ipv6.conf.default.accept_redirects = 0\" >> /etc/sysctl.d/60-netipv6_sysctl.conf\n```\n\nRun the following script to set the active kernel parameters:\n\n```\n#!/usr/bin/env bash\n\n{\n sysctl -w net.ipv6.conf.all.accept_redirects=0\n sysctl -w net.ipv6.conf.default.accept_redirects=0\n sysctl -w net.ipv6.route.flush=1\n}\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.3.5_assessment-method",
                    "prose": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n- `net.ipv4.conf.all.accept_redirects` is set to `0`\n- `net.ipv4.conf.default.accept_redirects` is set to `0`\n- `net.ipv6.conf.all.accept_redirects` is set to `0`\n- `net.ipv6.conf.default.accept_redirects` is set to `0`\n\n**Note:** \n- kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n- IPv6 kernel parameters only apply to systems where IPv6 is enabled \n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_ipv6_disabled=\"\" # Clear output variables\n a_parlist=(\"net.ipv4.conf.all.accept_redirects=0\" \"net.ipv4.conf.default.accept_redirects=0\" \"net.ipv6.conf.all.accept_redirects=0\" \"net.ipv6.conf.default.accept_redirects=0\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n f_ipv6_chk()\n {\n l_ipv6_disabled=\"\"\n ! grep -Pqs -- '^\\h*0\\b' /sys/module/ipv6/parameters/disable && l_ipv6_disabled=\"yes\"\n if sysctl net.ipv6.conf.all.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\h*=\\h*1\\b\" && \\\n sysctl net.ipv6.conf.default.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\h*=\\h*1\\b\"; then\n l_ipv6_disabled=\"yes\"\n fi\n [ -z \"$l_ipv6_disabled\" ] && l_ipv6_disabled=\"no\"\n }\n f_kernel_parameter_chk()\n {\n l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\"\n if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n fi\n unset A_out; declare -A A_out # Check durable setting (files)\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n l_kpar=\"${l_kpar//\\//.}\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n fi\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n fi\n done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n if grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n [ -z \"$l_ipv6_disabled\" ] && f_ipv6_chk\n if [ \"$l_ipv6_disabled\" = \"yes\" ]; then\n l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n else\n f_kernel_parameter_chk\n fi\n else\n f_kernel_parameter_chk\n fi\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n unset a_parlist; unset A_out # unset arrays\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.3.6",
                "title": "Ensure secure icmp redirects are not accepted",
                "props": [
                  {
                    "name": "label",
                    "value": "3.3.6"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.3.6_statement",
                    "prose": "Secure ICMP redirects are the same as ICMP redirects, except they come from gateways listed on the default gateway list. It is assumed that these gateways are known to your system, and that they are likely to be secure."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.3.6_assessment-objective",
                    "prose": "Rationale: It is still possible for even known gateways to be compromised. Setting `net.ipv4.conf.all.secure_redirects` and `net.ipv4.conf.default.secure_redirects` to `0` protects the system from routing table updates by possibly compromised known gateways."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.3.6_guidance",
                    "prose": "Set the following parameters in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv4.conf.all.secure_redirects = 0`\n- `net.ipv4.conf.default.secure_redirects = 0`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.conf.all.secure_redirects = 0\" \"net.ipv4.conf.default.secure_redirects = 0\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n```\n\nRun the following script to set the active kernel parameters:\n\n```\n#!/usr/bin/env bash\n\n{\n sysctl -w net.ipv4.conf.all.secure_redirects=0\n sysctl -w net.ipv4.conf.default.secure_redirects=0\n sysctl -w net.ipv4.route.flush=1\n}\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.3.6_assessment-method",
                    "prose": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n- `net.ipv4.conf.all.secure_redirects` is set to `0`\n- `net.ipv4.conf.default.secure_redirects` is set to `0`\n\n**Note:** kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_ipv6_disabled=\"\" # Clear output variables\n a_parlist=(\"net.ipv4.conf.all.secure_redirects=0\" \"net.ipv4.conf.default.secure_redirects=0\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n f_ipv6_chk()\n {\n l_ipv6_disabled=\"\"\n ! grep -Pqs -- '^\\h*0\\b' /sys/module/ipv6/parameters/disable && l_ipv6_disabled=\"yes\"\n if sysctl net.ipv6.conf.all.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\h*=\\h*1\\b\" && \\\n sysctl net.ipv6.conf.default.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\h*=\\h*1\\b\"; then\n l_ipv6_disabled=\"yes\"\n fi\n [ -z \"$l_ipv6_disabled\" ] && l_ipv6_disabled=\"no\"\n }\n f_kernel_parameter_chk()\n {\n l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\"\n if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n fi\n unset A_out; declare -A A_out # Check durable setting (files)\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n l_kpar=\"${l_kpar//\\//.}\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n fi\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n fi\n done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n if grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n [ -z \"$l_ipv6_disabled\" ] && f_ipv6_chk\n if [ \"$l_ipv6_disabled\" = \"yes\" ]; then\n l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n else\n f_kernel_parameter_chk\n fi\n else\n f_kernel_parameter_chk\n fi\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n unset a_parlist; unset A_out # unset arrays\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.3.7",
                "title": "Ensure reverse path filtering is enabled",
                "props": [
                  {
                    "name": "label",
                    "value": "3.3.7"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.3.7_statement",
                    "prose": "Setting `net.ipv4.conf.all.rp_filter` and `net.ipv4.conf.default.rp_filter` to `1` forces the Linux kernel to utilize reverse path filtering on a received packet to determine if the packet was valid. Essentially, with reverse path filtering, if the return packet does not go out the same interface that the corresponding source packet came from, the packet is dropped (and logged if `log_martians` is set)."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.3.7_assessment-objective",
                    "prose": "Rationale: Setting `net.ipv4.conf.all.rp_filter` and `net.ipv4.conf.default.rp_filter` to `1` is a good way to deter attackers from sending your system bogus packets that cannot be responded to. One instance where this feature breaks down is if asymmetrical routing is employed. This would occur when using dynamic routing protocols (bgp, ospf, etc) on your system. If you are using asymmetrical routing on your system, you will not be able to enable this feature without breaking the routing.\nImpact: If you are using asymmetrical routing on your system, you will not be able to enable this feature without breaking the routing."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.3.7_guidance",
                    "prose": "Set the following parameters in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv4.conf.all.rp_filter = 1`\n- `net.ipv4.conf.default.rp_filter = 1`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.conf.all.rp_filter = 1\" \"net.ipv4.conf.default.rp_filter = 1\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n```\n\nRun the following script to set the active kernel parameters:\n\n```\n#!/usr/bin/env bash\n\n{\n sysctl -w net.ipv4.conf.all.rp_filter=1\n sysctl -w net.ipv4.conf.default.rp_filter=1\n sysctl -w net.ipv4.route.flush=1\n}\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.3.7_assessment-method",
                    "prose": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n- `net.ipv4.conf.all.rp_filter` is set to `1`\n- `net.ipv4.conf.default.rp_filter` is set to `1`\n\n**Note:** kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_ipv6_disabled=\"\" # Clear output variables\n a_parlist=(\"net.ipv4.conf.all.rp_filter=1\" \"net.ipv4.conf.default.rp_filter=1\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n f_ipv6_chk()\n {\n l_ipv6_disabled=\"\"\n ! grep -Pqs -- '^\\h*0\\b' /sys/module/ipv6/parameters/disable && l_ipv6_disabled=\"yes\"\n if sysctl net.ipv6.conf.all.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\h*=\\h*1\\b\" && \\\n sysctl net.ipv6.conf.default.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\h*=\\h*1\\b\"; then\n l_ipv6_disabled=\"yes\"\n fi\n [ -z \"$l_ipv6_disabled\" ] && l_ipv6_disabled=\"no\"\n }\n f_kernel_parameter_chk()\n {\n l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\"\n if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n fi\n unset A_out; declare -A A_out # Check durable setting (files)\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n l_kpar=\"${l_kpar//\\//.}\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n fi\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n fi\n done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n if grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n [ -z \"$l_ipv6_disabled\" ] && f_ipv6_chk\n if [ \"$l_ipv6_disabled\" = \"yes\" ]; then\n l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n else\n f_kernel_parameter_chk\n fi\n else\n f_kernel_parameter_chk\n fi\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n unset a_parlist; unset A_out # unset arrays\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.3.8",
                "title": "Ensure source routed packets are not accepted",
                "props": [
                  {
                    "name": "label",
                    "value": "3.3.8"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.3.8_statement",
                    "prose": "In networking, source routing allows a sender to partially or fully specify the route packets take through a network. In contrast, non-source routed packets travel a path determined by routers in the network. In some cases, systems may not be routable or reachable from some locations (e.g. private addresses vs. Internet routable), and so source routed packets would need to be used."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.3.8_assessment-objective",
                    "prose": "Rationale: Setting `net.ipv4.conf.all.accept_source_route`, `net.ipv4.conf.default.accept_source_route`, `net.ipv6.conf.all.accept_source_route` and `net.ipv6.conf.default.accept_source_route` to `0` disables the system from accepting source routed packets. Assume this system was capable of routing packets to Internet routable addresses on one interface and private addresses on another interface. Assume that the private addresses were not routable to the Internet routable addresses and vice versa. Under normal routing circumstances, an attacker from the Internet routable addresses could not use the system as a way to reach the private address systems. If, however, source routed packets were allowed, they could be used to gain access to the private address systems as the route could be specified, rather than rely on routing protocols that did not allow this routing."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.3.8_guidance",
                    "prose": "Set the following parameters in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv4.conf.all.accept_source_route = 0`\n- `net.ipv4.conf.default.accept_source_route = 0`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.conf.all.accept_source_route = 0\" \"net.ipv4.conf.default.accept_source_route = 0\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n```\n\nRun the following script to set the active kernel parameters:\n\n```\n#!/usr/bin/env bash\n\n{\n sysctl -w net.ipv4.conf.all.accept_source_route=0\n sysctl -w net.ipv4.conf.default.accept_source_route=0\n sysctl -w net.ipv4.route.flush=1\n}\n```\n\n**- IF -** IPv6 is enabled on the system:\n\nSet the following parameters in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv6.conf.all.accept_source_route = 0`\n- `net.ipv6.conf.default.accept_source_route = 0`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv6.conf.all.accept_source_route = 0\" \"net.ipv6.conf.default.accept_source_route = 0\" >> /etc/sysctl.d/60-netipv6_sysctl.conf\n```\n\nRun the following command to set the active kernel parameters:\n```\n#!/usr/bin/env bash\n\n{\n sysctl -w net.ipv6.conf.all.accept_source_route=0\n sysctl -w net.ipv6.conf.default.accept_source_route=0\n sysctl -w net.ipv6.route.flush=1\n}\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.3.8_assessment-method",
                    "prose": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n- `net.ipv4.conf.all.accept_source_route` is set to `0`\n- `net.ipv4.conf.default.accept_source_route` is set to `0`\n- `net.ipv6.conf.all.accept_source_route` is set to `0`\n- `net.ipv6.conf.default.accept_source_route` is set to `0`\n\n**Note:** \n- kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n- IPv6 kernel parameters only apply to systems where IPv6 is enabled \n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_ipv6_disabled=\"\" # Clear output variables\n a_parlist=(\"net.ipv4.conf.all.accept_source_route=0\" \"net.ipv4.conf.default.accept_source_route=0\" \"net.ipv6.conf.all.accept_source_route=0\" \"net.ipv6.conf.default.accept_source_route=0\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n f_ipv6_chk()\n {\n l_ipv6_disabled=\"\"\n ! grep -Pqs -- '^\\h*0\\b' /sys/module/ipv6/parameters/disable && l_ipv6_disabled=\"yes\"\n if sysctl net.ipv6.conf.all.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\h*=\\h*1\\b\" && \\\n sysctl net.ipv6.conf.default.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\h*=\\h*1\\b\"; then\n l_ipv6_disabled=\"yes\"\n fi\n [ -z \"$l_ipv6_disabled\" ] && l_ipv6_disabled=\"no\"\n }\n f_kernel_parameter_chk()\n {\n l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\"\n if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n fi\n unset A_out; declare -A A_out # Check durable setting (files)\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n l_kpar=\"${l_kpar//\\//.}\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n fi\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n fi\n done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n if grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n [ -z \"$l_ipv6_disabled\" ] && f_ipv6_chk\n if [ \"$l_ipv6_disabled\" = \"yes\" ]; then\n l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n else\n f_kernel_parameter_chk\n fi\n else\n f_kernel_parameter_chk\n fi\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n unset a_parlist; unset A_out # unset arrays\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.3.9",
                "title": "Ensure suspicious packets are logged",
                "props": [
                  {
                    "name": "label",
                    "value": "3.3.9"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.3.9_statement",
                    "prose": "When enabled, this feature logs packets with un-routable source addresses to the kernel log."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.3.9_assessment-objective",
                    "prose": "Rationale: Setting `net.ipv4.conf.all.log_martians` and `net.ipv4.conf.default.log_martians` to `1` enables this feature. Logging these packets allows an administrator to investigate the possibility that an attacker is sending spoofed packets to their system."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.3.9_guidance",
                    "prose": "Set the following parameters in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv4.conf.all.log_martians = 1`\n- `net.ipv4.conf.default.log_martians = 1`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.conf.all.log_martians = 1\" \"net.ipv4.conf.default.log_martians = 1\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n```\n\nRun the following script to set the active kernel parameters:\n\n```\n#!/usr/bin/env bash\n\n{\n sysctl -w net.ipv4.conf.all.log_martians=1\n sysctl -w net.ipv4.conf.default.log_martians=1\n sysctl -w net.ipv4.route.flush=1\n}\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.3.9_assessment-method",
                    "prose": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n- `net.ipv4.conf.all.log_martians` is set to `1`\n- `net.ipv4.conf.default.log_martians` is set to `1`\n\n**Note:** kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_ipv6_disabled=\"\" # Clear output variables\n a_parlist=(\"net.ipv4.conf.all.log_martians=1\" \"net.ipv4.conf.default.log_martians=1\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n f_ipv6_chk()\n {\n l_ipv6_disabled=\"\"\n ! grep -Pqs -- '^\\h*0\\b' /sys/module/ipv6/parameters/disable && l_ipv6_disabled=\"yes\"\n if sysctl net.ipv6.conf.all.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\h*=\\h*1\\b\" && \\\n sysctl net.ipv6.conf.default.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\h*=\\h*1\\b\"; then\n l_ipv6_disabled=\"yes\"\n fi\n [ -z \"$l_ipv6_disabled\" ] && l_ipv6_disabled=\"no\"\n }\n f_kernel_parameter_chk()\n {\n l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\"\n if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n fi\n unset A_out; declare -A A_out # Check durable setting (files)\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n l_kpar=\"${l_kpar//\\//.}\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n fi\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n fi\n done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n if grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n [ -z \"$l_ipv6_disabled\" ] && f_ipv6_chk\n if [ \"$l_ipv6_disabled\" = \"yes\" ]; then\n l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n else\n f_kernel_parameter_chk\n fi\n else\n f_kernel_parameter_chk\n fi\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n unset a_parlist; unset A_out # unset arrays\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.3.10",
                "title": "Ensure tcp syn cookies is enabled",
                "props": [
                  {
                    "name": "label",
                    "value": "3.3.10"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.3.10_statement",
                    "prose": "When `tcp_syncookies` is set, the kernel will handle TCP SYN packets normally until the half-open connection queue is full, at which time, the SYN cookie functionality kicks in. SYN cookies work by not using the SYN queue at all. Instead, the kernel simply replies to the SYN with a SYN/ACK, but will include a specially crafted TCP sequence number that encodes the source and destination IP address and port number and the time the packet was sent. A legitimate connection would send the ACK packet of the three way handshake with the specially crafted sequence number. This allows the system to verify that it has received a valid response to a SYN cookie and allow the connection, even though there is no corresponding SYN in the queue."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.3.10_assessment-objective",
                    "prose": "Rationale: Attackers use SYN flood attacks to perform a denial of service attacked on a system by sending many SYN packets without completing the three way handshake. This will quickly use up slots in the kernel's half-open connection queue and prevent legitimate connections from succeeding. Setting `net.ipv4.tcp_syncookies` to `1` enables SYN cookies, allowing the system to keep accepting valid connections, even if under a denial of service attack."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.3.10_guidance",
                    "prose": "Set the following parameter in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv4.tcp_syncookies = 1`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.tcp_syncookies = 1\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n```\n\nRun the following script to set the active kernel parameters:\n\n```\n#!/usr/bin/env bash\n\n{\n sysctl -w net.ipv4.tcp_syncookies=1\n sysctl -w net.ipv4.route.flush=1\n}\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.3.10_assessment-method",
                    "prose": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file:\n- `net.ipv4.tcp_syncookies` is set to `1`\n\n**Note:** kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_ipv6_disabled=\"\" # Clear output variables\n a_parlist=(\"net.ipv4.tcp_syncookies=1\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n f_ipv6_chk()\n {\n l_ipv6_disabled=\"\"\n ! grep -Pqs -- '^\\h*0\\b' /sys/module/ipv6/parameters/disable && l_ipv6_disabled=\"yes\"\n if sysctl net.ipv6.conf.all.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\h*=\\h*1\\b\" && \\\n sysctl net.ipv6.conf.default.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\h*=\\h*1\\b\"; then\n l_ipv6_disabled=\"yes\"\n fi\n [ -z \"$l_ipv6_disabled\" ] && l_ipv6_disabled=\"no\"\n }\n f_kernel_parameter_chk()\n {\n l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\"\n if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n fi\n unset A_out; declare -A A_out # Check durable setting (files)\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n l_kpar=\"${l_kpar//\\//.}\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n fi\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n fi\n done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n if grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n [ -z \"$l_ipv6_disabled\" ] && f_ipv6_chk\n if [ \"$l_ipv6_disabled\" = \"yes\" ]; then\n l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n else\n f_kernel_parameter_chk\n fi\n else\n f_kernel_parameter_chk\n fi\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n unset a_parlist; unset A_out # unset arrays\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-3.3.11",
                "title": "Ensure ipv6 router advertisements are not accepted",
                "props": [
                  {
                    "name": "label",
                    "value": "3.3.11"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-3.3.11_statement",
                    "prose": "Routers periodically multicast Router Advertisement messages to announce their availability and convey information to neighboring nodes that enable them to be automatically configured on the network.\n\n`net.ipv6.conf.all.accept_ra` and `net.ipv6.conf.default.accept_ra` determine the systems ability to accept these advertisements"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-3.3.11_assessment-objective",
                    "prose": "Rationale: It is recommended that systems do not accept router advertisements as they could be tricked into routing traffic to compromised machines. Setting hard routes within the system (usually a single default route to a trusted router) protects the system from bad routes. Setting `net.ipv6.conf.all.accept_ra` and `net.ipv6.conf.default.accept_ra` to `0` disables the system's ability to accept IPv6 router advertisements."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-3.3.11_guidance",
                    "prose": "**- IF -** IPv6 is enabled on the system:\n\nSet the following parameters in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n- `net.ipv6.conf.all.accept_ra = 0`\n- `net.ipv6.conf.default.accept_ra = 0`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv6.conf.all.accept_ra = 0\" \"net.ipv6.conf.default.accept_ra = 0\" >> /etc/sysctl.d/60-netipv6_sysctl.conf\n```\n\nRun the following script to set the active kernel parameters:\n\n```\n#!/usr/bin/env bash\n\n{\n sysctl -w net.ipv6.conf.all.accept_ra=0\n sysctl -w net.ipv6.conf.default.accept_ra=0\n sysctl -w net.ipv6.route.flush=1\n}\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-3.3.11_assessment-method",
                    "prose": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n- `net.ipv6.conf.all.accept_ra` is set to `0`\n- `net.ipv6.conf.default.accept_ra` is set to `0`\n\n**Note:** \n- kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n- IPv6 kernel parameters only apply to systems where IPv6 is enabled \n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_ipv6_disabled=\"\" # Clear output variables\n a_parlist=(\"net.ipv6.conf.all.accept_ra=0\" \"net.ipv6.conf.default.accept_ra=0\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n f_ipv6_chk()\n {\n l_ipv6_disabled=\"\"\n ! grep -Pqs -- '^\\h*0\\b' /sys/module/ipv6/parameters/disable && l_ipv6_disabled=\"yes\"\n if sysctl net.ipv6.conf.all.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\h*=\\h*1\\b\" && \\\n sysctl net.ipv6.conf.default.disable_ipv6 | grep -Pqs -- \"^\\h*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\h*=\\h*1\\b\"; then\n l_ipv6_disabled=\"yes\"\n fi\n [ -z \"$l_ipv6_disabled\" ] && l_ipv6_disabled=\"no\"\n }\n f_kernel_parameter_chk()\n {\n l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\"\n if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n fi\n unset A_out; declare -A A_out # Check durable setting (files)\n while read -r l_out; do\n if [ -n \"$l_out\" ]; then\n if [[ $l_out =~ ^\\s*# ]]; then\n l_file=\"${l_out//# /}\"\n else\n l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n fi\n fi\n done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n l_kpar=\"${l_kpar//\\//.}\"\n [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n fi\n if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n fi\n done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n else\n l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n fi\n }\n while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n if grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n [ -z \"$l_ipv6_disabled\" ] && f_ipv6_chk\n if [ \"$l_ipv6_disabled\" = \"yes\" ]; then\n l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n else\n f_kernel_parameter_chk\n fi\n else\n f_kernel_parameter_chk\n fi\n done < <(printf '%s\\n' \"${a_parlist[@]}\")\n l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n unset a_parlist; unset A_out # unset arrays\n if [ -z \"$l_output2\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          }
        ]
      },
      {
        "id": "section-4",
        "title": "Host Based Firewall",
        "props": [
          {
            "name": "label",
            "value": "4"
          }
        ],
        "controls": [],
        "groups": [
          {
            "id": "section-4-1",
            "title": "Configure a firewall utility",
            "props": [
              {
                "name": "label",
                "value": "4.1"
              }
            ],
            "controls": [
              {
                "id": "cis-4.1.1",
                "title": "Ensure nftables is installed",
                "props": [
                  {
                    "name": "label",
                    "value": "4.1.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-4.1.1_statement",
                    "prose": "nftables provides a new in-kernel packet classification framework that is based on a network-specific Virtual Machine (VM) and a new nft userspace command line tool. \n\nnftables reuses the existing Netfilter subsystems such as the existing hook infrastructure, the connection tracking system, NAT, userspace queuing and logging subsystem."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-4.1.1_assessment-objective",
                    "prose": "Rationale: nftables is a subsystem of the Linux kernel that can protect against threats originating from within a corporate network to include malicious mobile code and poorly configured software on a host.\nImpact: Changing firewall settings while connected over the network can result in being locked out of the system."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-4.1.1_guidance",
                    "prose": "Run the following command to install `nftables`\n\n```\n# dnf install nftables\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-4.1.1_assessment-method",
                    "prose": "Run the following command to verify that `nftables` is installed:\n```\n# rpm -q nftables\n\nnftables-<version>\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-4.1.2",
                "title": "Ensure a single firewall configuration utility is in use",
                "props": [
                  {
                    "name": "label",
                    "value": "4.1.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-4.1.2_statement",
                    "prose": "In Linux security, employing a single, effective firewall configuration utility is crucial. Firewalls act as digital gatekeepers by filtering network traffic based on rules. Proper firewall configurations ensure that only legitimate traffic gets processed, reducing the system\u2019s exposure to potential threats. The choice between FirewallD and NFTables depends on organizational specific needs:\n\n`FirewallD` - Is a firewall service daemon that provides a dynamic customizable host-based firewall with a D-Bus interface. Being dynamic, it enables creating, changing, and deleting the rules without the necessity to restart the firewall daemon each time the rules are changed.\n\n`NFTables` - Includes the nft utility for configuration of the nftables subsystem of the Linux kernel.\n\n**Notes:** \n- firewalld with nftables backend does not support passing custom nftables rules to firewalld, using the `--direct` option.\n- In order to configure firewall rules for nftables, a firewall utility needs to be installed and active of the system. The use of more than one firewall utility may produce unexpected results.\n- Allow port 22(ssh) needs to be updated to only allow systems requiring ssh connectivity to connect, as per site policy."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-4.1.2_assessment-objective",
                    "prose": "Rationale: Proper configuration of a single firewall utility minimizes cyber threats and protects services and data, while avoiding vulnerabilities like open ports or exposed services. Standardizing on a single tool simplifies management, reduces errors, and fortifies security across Linux systems."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-4.1.2_guidance",
                    "prose": "Run the following script to ensure that a single firewall utility is in use on the system:\n\n```\n#!/usr/bin/env bash\n\n{\n l_fwd_status=\"\" l_nft_status=\"\" l_fwutil_status=\"\"\n # Determine FirewallD utility Status\n rpm -q firewalld > /dev/null 2>&1 && l_fwd_status=\"$(systemctl is-enabled firewalld.service):$(systemctl is-active firewalld.service)\"\n # Determine NFTables utility Status\n rpm -q nftables > /dev/null 2>&1 && l_nft_status=\"$(systemctl is-enabled nftables.service):$(systemctl is-active nftables.service)\"\n l_fwutil_status=\"$l_fwd_status:$l_nft_status\"\n case $l_fwutil_status in\n enabled:active:masked:inactive|enabled:active:disabled:inactive) \n echo -e \"\\n - FirewallD utility is in use, enabled and active\\n - NFTables utility is correctly disabled or masked and inactive\\n - no remediation required\" ;;\n masked:inactive:enabled:active|disabled:inactive:enabled:active) \n echo -e \"\\n - NFTables utility is in use, enabled and active\\n - FirewallD utility is correctly disabled or masked and inactive\\n - no remediation required\" ;;\n enabled:active:enabled:active)\n echo -e \"\\n - Both FirewallD and NFTables utilities are enabled and active\\n - stopping and masking NFTables utility\"\n systemctl stop nftables && systemctl --now mask nftables ;;\n enabled:*:enabled:*)\n echo -e \"\\n - Both FirewallD and NFTables utilities are enabled\\n - remediating\"\n if [ \"$(awk -F: '{print $2}' <<< \"$l_fwutil_status\")\" = \"active\" ] && [ \"$(awk -F: '{print $4}' <<< \"$l_fwutil_status\")\" = \"inactive\" ]; then\n echo \" - masking NFTables utility\"\n systemctl stop nftables && systemctl --now mask nftables\n elif [ \"$(awk -F: '{print $4}' <<< \"$l_fwutil_status\")\" = \"active\" ] && [ \"$(awk -F: '{print $2}' <<< \"$l_fwutil_status\")\" = \"inactive\" ]; then\n echo \" - masking FirewallD utility\"\n systemctl stop firewalld && systemctl --now mask firewalld\n fi ;;\n *:active:*:active) \n echo -e \"\\n - Both FirewallD and NFTables utilities are active\\n - remediating\"\n if [ \"$(awk -F: '{print $1}' <<< \"$l_fwutil_status\")\" = \"enabled\" ] && [ \"$(awk -F: '{print $3}' <<< \"$l_fwutil_status\")\" != \"enabled\" ]; then\n echo \" - stopping and masking NFTables utility\"\n systemctl stop nftables && systemctl --now mask nftables\n elif [ \"$(awk -F: '{print $3}' <<< \"$l_fwutil_status\")\" = \"enabled\" ] && [ \"$(awk -F: '{print $1}' <<< \"$l_fwutil_status\")\" != \"enabled\" ]; then\n echo \" - stopping and masking FirewallD utility\"\n systemctl stop firewalld && systemctl --now mask firewalld\n fi ;;\n :enabled:active) \n echo -e \"\\n - NFTables utility is in use, enabled, and active\\n - FirewallD package is not installed\\n - no remediation required\" ;;\n :) \n echo -e \"\\n - Neither FirewallD or NFTables is installed.\\n - remediating\\n - installing NFTables\"\n echo -e \"\\n - Configure only ONE firewall either NFTables OR Firewalld and follow the according subsection to complete this remediation process\"\n dnf -q install nftables ;;\n *:*:) \n echo -e \"\\n - NFTables package is not installed on the system\\n - remediating\\n - installing NFTables\"\n echo -e \"\\n - Configure only ONE firewall either NFTables OR Firewalld and follow the according subsection to complete this remediation process\"\n dnf -q install nftables ;;\n *) \n echo -e \"\\n - Unable to determine firewall state\" \n echo -e \"\\n - MANUAL REMEDIATION REQUIRED: Configure only ONE firewall either NFTables OR Firewalld\" ;;\n esac\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-4.1.2_assessment-method",
                    "prose": "Run the following script to verify that a single firewall utility is in use on the system:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_fwd_status=\"\" l_nft_status=\"\" l_fwutil_status=\"\"\n # Determine FirewallD utility Status\n rpm -q firewalld > /dev/null 2>&1 && l_fwd_status=\"$(systemctl is-enabled firewalld.service):$(systemctl is-active firewalld.service)\"\n # Determine NFTables utility Status\n rpm -q nftables > /dev/null 2>&1 && l_nft_status=\"$(systemctl is-enabled nftables.service):$(systemctl is-active nftables.service)\"\n l_fwutil_status=\"$l_fwd_status:$l_nft_status\"\n case $l_fwutil_status in\n enabled:active:masked:inactive|enabled:active:disabled:inactive) \n l_output=\"\\n - FirewallD utility is in use, enabled and active\\n - NFTables utility is correctly disabled or masked and inactive\\n - Only configure the recommendations found in the Configure Firewalld subsection\" ;;\n masked:inactive:enabled:active|disabled:inactive:enabled:active) \n l_output=\"\\n - NFTables utility is in use, enabled and active\\n - FirewallD utility is correctly disabled or masked and inactive\\n - Only configure the recommendations found in the Configure NFTables subsection\" ;;\n enabled:active:enabled:active)\n l_output2=\"\\n - Both FirewallD and NFTables utilities are enabled and active. Configure only ONE firewall either NFTables OR Firewalld\" ;;\n enabled:*:enabled:*)\n l_output2=\"\\n - Both FirewallD and NFTables utilities are enabled\\n - Configure only ONE firewall: either NFTables OR Firewalld\" ;;\n *:active:*:active) \n l_output2=\"\\n - Both FirewallD and NFTables utilities are enabled\\n - Configure only ONE firewall: either NFTables OR Firewalld\" ;;\n :enabled:active) \n l_output=\"\\n - NFTables utility is in use, enabled, and active\\n - FirewallD package is not installed\\n - Only configure the recommendations found in the Configure NFTables subsection\" ;;\n :) \n l_output2=\"\\n - Neither FirewallD or NFTables is installed. Configure only ONE firewall either NFTables OR Firewalld\" ;;\n *:*:) \n l_output2=\"\\n - NFTables package is not installed on the system. Install NFTables and Configure only ONE firewall either NFTables OR Firewalld\" ;;\n *) \n l_output2=\"\\n - Unable to determine firewall state. Configure only ONE firewall either NFTables OR Firewalld\" ;;\n esac\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Results:\\n ** Pass **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Results:\\n ** Fail **\\n$l_output2\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-4-2",
            "title": "Configure FirewallD",
            "props": [
              {
                "name": "label",
                "value": "4.2"
              }
            ],
            "controls": [
              {
                "id": "cis-4.2.1",
                "title": "Ensure firewalld drops unnecessary services and ports",
                "props": [
                  {
                    "name": "label",
                    "value": "4.2.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-4.2.1_statement",
                    "prose": "Services and ports can be accepted or explicitly rejected or dropped by a zone.\n\nFor every zone, you can set a default behavior that handles incoming traffic that is not further specified. Such behavior is defined by setting the target of the zone. There are three options - default, ACCEPT, REJECT, and DROP.\n- ACCEPT - you accept all incoming packets except those disabled by a specific rule.\n- REJECT - you disable all incoming packets except those that you have allowed in specific rules and the source machine is informed about the rejection.\n- DROP - you disable all incoming packets except those that you have allowed in specific rules and no information sent to the source machine.\n\n**Note:** \n- **- IF -** ```NFTables``` is being used, this recommendation can be skipped.\n- Allow port 22(ssh) needs to be updated to only allow systems requiring ssh connectivity to connect, as per site policy."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-4.2.1_assessment-objective",
                    "prose": "Rationale: To reduce the attack surface of a system, all services and ports should be blocked unless required"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-4.2.1_guidance",
                    "prose": "If Firewalld is in use on the system:\n\nRun the following command to remove an unnecessary service:\n\n```\n# firewall-cmd --remove-service=<service>\n```\n\n_Example:_\n```\n# firewall-cmd --remove-service=cockpit\n```\n\nRun the following command to remove an unnecessary port:\n\n```\n# firewall-cmd --remove-port=<port-number>/<port-type>\n```\n\n_Example:_\n```\n# firewall-cmd --remove-port=25/tcp\n```\n\nRun the following command to make new settings persistent:\n```\n# firewall-cmd --runtime-to-permanent\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-4.2.1_assessment-method",
                    "prose": "Run the following command and review output to ensure that listed services and ports follow site policy. \n```\n# systemctl is-enabled firewalld.service | grep -q 'enabled' && firewall-cmd --list-all --zone=\"$(firewall-cmd --list-all | awk '/\\(active\\)/ { print $1 }')\" | grep -P -- '^\\h*(services:|ports:)'\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-4.2.2",
                "title": "Ensure firewalld loopback traffic is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "4.2.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-4.2.2_statement",
                    "prose": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-4.2.2_assessment-objective",
                    "prose": "Rationale: Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-4.2.2_guidance",
                    "prose": "Run the following script to implement the loopback rules:\n\n```\n#!/usr/bin/env bash\n\n{ l_hbfw=\"\"\n if systemctl is-enabled firewalld.service | grep -q 'enabled'; then\n echo -e \"\\n - FirewallD is in use on the system\" && l_hbfw=\"fwd\"\n elif systemctl is-enabled nftables.service 2>/dev/null | grep -q 'enabled'; then\n echo -e \"\\n - nftables is in use on the system \\n - Recommendation is NA \\n - Remediation Complete\" && l_hbfw=\"nft\"\n fi\n if [ \"$l_hbfw\" = \"fwd\" ]; then \n l_ipsaddr=\"$(nft list ruleset | awk '/filter_IN_public_deny|hook\\s+input\\s+/,/\\}\\s*(#.*)?$/' | grep -P -- 'ip\\h+saddr')\"\n if ! nft list ruleset | awk '/hook\\s+input\\s+/,/\\}\\s*(#.*)?$/' | grep -Pq -- '\\H+\\h+\"lo\"\\h+accept'; then\n echo -e \"\\n - Enabling input to accept for loopback address\"\n firewall-cmd --permanent --zone=trusted --add-interface=lo\n firewall-cmd --reload\n else \n echo -e \"\\n - firewalld input correctly set to accept for loopback address\" \n if ! grep -Pq -- 'ip\\h+saddr\\h+127\\.0\\.0\\.0\\/8\\h+(counter\\h+packets\\h+\\d+\\h+bytes\\h+\\d+\\h+)?drop' <<< \"$l_ipsaddr\" && ! grep -Pq -- 'ip\\h+daddr\\h+\\!\\=\\h+127\\.0\\.0\\.1\\h+ip\\h+saddr\\h+127\\.0\\.0\\.1\\h+drop' <<< \"$l_ipsaddr\"; then\n echo -e \"\\n - Setting IPv4 network traffic from loopback address to drop\"\n firewall-cmd --permanent --add-rich-rule='rule family=ipv4 source address=\"127.0.0.1\" destination not address=\"127.0.0.1\" drop'\n firewall-cmd --permanent --zone=trusted --add-rich-rule='rule family=ipv4 source address=\"127.0.0.1\" destination not address=\"127.0.0.1\" drop'\n firewall-cmd --reload\n else\n echo -e \"\\n - firewalld correctly set IPv4 network traffic from loopback address to drop\"\n fi\n if grep -Pq -- '^\\h*0\\h*$' /sys/module/ipv6/parameters/disable; then\n l_ip6saddr=\"$(nft list ruleset | awk '/filter_IN_public_deny|hook input/,/}/' | grep 'ip6 saddr')\"\n if ! grep -Pq 'ip6\\h+saddr\\h+::1\\h+(counter\\h+packets\\h+\\d+\\h+bytes\\h+\\d+\\h+)?drop' <<< \"$l_ip6saddr\" && ! grep -Pq -- 'ip6\\h+daddr\\h+\\!=\\h+::1\\h+ip6\\h+saddr\\h+::1\\h+drop' <<< \"$l_ip6saddr\"; then\n echo -e \"\\n - Setting IPv6 network traffic from loopback address to drop\"\n firewall-cmd --permanent --add-rich-rule='rule family=ipv6 source address=\"::1\" destination not address=\"::1\" drop'\n firewall-cmd --permanent --zone=trusted --add-rich-rule='rule family=ipv6 source address=\"::1\" destination not address=\"::1\" drop'\n firewall-cmd --reload\n else\n echo -e \"\\n - firewalld correctly set IPv6 network traffic from loopback address to drop\"\n fi\n fi\n fi\n fi\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-4.2.2_assessment-method",
                    "prose": "Run the following script to verify that the loopback interface is configured:\n- `rule family=ipv4 source address=\"127.0.0.1\" destination not address=\"127.0.0.1\" drop`\n- `rule family=ipv6 source address=\"::1\" destination not address=\"::1\" drop`\n- `rule family=ipv6 source address=\"::1\" destination not address=\"::1\" drop`\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_hbfw=\"\"\n if systemctl is-enabled firewalld.service | grep -q 'enabled'; then\n echo -e \"\\n - FirewallD is in use on the system\" && l_hbfw=\"fwd\"\n elif systemctl is-enabled nftables.service 2>/dev/null | grep -q 'enabled'; then\n echo -e \"\\n - nftables is in use on the system \\n - Recommendation is NA\" && l_hbfw=\"nft\"\n else\n echo -e \"\\n - Error - Neither FirewallD or NFTables is enabled\\n - Please follow recommendation: \\\"Ensure a single firewall configuration utility is in use\\\"\"\n fi\n if [ \"$l_hbfw\" = \"fwd\" ]; then\n if nft list ruleset | awk '/hook\\s+input\\s+/,/\\}\\s*(#.*)?$/' | grep -Pq -- '\\H+\\h+\"lo\"\\h+accept'; then\n l_output=\"$l_output\\n - Network traffic to the loopback address is correctly set to accept\"\n else\n l_output2=\"$l_output2\\n - Network traffic to the loopback address is not set to accept\"\n fi\n l_ipsaddr=\"$(nft list ruleset | awk '/filter_IN_public_deny|hook\\s+input\\s+/,/\\}\\s*(#.*)?$/' | grep -P -- 'ip\\h+saddr')\"\n if grep -Pq -- 'ip\\h+saddr\\h+127\\.0\\.0\\.0\\/8\\h+(counter\\h+packets\\h+\\d+\\h+bytes\\h+\\d+\\h+)?drop' <<< \"$l_ipsaddr\" || grep -Pq -- 'ip\\h+daddr\\h+\\!\\=\\h+127\\.0\\.0\\.1\\h+ip\\h+saddr\\h+127\\.0\\.0\\.1\\h+drop' <<< \"$l_ipsaddr\"; then\n l_output=\"$l_output\\n - IPv4 network traffic from loopback address correctly set to drop\"\n else\n l_output2=\"$l_output2\\n - IPv4 network traffic from loopback address not set to drop\"\n fi\n if grep -Pq -- '^\\h*0\\h*$' /sys/module/ipv6/parameters/disable; then\n l_ip6saddr=\"$(nft list ruleset | awk '/filter_IN_public_deny|hook input/,/}/' | grep 'ip6 saddr')\"\n if grep -Pq 'ip6\\h+saddr\\h+::1\\h+(counter\\h+packets\\h+\\d+\\h+bytes\\h+\\d+\\h+)?drop' <<< \"$l_ip6saddr\" || grep -Pq -- 'ip6\\h+daddr\\h+\\!=\\h+::1\\h+ip6\\h+saddr\\h+::1\\h+drop' <<< \"$l_ip6saddr\"; then\n l_output=\"$l_output\\n - IPv6 network traffic from loopback address correctly set to drop\"\n else\n l_output2=\"$l_output2\\n - IPv6 network traffic from loopback address not set to drop\"\n fi\n fi\n fi\n if [ \"$l_hbfw\" = \"nft\" ] || [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n *** PASS ***\\n$l_output\"\n else\n echo -e \"\\n- Audit Result:\\n *** FAIL ***\\n$l_output2\\n\\n - Correctly set:\\n$l_output\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-4-3",
            "title": "Configure NFTables",
            "props": [
              {
                "name": "label",
                "value": "4.3"
              }
            ],
            "controls": [
              {
                "id": "cis-4.3.1",
                "title": "Ensure nftables base chains exist",
                "props": [
                  {
                    "name": "label",
                    "value": "4.3.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-4.3.1_statement",
                    "prose": "Chains are containers for rules. They exist in two kinds, base chains and regular chains. A base chain is an entry point for packets from the networking stack, a regular chain may be used as jump target and is used for better rule organization.\n\n**Note:** **- IF -** `Firewalld` is in use, this recommendation can be skipped."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-4.3.1_assessment-objective",
                    "prose": "Rationale: If a base chain doesn't exist with a hook for input, forward, and delete, packets that would flow through those chains will not be touched by nftables.\nImpact: If configuring over ssh, `creating` a `base chain` with a policy of `drop` will cause loss of connectivity.\n\nEnsure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-4.3.1_guidance",
                    "prose": "**- IF -** `NFTables` utility is in use on your system:\n\nRun the following command to create the base chains:\n\n```\n# nft create chain inet \n\n <base chain name> { type filter hook <(input|forward|output)> priority 0 \\; }\n```\n\n_Example:_\n```\n# nft create chain inet filter input { type filter hook input priority 0 \\; }\n# nft create chain inet filter forward { type filter hook forward priority 0 \\; }\n# nft create chain inet filter output { type filter hook output priority 0 \\; }\n```\n\n**Note:** use the `add` command if the `create` command returns an error due to the chain already existing."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-4.3.1_assessment-method",
                    "prose": "**- IF -** `NFTables` utility is in use on your system:\n\nRun the following command to verify that base chains exist for the `INPUT` filter hook:\n\n```\n# nft list ruleset | grep 'hook input'\n```\n\nOutput should include:\n\n```\ntype filter hook input\n```\n\nRun the following command to verify that base chains exist for the `FORWARD` filter hook:\n\n```\n# nft list ruleset | grep 'hook forward'\n```\n\nOutput should include:\n\n```\ntype filter hook forward\n```\n\nRun the following command to verify that base chains exist for the `OUTPUT` filter hook:\n\n```\n# nft list ruleset | grep 'hook output'\n```\n\nOutput should include:\n\n```\ntype filter hook output\n```\n\n**Note:** When using FirewallD the base chains are installed by default",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-4.3.2",
                "title": "Ensure nftables established connections are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "4.3.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-4.3.2_statement",
                    "prose": "Configure the firewall rules for new outbound and established connections\n\n**Note:** **- IF -** `Firewalld` is in use, this recommendation can be skipped."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-4.3.2_assessment-objective",
                    "prose": "Rationale: If rules are not in place for established connections, all packets will be dropped by the default policy preventing network usage."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-4.3.2_guidance",
                    "prose": "**- IF -** `NFTables` utility is in use on your system:\n\nConfigure nftables in accordance with site policy. The following commands will implement a policy to allow all established connections:\n\n```\n# systemctl is-enabled nftables.service | grep -q 'enabled' && nft add rule inet filter input ip protocol tcp ct state established accept\n# systemctl is-enabled nftables.service | grep -q 'enabled' && nft add rule inet filter input ip protocol udp ct state established accept\n# systemctl is-enabled nftables.service | grep -q 'enabled' && nft add rule inet filter input ip protocol icmp ct state established accept\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-4.3.2_assessment-method",
                    "prose": "**- IF -** `NFTables` utility is in use on your system:\n\nRun the following commands and verify all rules for established incoming connections match site policy:\n\n```\n# systemctl is-enabled nftables.service | grep -q 'enabled' && nft list ruleset | awk '/hook input/,/}/' | grep 'ct state'\n```\n\nOutput should be similar to:\n```\nip protocol tcp ct state established accept\nip protocol udp ct state established accept\nip protocol icmp ct state established accept\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-4.3.3",
                "title": "Ensure nftables default deny firewall policy",
                "props": [
                  {
                    "name": "label",
                    "value": "4.3.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-4.3.3_statement",
                    "prose": "Base chain policy is the default verdict that will be applied to packets reaching the end of the chain."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-4.3.3_assessment-objective",
                    "prose": "Rationale: There are two policies: accept (Default) and drop. If the policy is set to `accept`, the firewall will accept any packet that is not configured to be denied and the packet will continue traversing the network stack.\n\nIt is easier to explicitly permit acceptable usage than to deny unacceptable usage.\n\n**Note:** \n- **- IF -** `Firewalld` is in use, this recommendation can be skipped.\n- Changing firewall settings while connected over the network can result in being locked out of the system.\nImpact: If configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity.\n\n**Ensure that a rule allowing `ssh` has been added to the base chain prior to setting the base chain's policy to drop**"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-4.3.3_guidance",
                    "prose": "**- IF -** `NFTables` utility is in use on your system:\n\nRun the following command for the base chains with the input, forward, and output hooks to implement a default DROP policy:\n\n```\n# nft chain \n\n <chain name> { policy drop \\; }\n```\n\n_Example:_\n```\n# nft chain inet filter input { policy drop \\; }\n# nft chain inet filter forward { policy drop \\; }\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-4.3.3_assessment-method",
                    "prose": "**- IF -** `NFTables` utility is in use on your system:\n\nRun the following commands and verify that base chains contain a policy of `DROP`. \n\n```\n# systemctl --quiet is-enabled nftables.service && nft list ruleset | grep 'hook input' | grep -v 'policy drop'\n```\nNothing should be returned\n```\n# systemctl --quiet is-enabled nftables.service && nft list ruleset | grep 'hook forward' | grep -v 'policy drop'\n```\nNothing should be returned",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-4.3.4",
                "title": "Ensure nftables loopback traffic is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "4.3.4"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-4.3.4_statement",
                    "prose": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-4.3.4_assessment-objective",
                    "prose": "Rationale: Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-4.3.4_guidance",
                    "prose": "Run the following script to implement the loopback rules:\n\n```\n#!/usr/bin/env bash\n\n{ l_hbfw=\"\"\n if systemctl is-enabled firewalld.service 2>/dev/null | grep -q 'enabled'; then\n echo -e \"\\n - FirewallD is in use on the system\\n - Recommendation is NA \\n - Remediation Complete\" && l_hbfw=\"fwd\"\n elif systemctl is-enabled nftables.service | grep -q 'enabled'; then\n l_hbfw=\"nft\"\n fi\n if [ \"$l_hbfw\" = \"nft\" ]; then \n l_ipsaddr=\"$(nft list ruleset | awk '/filter_IN_public_deny|hook\\s+input\\s+/,/\\}\\s*(#.*)?$/' | grep -P -- 'ip\\h+saddr')\"\n if ! nft list ruleset | awk '/hook\\s+input\\s+/,/\\}\\s*(#.*)?$/' | grep -Pq -- '\\H+\\h+\"lo\"\\h+accept'; then\n echo -e \"\\n - Enabling input to accept for loopback address\"\n nft add rule inet filter input iif lo accept\n else\n echo -e \"\\n -nftables input correctly configured to accept for loopback address\" \n fi\n if ! grep -Pq -- 'ip\\h+saddr\\h+127\\.0\\.0\\.0\\/8\\h+(counter\\h+packets\\h+\\d+\\h+bytes\\h+\\d+\\h+)?drop' <<< \"$l_ipsaddr\" && ! grep -Pq -- 'ip\\h+daddr\\h+\\!\\=\\h+127\\.0\\.0\\.1\\h+ip\\h+saddr\\h+127\\.0\\.0\\.1\\h+drop' <<< \"$l_ipsaddr\"; then\n echo -e \"\\n - Setting IPv4 network traffic from loopback address to drop\"\n nft add rule inet filter input ip saddr 127.0.0.0/8 counter drop\n else\n echo -e \"\\n -nftables correctly configured IPv4 network traffic from loopback address to drop\"\n fi\n if grep -Pq -- '^\\h*0\\h*$' /sys/module/ipv6/parameters/disable; then\n l_ip6saddr=\"$(nft list ruleset | awk '/filter_IN_public_deny|hook input/,/}/' | grep 'ip6 saddr')\"\n if ! grep -Pq 'ip6\\h+saddr\\h+::1\\h+(counter\\h+packets\\h+\\d+\\h+bytes\\h+\\d+\\h+)?drop' <<< \"$l_ip6saddr\" && ! grep -Pq -- 'ip6\\h+daddr\\h+\\!=\\h+::1\\h+ip6\\h+saddr\\h+::1\\h+drop' <<< \"$l_ip6saddr\"; then\n echo -e \"\\n - Setting IPv6 network traffic from loopback address to drop\" \n nft add rule inet filter input ip6 saddr ::1 counter drop\n else \n echo -e \"\\n - nftables IPv6 network traffic from loopback address to drop\" \n fi\n fi\n fi\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-4.3.4_assessment-method",
                    "prose": "Run the following script to verify that the loopback interface is configured:\n\n- `iif lo accept`\n- `iif != lo ip saddr 127.0.0.1/8 drop`\n- `iif != lo ip6 saddr ::1/128 drop`\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_hbfw=\"\"\n if systemctl is-enabled firewalld.service 2>/dev/null | grep -q 'enabled'; then\n echo -e \"\\n - FirewallD is in use on the system\\n - Recommendation is NA\" && l_hbfw=\"fwd\"\n elif systemctl is-enabled nftables.service | grep -q 'enabled'; then\n l_hbfw=\"nft\"\n else\n echo -e \"\\n - Error - Neither FirewallD or NFTables is enabled\\n - Please follow recommendation: \\\"Ensure a single firewall configuration utility is in use\\\"\"\n l_output2=\"*** FAIL *** Please follow recommendation: Ensure a single firewall configuration utility is in use\"\n fi\n if [ \"$l_hbfw\" = \"nft\" ]; then\n if nft list ruleset | awk '/hook\\s+input\\s+/,/\\}\\s*(#.*)?$/' | grep -Pq -- '\\H+\\h+\"lo\"\\h+accept'; then\n l_output=\"$l_output\\n - Network traffic to the loopback address is correctly set to accept\"\n else\n l_output2=\"$l_output2\\n - Network traffic to the loopback address is not set to accept\"\n fi\n l_ipsaddr=\"$(nft list ruleset | awk '/filter_IN_public_deny|hook\\s+input\\s+/,/\\}\\s*(#.*)?$/' | grep -P -- 'ip\\h+saddr')\"\n if grep -Pq -- 'ip\\h+saddr\\h+127\\.0\\.0\\.0\\/8\\h+(counter\\h+packets\\h+\\d+\\h+bytes\\h+\\d+\\h+)?drop' <<< \"$l_ipsaddr\" || grep -Pq -- 'ip\\h+daddr\\h+\\!\\=\\h+127\\.0\\.0\\.1\\h+ip\\h+saddr\\h+127\\.0\\.0\\.1\\h+drop' <<< \"$l_ipsaddr\"; then\n l_output=\"$l_output\\n - IPv4 network traffic from loopback address correctly set to drop\"\n else\n l_output2=\"$l_output2\\n - IPv4 network traffic from loopback address not set to drop\"\n fi\n if grep -Pq -- '^\\h*0\\h*$' /sys/module/ipv6/parameters/disable; then\n l_ip6saddr=\"$(nft list ruleset | awk '/filter_IN_public_deny|hook input/,/}/' | grep 'ip6 saddr')\"\n if grep -Pq 'ip6\\h+saddr\\h+::1\\h+(counter\\h+packets\\h+\\d+\\h+bytes\\h+\\d+\\h+)?drop' <<< \"$l_ip6saddr\" || grep -Pq -- 'ip6\\h+daddr\\h+\\!=\\h+::1\\h+ip6\\h+saddr\\h+::1\\h+drop' <<< \"$l_ip6saddr\"; then\n l_output=\"$l_output\\n - IPv6 network traffic from loopback address correctly set to drop\"\n else\n l_output2=\"$l_output2\\n - IPv6 network traffic from loopback address not set to drop\"\n fi\n fi\n fi\n if [ \"$l_hbfw\" = \"fwd\" ] || [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n *** PASS ***\\n$l_output\"\n else\n echo -e \"\\n- Audit Result:\\n *** FAIL ***\\n$l_output2\\n\\n - Correctly set:\\n$l_output\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          }
        ]
      },
      {
        "id": "section-5",
        "title": "Access Control",
        "props": [
          {
            "name": "label",
            "value": "5"
          }
        ],
        "controls": [],
        "groups": [
          {
            "id": "section-5-1",
            "title": "Configure SSH Server",
            "props": [
              {
                "name": "label",
                "value": "5.1"
              }
            ],
            "controls": [
              {
                "id": "cis-5.1.1",
                "title": "Ensure permissions on /etc/ssh/sshd_config are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.1_statement",
                    "prose": "The file `/etc/ssh/sshd_config`, and files ending in `.conf` in the `/etc/ssh/sshd_config.d` directory, contain configuration specifications for `sshd`."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.1_assessment-objective",
                    "prose": "Rationale: configuration specifications for `sshd` need to be protected from unauthorized changes by non-privileged users."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.1_guidance",
                    "prose": "Run the following script to set ownership and permissions on `/etc/ssh/sshd_config` and files ending in `.conf` in the `/etc/ssh/sshd_config.d` directory:\n\n```\n#!/usr/bin/env bash\n\n{\n chmod u-x,og-rwx /etc/ssh/sshd_config\n chown root:root /etc/ssh/sshd_config\n while IFS= read -r -d $'\\0' l_file; do\n if [ -e \"$l_file\" ]; then\n chmod u-x,og-rwx \"$l_file\"\n chown root:root \"$l_file\"\n fi\n done < <(find /etc/ssh/sshd_config.d -type f -print0 2>/dev/null)\n}\n```\n\n**- IF -** other locations are listed in an `Include` statement, `*.conf` files in these locations access should also be modified."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.1_assessment-method",
                    "prose": "Run the following script and verify `/etc/ssh/sshd_config` and files ending in `.conf` in the `/etc/ssh/sshd_config.d` directory are:\n - Mode `0600` or more restrictive\n - Owned by the `root` user\n - Group owned by the group `root`.\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n perm_mask='0177' && maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n SSHD_FILES_CHK()\n {\n while IFS=: read -r l_mode l_user l_group; do\n l_out2=\"\"\n [ $(( $l_mode & $perm_mask )) -gt 0 ] && l_out2=\"$l_out2\\n - Is mode: \\\"$l_mode\\\" should be: \\\"$maxperm\\\" or more restrictive\"\n [ \"$l_user\" != \"root\" ] && l_out2=\"$l_out2\\n - Is owned by \\\"$l_user\\\" should be owned by \\\"root\\\"\"\n [ \"$l_group\" != \"root\" ] && l_out2=\"$l_out2\\n - Is group owned by \\\"$l_user\\\" should be group owned by \\\"root\\\"\"\n if [ -n \"$l_out2\" ]; then\n l_output2=\"$l_output2\\n - File: \\\"$l_file\\\":$l_out2\"\n else\n l_output=\"$l_output\\n - File: \\\"$l_file\\\":\\n - Correct: mode ($l_mode), owner ($l_user), and group owner ($l_group) configured\"\n fi\n done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n }\n [ -e \"/etc/ssh/sshd_config\" ] && l_file=\"/etc/ssh/sshd_config\" && SSHD_FILES_CHK\n while IFS= read -r -d $'\\0' l_file; do\n [ -e \"$l_file\" ] && SSHD_FILES_CHK\n done < <(find -L /etc/ssh/sshd_config.d -type f \\( -perm /077 -o ! -user root -o ! -group root \\) -print0 2>/dev/null)\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n *** PASS ***\\n- * Correctly set * :\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \" - * Correctly set * :\\n$l_output\\n\"\n fi\n}\n```\n\n**- IF -** other locations are listed in an `Include` statement, `*.conf` files in these locations should also be checked.",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.2",
                "title": "Ensure permissions on SSH private host key files are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.2_statement",
                    "prose": "An SSH private key is one of two files used in SSH public key authentication. In this authentication method, the possession of the private key is proof of identity. Only a private key that corresponds to a public key will be able to authenticate successfully. The private keys need to be stored and handled carefully, and no copies of the private key should be distributed."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.2_assessment-objective",
                    "prose": "Rationale: If an unauthorized user obtains the private SSH host key file, the host could be impersonated"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.2_guidance",
                    "prose": "Run the following script to set mode, ownership, and group on the private SSH host key files:\n\n```\n{\n l_output=\"\" l_output2=\"\"\n l_ssh_group_name=\"$(awk -F: '($1 ~ /^(ssh_keys|_?ssh)$/) {print $1}' /etc/group)\"\n f_file_access_fix()\n {\n while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n echo \"File: \\\"$l_file\\\" mode: \\\"$l_file_mode\\\" owner \\\"$l_file_owner\\\" group \\\"$l_file_group\\\"\"\n l_out2=\"\"\n [ \"$l_file_group\" = \"$l_ssh_group_name\" ] && l_pmask=\"0137\" || l_pmask=\"0177\"\n l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\\n - updating to mode: \\:$l_maxperm\\\"\"\n if [ \"l_file_group\" = \"$l_ssh_group_name\" ]; then\n chmod u-x,g-wx,o-rwx \"$l_file\"\n else\n chmod u-x,go-rwx \"$l_file\"\n fi\n fi\n if [ \"$l_file_owner\" != \"root\" ]; then\n l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned by \\\"root\\\"\\n - Changing ownership to \\\"root\\\"\"\n chown root \"$l_file\"\n fi\n if [[ ! \"$l_file_group\" =~ ($l_ssh_group_name|root) ]]; then\n [ -n \"$l_ssh_group_name\" ] && l_new_group=\"$l_ssh_group_name\" || l_new_group=\"root\"\n l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be group owned by: \\\"$l_ssh_group_name\\\" or \\\"root\\\"\\n - Changing group ownership to \\\"$l_new_group\\\"\"\n chgrp \"$l_new_group\" \"$l_file\"\n fi\n if [ -n \"$l_out2\" ]; then\n l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n else\n l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode: \\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner: \\\"$l_file_group\\\" configured\"\n fi\n done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n }\n while IFS= read -r -d $'\\0' l_file; do \n if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n file \"$l_file\" | grep -Piq -- '\\bopenssh\\h+([^#\\n\\r]+\\h+)?private\\h+key\\b' && f_file_access_fix\n fi\n done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- No access changes required\\n\"\n else\n echo -e \"\\n- Remediation results:\\n$l_output2\\n\"\n fi\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.2_assessment-method",
                    "prose": "Run the following script to verify SSH private host key files are owned by the root user and either:\n\n- owned by the group root and mode `0600` or more restrictive\n\n**- OR -**\n\n- owned by the group designated to own openSSH private keys and mode `0640` or more restrictive\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n l_ssh_group_name=\"$(awk -F: '($1 ~ /^(ssh_keys|_?ssh)$/) {print $1}' /etc/group)\"\n f_file_chk()\n {\n while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n l_out2=\"\"\n [ \"$l_file_group\" = \"$l_ssh_group_name\" ] && l_pmask=\"0137\" || l_pmask=\"0177\"\n l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\"\n fi\n if [ \"$l_file_owner\" != \"root\" ]; then\n l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned by \\\"root\\\"\"\n fi\n if [[ ! \"$l_file_group\" =~ ($l_ssh_group_name|root) ]]; then\n l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be group owned by: \\\"$l_ssh_group_name\\\" or \\\"root\\\"\"\n fi\n if [ -n \"$l_out2\" ]; then\n l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n else\n l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode: \\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner: \\\"$l_file_group\\\" configured\"\n fi\n done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n }\n while IFS= read -r -d $'\\0' l_file; do \n if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n file \"$l_file\" | grep -Piq -- '\\bopenssh\\h+([^#\\n\\r]+\\h+)?private\\h+key\\b' && f_file_chk\n fi\n done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n if [ -z \"$l_output2\" ]; then\n [ -z \"$l_output\" ] && l_output=\"\\n - No openSSH private keys found\"\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured * :$l_output\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n - * Correctly configured * :\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.3",
                "title": "Ensure permissions on SSH public host key files are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.3_statement",
                    "prose": "An SSH public key is one of two files used in SSH public key authentication. In this authentication method, a public key is a key that can be used for verifying digital signatures generated using a corresponding private key. Only a public key that corresponds to a private key will be able to authenticate successfully."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.3_assessment-objective",
                    "prose": "Rationale: If a public host key file is modified by an unauthorized user, the SSH service may be compromised."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.3_guidance",
                    "prose": "Run the following script to set mode, ownership, and group on the public SSH host key files:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n l_pmask=\"0133\" && l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n FILE_ACCESS_FIX()\n {\n while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n l_out2=\"\"\n if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\\n - updating to mode: \\:$l_maxperm\\\"\"\n chmod u-x,go-wx\n fi\n if [ \"$l_file_owner\" != \"root\" ]; then\n l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned by \\\"root\\\"\\n - Changing ownership to \\\"root\\\"\"\n chown root \"$l_file\"\n fi\n if [ \"$l_file_group\" != \"root\" ]; then\n l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be group owned by: \\\"root\\\"\\n - Changing group ownership to \\\"root\\\"\"\n chgrp root \"$l_file\"\n fi\n if [ -n \"$l_out2\" ]; then\n l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n else\n l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode: \\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner: \\\"$l_file_group\\\" configured\"\n fi\n done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n }\n while IFS= read -r -d $'\\0' l_file; do \n if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n file \"$l_file\" | grep -Piq -- '\\bopenssh\\h+([^#\\n\\r]+\\h+)?public\\h+key\\b' && FILE_ACCESS_FIX\n fi\n done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- No access changes required\\n\"\n else\n echo -e \"\\n- Remediation results:\\n$l_output2\\n\"\n fi\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.3_assessment-method",
                    "prose": "Run the following command and verify Access does not grant write or execute permissions to group or other for all returned files:\n\nRun the following script to verify SSH public host key files are mode `0644` or more restrictive, owned by the `root` user, and owned by the `root` group:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n l_pmask=\"0133\" && l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n FILE_CHK()\n {\n while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n l_out2=\"\"\n if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\"\n fi\n if [ \"$l_file_owner\" != \"root\" ]; then\n l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned by \\\"root\\\"\"\n fi\n if [ \"$l_file_group\" != \"root\" ]; then\n l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be group owned by group: \\\"root\\\"\"\n fi\n if [ -n \"$l_out2\" ]; then\n l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n else\n l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode: \\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner: \\\"$l_file_group\\\" configured\"\n fi\n done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n }\n while IFS= read -r -d $'\\0' l_file; do \n if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n file \"$l_file\" | grep -Piq -- '\\bopenssh\\h+([^#\\n\\r]+\\h+)?public\\h+key\\b' && FILE_CHK\n fi\n done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n if [ -z \"$l_output2\" ]; then\n [ -z \"$l_output\" ] && l_output=\"\\n - No openSSH public keys found\"\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured * :$l_output\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n - * Correctly configured * :\\n$l_output\\n\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.4",
                "title": "Ensure sshd Ciphers are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.4"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.4_statement",
                    "prose": "This variable limits the ciphers that SSH can use during communication.\n\n**Notes:**\n- Some organizations may have stricter requirements for approved ciphers.\n- Ensure that ciphers used are in compliance with site policy.\n- The only \"strong\" ciphers currently FIPS 140 compliant are:\n - aes256-gcm@openssh.com\n - aes128-gcm@openssh.com\n - aes256-ctr\n - aes192-ctr\n - aes128-ctr"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.4_assessment-objective",
                    "prose": "Rationale: Weak ciphers that are used for authentication to the cryptographic module cannot be relied upon to provide confidentiality or integrity, and system data may be compromised.\n\n- The Triple DES ciphers, as used in SSH, have a birthday bound of approximately four billion blocks, which makes it easier for remote attackers to obtain clear text data via a birthday attack against a long-duration encrypted session, aka a \"Sweet32\" attack.\n- Error handling in the SSH protocol; Client and Server, when using a block cipher algorithm in Cipher Block Chaining (CBC) mode, makes it easier for remote attackers to recover certain plain text data from an arbitrary block of cipher text in an SSH session via unknown vectors."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.4_guidance",
                    "prose": "**Note:**\n- First occurrence of an option takes precedence.\n- Though ciphers may be configured through the `Ciphers` option in the `/etc/ssh/sshd_config` file, it is recommended that the ciphers available to openSSH server are configured through system-wide-crypto-policy\n- If the recommendations in the subsection \"Configure system wide crypto policy\" have been followed, this Audit should be in a passing state. Please review that section before following this Remediation Procedure\n- By default, system-wide-crypto-policy is applied to the openSSH server. If the following defaults don't exist due to modifications or upgrade from a earlier release, the system-wide-crypto-policy may not be included by the openSSH server. It is recommended that these defaults be restored, created, or the line `Include /etc/crypto-policies/back-ends/opensshserver.config` be added before any lines containing the `Cipher` argument.\n- Defaults:\n - The file `/etc/ssh/sshd_config` includes the line: `Include /etc/ssh/sshd_config.d/*.conf`. This line must appear before any lines containing the `Cipher` argument\n - This directory `/etc/ssh/sshd_config.d/` includes a file `/etc/ssh/sshd_config.d/50-redhat.conf`\n - The file `/etc/ssh/sshd_config.d/50-redhat.conf` includes the line `Include /etc/crypto-policies/back-ends/opensshserver.config`\n - The file `/etc/crypto-policies/back-ends/opensshserver.config` is generated by system-wide-crypto-policy\n\n**- IF -** `CVE-2023-48795` has been addressed, and it meets local site policy, `chacha20-poly1305` may be removed from the list of excluded ciphers.\n\nCreate or edit a file in `/etc/crypto-policies/policies/modules/` ending in `.pmod` and add or modify the the following line:\n\n```\ncipher@SSH = -3DES-CBC -AES-128-CBC -AES-192-CBC -AES-256-CBC -CHACHA20-POLY1305\n```\n\n_Example:_\n\n```\n# printf '%s\\n' \"# This is a subpolicy to disable weak ciphers\" \"# for the SSH protocol (libssh and OpenSSH)\" \"cipher@SSH = -3DES-CBC -AES-128-CBC -AES-192-CBC -AES-256-CBC -CHACHA20-POLY1305\" >> /etc/crypto-policies/policies/modules/NO-SSHWEAKCIPHERS.pmod\n```\n\nRun the following command to update the system-wide cryptographic policy\n\n```\n# update-crypto-policies --set <CRYPTO_POLICY>:<CRYPTO_SUBPOLICY1>:<CRYPTO_SUBPOLICY2>:<CRYPTO_SUBPOLICY3>\n```\n\n_Example:_\n\n```\n# update-crypto-policies --set DEFAULT:NO-SHA1:NO-WEAKMAC:NO-SSHCBC:NO-SSHCHACHA20:NO-SSHWEAKCIPHERS\n```\n\nRun the following command to reload the openSSH server to make your cryptographic settings effective:\n\n```\n# systemctl reload-or-restart sshd\n```\n\n**- OR -** If system-wide-crypto-policy is not being used to configure available ciphers (**This is not recommended**)\n\nEdit the /etc/ssh/sshd_config file and add/modify the `Ciphers` line to contain a comma separated list of the site unapproved (weak) Ciphers preceded with a `-` above any `Include` entries:\n\n_Example:_\n\n```\nCiphers -3des-cbc,aes128-cbc,aes192-cbc,aes256-cbc,chacha20-poly1305@openssh.com\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.4_assessment-method",
                    "prose": "Run the following command to verify none of the \"weak\" ciphers are being used:\n\n```\n# sshd -T | grep -Pi -- '^ciphers\\h+\\\"?([^#\\n\\r]+,)?((3des|blowfish|cast128|aes(128|192|256))-cbc|arcfour(128|256)?|rijndael-cbc@lysator\\.liu\\.se|chacha20-poly1305@openssh\\.com)\\b'\n```\n\n**- IF -** a line is returned, review the list of ciphers. If the line includes `chacha20-poly1305@openssh.com`, review `CVE-2023-48795` and verify the system has been patched. No ciphers in the list below should be returned as they're considered \"weak\":\n\n```\n3des-cbc\naes128-cbc\naes192-cbc\naes256-cbc\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.5",
                "title": "Ensure sshd KexAlgorithms is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.5"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.5_statement",
                    "prose": "Key exchange is any method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm. If the sender and receiver wish to exchange encrypted messages, each must be equipped to encrypt messages to be sent and decrypt messages received\n\n**Notes:**\n- Kex algorithms have a higher preference the earlier they appear in the list\n- Some organizations may have stricter requirements for approved Key exchange algorithms\n- Ensure that Key exchange algorithms used are in compliance with site policy\n- The only Key Exchange Algorithms currently FIPS 140 approved are:\n - ecdh-sha2-nistp256\n - ecdh-sha2-nistp384\n - ecdh-sha2-nistp521\n - diffie-hellman-group-exchange-sha256\n - diffie-hellman-group16-sha512\n - diffie-hellman-group18-sha512\n - diffie-hellman-group14-sha256"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.5_assessment-objective",
                    "prose": "Rationale: Key exchange methods that are considered weak should be removed. A key exchange method may be weak because too few bits are used, or the hashing algorithm is considered too weak. Using weak algorithms could expose connections to man-in-the-middle attacks"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.5_guidance",
                    "prose": "**Note:**\n- First occurrence of an option takes precedence.\n- Though key_exchange may be configured through the `KexAlgorithms` option in the `/etc/ssh/sshd_config` file, it is recommended that the key_exchange available to openSSH server are configured through system-wide-crypto-policy\n- If the recommendations in the subsection \"Configure system wide crypto policy\" have been followed, this Audit should be in a passing state. Please review that section before following this Remediation Procedure\n- By default, system-wide-crypto-policy is applied to the openSSH server. If the following defaults don't exist due to modifications or upgrade from a earlier release, the system-wide-crypto-policy may not be included by the openSSH server. It is recommended that these defaults be restored, created, or the line `Include /etc/crypto-policies/back-ends/opensshserver.config` be added before any lines containing the `KexAlgorithms` argument.\n- Defaults:\n - The file `/etc/ssh/sshd_config` includes the line: `Include /etc/ssh/sshd_config.d/*.conf`. This line must appear before any lines containing the `KexAlgorithms` argument\n - This directory `/etc/ssh/sshd_config.d/` includes a file `/etc/ssh/sshd_config.d/50-redhat.conf`\n - The file `/etc/ssh/sshd_config.d/50-redhat.conf` includes the line `Include /etc/crypto-policies/back-ends/opensshserver.config`\n - The file `/etc/crypto-policies/back-ends/opensshserver.config` is generated by system-wide-crypto-policy\n\nFollow the Remediation Procedure in \"Ensure system wide crypto policy disables sha1 hash and signature support\"\n\n**This is and excerpt of the Remediation Procedure from \"Ensure system wide crypto policy disables sha1 hash and signature support\":**\n\nCreate or edit a file in `/etc/crypto-policies/policies/modules/` ending in `.pmod` and add or modify the following lines:\n\n```\nhash = -SHA1\nsign = -*-SHA1\nsha1_in_certs = 0\n```\n\n_Example:_\n\n```\n# printf '%s\\n' \"# This is a subpolicy dropping the SHA1 hash and signature support\" \"hash = -SHA1\" \"sign = -*-SHA1\" \"sha1_in_certs = 0\" >> /etc/crypto-policies/policies/modules/NO-SHA1.pmod\n```\n\nRun the following command to update the system-wide cryptographic policy\n\n```\n# update-crypto-policies --set <CRYPTO_POLICY>:<CRYPTO_SUBPOLICY1>:<CRYPTO_SUBPOLICY2>:<CRYPTO_SUBPOLICY3>\n```\n\n_Example:_\n\n```\n# update-crypto-policies --set DEFAULT:NO-SHA1:NO-WEAKMAC:NO-SSHCBC:NO-SSHCHACHA20:NO-SSHETM:NO-SSHWEAKCIPHERS\n```\n\nRun the following command to reload the openSSH server to make your cryptographic settings effective:\n\n```\n# systemctl reload-or-restart sshd\n```\n\n**- OR -** If system-wide-crypto-policy is not being used to configure available KexAlgorithms (**This is not recommended**)\n\nEdit the `/etc/ssh/sshd_config` file and add/modify the `KexAlgorithms` line to contain a comma separated list of the site unapproved (weak) KexAlgorithms preceded with a `-` above any `Include` entries:\n\n_Example:_\n\n```\nKexAlgorithms -diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.5_assessment-method",
                    "prose": "Run the following command to verify none of the \"weak\" Key Exchange algorithms are being used:\n\n```\n# sshd -T | grep -Pi -- 'kexalgorithms\\h+([^#\\n\\r]+,)?(diffie-hellman-group1-sha1|diffie-hellman-group14-sha1|diffie-hellman-group-exchange-sha1)\\b'\n\nNothing should be returned\n```\n\nThe following are considered \"weak\" Key Exchange Algorithms, and should not be used:\n\n```\ndiffie-hellman-group1-sha1\ndiffie-hellman-group14-sha1\ndiffie-hellman-group-exchange-sha1\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.6",
                "title": "Ensure sshd MACs are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.6"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.6_statement",
                    "prose": "This variable limits the types of MAC algorithms that SSH can use during communication.\n\n**Notes:**\n- Some organizations may have stricter requirements for approved MACs.\n- Ensure that MACs used are in compliance with site policy.\n- The only \"strong\" MACs currently FIPS 140 approved are:\n - HMAC-SHA1\n - HMAC-SHA2-256\n - HMAC-SHA2-384\n - HMAC-SHA2-512"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.6_assessment-objective",
                    "prose": "Rationale: MD5 and 96-bit MAC algorithms are considered weak and have been shown to increase exploitability in SSH downgrade attacks. Weak algorithms continue to have a great deal of attention as a weak spot that can be exploited with expanded computing power. An attacker that breaks the algorithm could take advantage of a MiTM position to decrypt the SSH tunnel and capture credentials and information."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.6_guidance",
                    "prose": "**Note:**\n- First occurrence of an option takes precedence.\n- Though MACs may be configured through the `MACs` option in the `/etc/ssh/sshd_config` file, it is recommended that the MACs available to openSSH server are configured through system-wide-crypto-policy\n- If the recommendations in the subsection \"Configure system wide crypto policy\" have been followed, this Audit should be in a passing state. Please review that section before following this Remediation Procedure\n- By default, system-wide-crypto-policy is applied to the openSSH server. If the following defaults don't exist due to modifications or upgrade from a earlier release, the system-wide-crypto-policy may not be included by the openSSH server. It is recommended that these defaults be restored, created, or the line `Include /etc/crypto-policies/back-ends/opensshserver.config` be added before any lines containing the `MACs` argument.\n- Defaults:\n - The file `/etc/ssh/sshd_config` includes the line: `Include /etc/ssh/sshd_config.d/*.conf`. This line must appear before any lines containing the `MACs` argument\n - This directory `/etc/ssh/sshd_config.d/` includes a file `/etc/ssh/sshd_config.d/50-redhat.conf`\n - The file `/etc/ssh/sshd_config.d/50-redhat.conf` includes the line `Include /etc/crypto-policies/back-ends/opensshserver.config`\n - The file `/etc/crypto-policies/back-ends/opensshserver.config` is generated by system-wide-crypto-policy\n\n**- IF -** `CVE-2023-48795` has not been reviewed and addressed, Recommendation _\"Ensure system wide crypto policy disables EtM for ssh\"_ should be followed.\n\nCreate or edit a file in `/etc/crypto-policies/policies/modules/` ending in `.pmod` and add or modify the the following line:\n\n```\nmac@SSH = -HMAC-MD5* -UMAC-64* -UMAC-128*\n```\n\n_Example:_\n\n```\n# printf '%s\\n' \"# This is a subpolicy to disable weak MACs\" \"# for the SSH protocol (libssh and OpenSSH)\" \"mac@SSH = -HMAC-MD5* -UMAC-64* -UMAC-128*\" >> /etc/crypto-policies/policies/modules/NO-SSHWEAKMACS.pmod\n```\n\nRun the following command to update the system-wide cryptographic policy\n\n```\n# update-crypto-policies --set <CRYPTO_POLICY>:<CRYPTO_SUBPOLICY1>:<CRYPTO_SUBPOLICY2>:<CRYPTO_SUBPOLICY3>\n```\n\n_Example:_\n\n```\n# update-crypto-policies --set DEFAULT:NO-SHA1:NO-WEAKMAC:NO-SSHCBC:NO-SSHCHACHA20:NO-SSHETM:NO-SSHWEAKCIPHERS:NO-SSHWEAKMACS\n```\n\nRun the following command to reload the openSSH server to make your cryptographic settings effective:\n\n```\n# systemctl reload-or-restart sshd\n```\n\n**- OR -** If system-wide-crypto-policy is not being used to configure available ciphers (**This is not recommended**)\n\nEdit the `/etc/ssh/sshd_config` file and add/modify the `MACs` line to contain a comma separated list of the site unapproved (weak) MACs preceded with a `-` above any `Include` entries:\n\n_Example:_\n\n```\nMACs -hmac-md5,hmac-md5-96,hmac-ripemd160,hmac-sha1-96,umac-64@openssh.com,hmac-md5-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com\n```\n\n**- IF -** `CVE-2023-48795` has not been reviewed and addressed, the following `etm` MACs should be added to the exclude list: hmac-sha1-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.6_assessment-method",
                    "prose": "Run the following command to verify none of the \"weak\" MACs are being used:\n\n```\n# sshd -T | grep -Pi -- 'macs\\h+([^#\\n\\r]+,)?(hmac-md5|hmac-md5-96|hmac-ripemd160|hmac-sha1-96|umac-64@openssh\\.com|hmac-md5-etm@openssh\\.com|hmac-md5-96-etm@openssh\\.com|hmac-ripemd160-etm@openssh\\.com|hmac-sha1-96-etm@openssh\\.com|umac-64-etm@openssh\\.com|umac-128-etm@openssh\\.com)\\b'\n\nNothing should be returned\n```\n\n**Note:** Review `CVE-2023-48795` and verify the system has been patched. If the system has not been patched, review the use of the Encrypt Then Mac (etm) MACs.\n\nThe following are considered \"weak\" MACs, and should not be used:\n\n```\nhmac-md5\nhmac-md5-96\nhmac-sha1-96\numac-64@openssh.com\nhmac-md5-etm@openssh.com\nhmac-md5-96-etm@openssh.com\nhmac-sha1-96-etm@openssh.com\numac-64-etm@openssh.com\numac-128-etm@openssh.com\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.7",
                "title": "Ensure sshd access is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.7"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.7_statement",
                    "prose": "There are several options available to limit which users and group can access the system via SSH. It is recommended that at least one of the following options be leveraged:\n\n- `AllowUsers`:\n - The `AllowUsers` variable gives the system administrator the option of allowing specific users to `ssh` into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this variable. If a system administrator wants to restrict user access further by only allowing the allowed users to log in from a particular host, the entry can be specified in the form of user@host.\n- `AllowGroups`:\n - The `AllowGroups` variable gives the system administrator the option of allowing specific groups of users to `ssh` into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this variable.\n- `DenyUsers`:\n - The `DenyUsers` variable gives the system administrator the option of denying specific users to `ssh` into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this variable. If a system administrator wants to restrict user access further by specifically denying a user's access from a particular host, the entry can be specified in the form of user@host.\n- `DenyGroups`:\n - The `DenyGroups` variable gives the system administrator the option of denying specific groups of users to `ssh` into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this variable."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.7_assessment-objective",
                    "prose": "Rationale: Restricting which users can remotely access the system via SSH will help ensure that only authorized users access the system."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.7_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set one or more of the parameters above any `Include` and `Match` set statements as follows:\n\n```\nAllowUsers <userlist>\n - AND/OR -\nAllowGroups <grouplist>\n```\n\n**Note:** \n- First occurrence of a option takes precedence, `Match` set statements withstanding. If `Include` locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a `.conf` file in a `Include` directory.\n- **Be advised** that these options are \"ANDed\" together. If both `AllowUsers` and `AllowGroups` are set, connections will be limited to the list of users that are also a member of an allowed group. It is recommended that only one be set for clarity and ease of administration.\n- It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user or group and forget to add it to the deny list."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.7_assessment-method",
                    "prose": "Run the following command and verify the output:\n\n```\n# sshd -T | grep -Pi -- '^\\h*(allow|deny)(users|groups)\\h+\\H+'\n```\n\nVerify that the output matches at least one of the following lines:\n\n```\nallowusers <userlist>\n-OR-\nallowgroups <grouplist>\n-OR-\ndenyusers <userlist>\n-OR-\ndenygroups <grouplist>\n```\n\nReview the list(s) to ensure included users and/or groups follow local site policy\n\n**- IF -** `Match` set statements are used in your environment, specify the connection parameters to use for the `-T` extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n\n_Example additional audit needed for a match block for the user `sshuser`:_\n\n```\n# sshd -T -C user=sshuser | grep -Pi -- '^\\h*(allow|deny)(users|groups)\\h+\\H+'\n```\n\n**Note:** If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple `-C` options or as a comma-separated list. The keywords are `addr` (source address), `user` (user), `host` (resolved source host name), `laddr` (local address), `lport` (local port number), and `rdomain` (routing domain).",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.8",
                "title": "Ensure sshd Banner is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.8"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.8_statement",
                    "prose": "The `Banner` parameter specifies a file whose contents must be sent to the remote user before authentication is permitted. By default, no banner is displayed."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.8_assessment-objective",
                    "prose": "Rationale: Banners are used to warn connecting users of the particular site's policy regarding connection. Presenting a warning message prior to the normal user login may assist the prosecution of trespassers on the computer system."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.8_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `Banner` parameter above any `Include` and `Match` entries as follows:\n\n```\nBanner /etc/issue.net\n```\n\n**Note:** First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.\n\nEdit the file being called by the `Banner` argument with the appropriate contents according to your site policy, remove any instances of `\\m` , `\\r` , `\\s` , `\\v` or references to the `OS platform`\n\n_Example:_\n\n```\n# printf '%s\\n' \"Authorized users only. All activity may be monitored and reported.\" > \"$(sshd -T | awk '$1 == \"banner\" {print $2}')\"\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.8_assessment-method",
                    "prose": "Run the following command to verify `Banner` is set:\n\n```\n# sshd -T | grep -Pi -- '^banner\\h+\\/\\H+'\n```\n\n_Example:_\n\n```\nbanner /etc/issue.net\n```\n\n**- IF -** `Match` set statements are used in your environment, specify the connection parameters to use for the `-T` extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n\n_Example additional audit needed for a match block for the user `sshuser`:_\n\n```\n# sshd -T -C user=sshuser | grep -Pi -- '^banner\\h+\\/\\H+'\n```\n\n**Note:** If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple `-C` options or as a comma-separated list. The keywords are `addr` (source address), `user` (user), `host` (resolved source host name), `laddr` (local address), `lport` (local port number), and `rdomain` (routing domain).\n\nRun the following command and verify that the contents or the file being called by the `Banner` argument match site policy:\n\n```\n# [ -e \"$(sshd -T | awk '$1 == \"banner\" {print $2}')\" ] && cat \"$(sshd -T | awk '$1 == \"banner\" {print $2}')\"\n``` \n\nRun the following command and verify no results are returned:\n\n```\n# grep -Psi -- \"(\\\\\\v|\\\\\\r|\\\\\\m|\\\\\\s|\\b$(grep '^ID=' /etc/os-release | cut -d= -f2 | sed -e 's/\"//g')\\b)\" \"$(sshd -T | awk '$1 == \"banner\" {print $2}')\"\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.9",
                "title": "Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.9"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.9_statement",
                    "prose": "**Note:** To clarify, the two settings described below are only meant for idle connections from a protocol perspective and are not meant to check if the user is active or not. An idle user does not mean an idle connection. SSH does not and never had, intentionally, the capability to drop idle users. In SSH versions before `8.2p1` there was a bug that caused these values to behave in such a manner that they were abused to disconnect idle users. This bug has been resolved in `8.2p1` and thus it can no longer be abused disconnect idle users.\n\nThe two options `ClientAliveInterval` and `ClientAliveCountMax` control the timeout of SSH sessions. Taken directly from `man 5 sshd_config`:\n\n- `ClientAliveInterval` Sets a timeout interval in seconds after which if no data has been received from the client, sshd(8) will send a message through the encrypted channel to request a response from the client. The default is 0, indicating that these messages will not be sent to the client.\n\n- `ClientAliveCountMax` Sets the number of client alive messages which may be sent without sshd(8) receiving any messages back from the client. If this threshold is reached while client alive messages are being sent, sshd will disconnect the client, terminating the session. It is important to note that the use of client alive messages is very different from TCPKeepAlive. The client alive messages are sent through the encrypted channel and therefore will not be spoofable. The TCP keepalive option en\u2010abled by TCPKeepAlive is spoofable. The client alive mechanism is valuable when the client or server depend on knowing when a connection has become unresponsive.\nThe default value is 3. If ClientAliveInterval is set to 15, and ClientAliveCountMax is left at the default, unresponsive SSH clients will be disconnected after approximately 45 seconds. Setting a zero ClientAliveCountMax disables connection termination."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.9_assessment-objective",
                    "prose": "Rationale: In order to prevent resource exhaustion, appropriate values should be set for both `ClientAliveInterval` and `ClientAliveCountMax`. Specifically, looking at the source code, `ClientAliveCountMax` must be greater than zero in order to utilize the ability of SSH to drop idle connections. If connections are allowed to stay open indefinitely, this can potentially be used as a DDOS attack or simple resource exhaustion could occur over unreliable networks.\n\nThe example set here is a 45 second timeout. Consult your site policy for network timeouts and apply as appropriate."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.9_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `ClientAliveInterval` and `ClientAliveCountMax` parameters above any `Include` and `Match` entries according to site policy. \n\n_Example:_\n\n```\nClientAliveInterval 15\nClientAliveCountMax 3\n```\n\n**Note:** First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.9_assessment-method",
                    "prose": "Run the following command and verify `ClientAliveInterval` and `ClientAliveCountMax` are greater than zero:\n\n```\n# sshd -T | grep -Pi -- '(clientaliveinterval|clientalivecountmax)'\n```\n\n_Example Output:_\n\n```\nclientaliveinterval 15\nclientalivecountmax 3\n```\n\n**- IF -** `Match` set statements are used in your environment, specify the connection parameters to use for the `-T` extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n\n_Example additional audit needed for a match block for the user `sshuser`:_\n\n```\n# sshd -T -C user=sshuser | grep -Pi -- '(clientaliveinterval|clientalivecountmax)'\n```\n\n**Note:** If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple `-C` options or as a comma-separated list. The keywords are `addr` (source address), `user` (user), `host` (resolved source host name), `laddr` (local address), `lport` (local port number), and `rdomain` (routing domain).",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.12",
                "title": "Ensure sshd HostbasedAuthentication is disabled",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.12"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.12_statement",
                    "prose": "The `HostbasedAuthentication` parameter specifies if authentication is allowed through trusted hosts via the user of `.rhosts`, or `/etc/hosts.equiv`, along with successful public key client host authentication."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.12_assessment-objective",
                    "prose": "Rationale: Even though the `.rhosts` files are ineffective if support is disabled in `/etc/pam.conf`, disabling the ability to use `.rhosts` files in SSH provides an additional layer of protection."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.12_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `HostbasedAuthentication` parameter to `no` above any `Include` and `Match` entries as follows:\n\n```\nHostbasedAuthentication no\n```\n\n**Note:** First occurrence of a option takes precedence, `Match` set statements withstanding. If `Include` locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in `Include` location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.12_assessment-method",
                    "prose": "Run the following command to verify `HostbasedAuthentication` is set to `no`:\n\n```\n# sshd -T | grep hostbasedauthentication\n\nhostbasedauthentication no\n```\n\n**- IF -** `Match` set statements are used in your environment, specify the connection parameters to use for the `-T` extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n\n_Example additional audit needed for a match block for the user `sshuser`:_\n\n```\n# sshd -T -C user=sshuser | grep hostbasedauthentication\n```\n\n**Note:** If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple `-C` options or as a comma-separated list. The keywords are `addr` (source address), `user` (user), `host` (resolved source host name), `laddr` (local address), `lport` (local port number), and `rdomain` (routing domain)",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.13",
                "title": "Ensure sshd IgnoreRhosts is enabled",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.13"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.13_statement",
                    "prose": "The `IgnoreRhosts` parameter specifies that `.rhosts` and `.shosts` files will not be used in `RhostsRSAAuthentication` or `HostbasedAuthentication`."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.13_assessment-objective",
                    "prose": "Rationale: Setting this parameter forces users to enter a password when authenticating with SSH."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.13_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `IgnoreRhosts` parameter to `yes` above any `Include` and `Match` entries as follows:\n\n```\nIgnoreRhosts yes\n```\n\n**Note:** First occurrence of a option takes precedence, `Match` set statements withstanding. If `Include` locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in `Include` location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.13_assessment-method",
                    "prose": "Run the following command to verify `IgnoreRhosts` is set to `yes`:\n\n```\n# sshd -T | grep ignorerhosts\n\nignorerhosts yes\n```\n\n**- IF -** `Match` set statements are used in your environment, specify the connection parameters to use for the `-T` extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n\n_Example additional audit needed for a match block for the user `sshuser`:_\n\n```\n# sshd -T -C user=sshuser | grep ignorerhosts\n```\n\n**Note:** If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple `-C` options or as a comma-separated list. The keywords are `addr` (source address), `user` (user), `host` (resolved source host name), `laddr` (local address), `lport` (local port number), and `rdomain` (routing domain)",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.14",
                "title": "Ensure sshd LoginGraceTime is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.14"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.14_statement",
                    "prose": "The `LoginGraceTime` parameter specifies the time allowed for successful authentication to the SSH server. The longer the Grace period is the more open unauthenticated connections can exist. Like other session controls in this session the Grace Period should be limited to appropriate organizational limits to ensure the service is available for needed access."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.14_assessment-objective",
                    "prose": "Rationale: Setting the `LoginGraceTime` parameter to a low number will minimize the risk of successful brute force attacks to the SSH server. It will also limit the number of concurrent unauthenticated connections While the recommended setting is 60 seconds (1 Minute), set the number based on site policy."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.14_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `LoginGraceTime` parameter to `60` seconds or less above any `Include` entry as follows:\n\n```\nLoginGraceTime 60\n```\n\n**Note:** First occurrence of a option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.14_assessment-method",
                    "prose": "Run the following command and verify that output `LoginGraceTime` is between `1` and `60` seconds:\n\n```\n# sshd -T | grep logingracetime\n\nlogingracetime 60\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.15",
                "title": "Ensure sshd LogLevel is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.15"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.15_statement",
                    "prose": "SSH provides several logging levels with varying amounts of verbosity. The `DEBUG` options are specifically not recommended other than strictly for debugging SSH communications. These levels provide so much data that it is difficult to identify important security information, and may violate the privacy of users."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.15_assessment-objective",
                    "prose": "Rationale: The `INFO` level is the basic level that only records login activity of SSH users. In many situations, such as Incident Response, it is important to determine when a particular user was active on a system. The logout record can eliminate those users who disconnected, which helps narrow the field.\n\nThe `VERBOSE` level specifies that login and logout activity as well as the key fingerprint for any SSH key used for login will be logged. This information is important for SSH key management, especially in legacy environments."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.15_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `LogLevel` parameter to `VERBOSE` or `INFO` above any `Include` and `Match` entries as follows:\n\n```\nLogLevel VERBOSE\n - OR -\nLogLevel INFO\n```\n\n**Note:** First occurrence of an option takes precedence, `Match` set statements withstanding. If `Include` locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in `Include` location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.15_assessment-method",
                    "prose": "Run the following command and verify that output matches `loglevel VERBOSE` or `loglevel INFO`:\n\n```\n# sshd -T | grep loglevel\n\nloglevel VERBOSE\n - OR -\nloglevel INFO\n```\n\n**- IF -** `Match` set statements are used in your environment, specify the connection parameters to use for the `-T` extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n\n_Example additional audit needed for a match block for the user `sshuser`:_\n\n```\n# sshd -T -C user=sshuser | grep loglevel\n```\n\n**Note:** If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple `-C` options or as a comma-separated list. The keywords are `addr` (source address), `user` (user), `host` (resolved source host name), `laddr` (local address), `lport` (local port number), and `rdomain` (routing domain)",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.16",
                "title": "Ensure sshd MaxAuthTries is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.16"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.16_statement",
                    "prose": "The `MaxAuthTries` parameter specifies the maximum number of authentication attempts permitted per connection. When the login failure count reaches half the number, error messages will be written to the `syslog` file detailing the login failure."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.16_assessment-objective",
                    "prose": "Rationale: Setting the `MaxAuthTries` parameter to a low number will minimize the risk of successful brute force attacks to the SSH server. While the recommended setting is 4, set the number based on site policy."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.16_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `MaxAuthTries` parameter to `4` or less above any `Include` and `Match` entries as follows:\n\n```\nMaxAuthTries 4\n```\n\n**Note:** First occurrence of an option takes precedence, `Match` set statements withstanding. If `Include` locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in `Include` location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.16_assessment-method",
                    "prose": "Run the following command and verify that `MaxAuthTries` is `4` or less:\n\n```\n# sshd -T | grep maxauthtries\n\nmaxauthtries 4\n```\n\n**- IF -** `Match` set statements are used in your environment, specify the connection parameters to use for the `-T` extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n\n_Example additional audit needed for a match block for the user `sshuser`:_\n\n```\n# sshd -T -C user=sshuser | grep maxauthtries\n```\n\n**Note:** If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple `-C` options or as a comma-separated list. The keywords are `addr` (source address), `user` (user), `host` (resolved source host name), `laddr` (local address), `lport` (local port number), and `rdomain` (routing domain)",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.17",
                "title": "Ensure sshd MaxStartups is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.17"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.17_statement",
                    "prose": "The `MaxStartups` parameter specifies the maximum number of concurrent unauthenticated connections to the SSH daemon."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.17_assessment-objective",
                    "prose": "Rationale: To protect a system from denial of service due to a large number of pending authentication connection attempts, use the rate limiting function of MaxStartups to protect availability of sshd logins and prevent overwhelming the daemon."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.17_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `MaxStartups` parameter to `10:30:60` or more restrictive above any `Include` entries as follows:\n\n```\nMaxStartups 10:30:60\n```\n\n**Note:** First occurrence of a option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.17_assessment-method",
                    "prose": "Run the following command to verify `MaxStartups` is `10:30:60` or more restrictive:\n\n```\n# sshd -T | awk '$1 ~ /^\\s*maxstartups/{split($2, a, \":\");{if(a[1] > 10 || a[2] > 30 || a[3] > 60) print $0}}'\n\n```\n\nNothing should be returned",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.18",
                "title": "Ensure sshd MaxSessions is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.18"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.18_statement",
                    "prose": "The `MaxSessions` parameter specifies the maximum number of open sessions permitted from a given connection."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.18_assessment-objective",
                    "prose": "Rationale: To protect a system from denial of service due to a large number of concurrent sessions, use the rate limiting function of MaxSessions to protect availability of sshd logins and prevent overwhelming the daemon."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.18_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `MaxSessions` parameter to `10` or less above any `Include` and `Match` entries as follows:\n\n```\nMaxSessions 10\n```\n\n**Note:** First occurrence of an option takes precedence, `Match` set statements withstanding. If `Include` locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in `Include` location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.18_assessment-method",
                    "prose": "Run the following command and verify that `MaxSessions` is `10` or less:\n\n```\n# sshd -T | grep -i maxsessions\n\nmaxsessions 10\n```\n\nRun the following command and verify the output:\n\n```\ngrep -Psi -- '^\\h*MaxSessions\\h+\\\"?(1[1-9]|[2-9][0-9]|[1-9][0-9][0-9]+)\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf\n\nNothing should be returned\n```\n\n**- IF -** `Match` set statements are used in your environment, specify the connection parameters to use for the `-T` extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n\n_Example additional audit needed for a match block for the user `sshuser`:_\n\n```\n# sshd -T -C user=sshuser | grep maxsessions\n```\n\n**Note:** If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple `-C` options or as a comma-separated list. The keywords are `addr` (source address), `user` (user), `host` (resolved source host name), `laddr` (local address), `lport` (local port number), and `rdomain` (routing domain)",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.19",
                "title": "Ensure sshd PermitEmptyPasswords is disabled",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.19"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.19_statement",
                    "prose": "The `PermitEmptyPasswords` parameter specifies if the SSH server allows login to accounts with empty password strings."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.19_assessment-objective",
                    "prose": "Rationale: Disallowing remote shell access to accounts that have an empty password reduces the probability of unauthorized access to the system."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.19_guidance",
                    "prose": "Edit `/etc/ssh/sshd_config` and set the `PermitEmptyPasswords` parameter to `no` above any `Include` and `Match` entries as follows:\n\n```\nPermitEmptyPasswords no\n```\n\n**Note:** First occurrence of an option takes precedence, `Match` set statements withstanding. If `Include` locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in `Include` location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.19_assessment-method",
                    "prose": "Run the following command to verify `PermitEmptyPasswords` is set to `no`:\n\n```\n# sshd -T | grep permitemptypasswords\n\npermitemptypasswords no\n```\n\n**- IF -** `Match` set statements are used in your environment, specify the connection parameters to use for the `-T` extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n\n_Example additional audit needed for a match block for the user `sshuser`:_\n\n```\n# sshd -T -C user=sshuser | grep permitemptypasswords\n```\n\n**Note:** If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple `-C` options or as a comma-separated list. The keywords are `addr` (source address), `user` (user), `host` (resolved source host name), `laddr` (local address), `lport` (local port number), and `rdomain` (routing domain)",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.20",
                "title": "Ensure sshd PermitRootLogin is disabled",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.20"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.20_statement",
                    "prose": "The `PermitRootLogin` parameter specifies if the root user can log in using SSH. The default is `prohibit-password`."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.20_assessment-objective",
                    "prose": "Rationale: Disallowing `root` logins over SSH requires system admins to authenticate using their own individual account, then escalating to `root`. This limits opportunity for non-repudiation and provides a clear audit trail in the event of a security incident."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.20_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `PermitRootLogin` parameter to `no` above any `Include` and `Match` entries as follows:\n\n```\nPermitRootLogin no\n```\n\n**Note:** First occurrence of an option takes precedence, `Match` set statements withstanding. If `Include` locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in `Include` location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.20_assessment-method",
                    "prose": "Run the following command to verify `PermitRootLogin` is set to `no`:\n\n```\n# sshd -T | grep permitrootlogin\n\npermitrootlogin no\n```\n\n**- IF -** `Match` set statements are used in your environment, specify the connection parameters to use for the `-T` extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n\n_Example additional audit needed for a match block for the user `sshuser`:_\n\n```\n# sshd -T -C user=sshuser | grep permitrootlogin\n```\n\n**Note:** If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple `-C` options or as a comma-separated list. The keywords are `addr` (source address), `user` (user), `host` (resolved source host name), `laddr` (local address), `lport` (local port number), and `rdomain` (routing domain)",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.21",
                "title": "Ensure sshd PermitUserEnvironment is disabled",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.21"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.21_statement",
                    "prose": "The `PermitUserEnvironment` option allows users to present environment options to the SSH daemon."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.21_assessment-objective",
                    "prose": "Rationale: Permitting users the ability to set environment variables through the SSH daemon could potentially allow users to bypass security controls (e.g. setting an execution path that has SSH executing trojan'd programs)"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.21_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `PermitUserEnvironment` parameter to `no` above any `Include` entries as follows:\n\n```\nPermitUserEnvironment no\n```\n\n**Note:** First occurrence of an option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.21_assessment-method",
                    "prose": "Run the following command to verify `PermitUserEnviroment` is set to `no`:\n\n```\n# sshd -T | grep permituserenvironment\n\npermituserenvironment no\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.22",
                "title": "Ensure sshd UsePAM is enabled",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.22"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.22_statement",
                    "prose": "The `UsePAM` directive enables the Pluggable Authentication Module (PAM) interface. If set to `yes` this will enable PAM authentication using `ChallengeResponseAuthentication` and `PasswordAuthentication` directives in addition to PAM account and session module processing for all authentication types."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.22_assessment-objective",
                    "prose": "Rationale: When `usePAM` is set to `yes`, PAM runs through account and session types properly. This is important if you want to restrict access to services based off of IP, time or other factors of the account. Additionally, you can make sure users inherit certain environment variables on login or disallow access to the server"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.22_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `UsePAM` parameter to `yes` above any `Include` entries as follows:\n\n```\nUsePAM yes\n```\n\n**Note:** First occurrence of an option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.22_assessment-method",
                    "prose": "Run the following command to verify `UsePAM` is set to `yes`:\n\n```\n# sshd -T | grep -i usepam\n\nusepam yes\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.10",
                "title": "Ensure sshd DisableForwarding is enabled",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.10"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.10_statement",
                    "prose": "The `DisableForwarding` parameter disables all forwarding features, including X11, ssh-agent(1), TCP and StreamLocal. This option overrides all other forwarding-related options and may simplify restricted configurations.\n- X11Forwarding provides the ability to tunnel X11 traffic through the connection to enable remote graphic connections.\n- ssh-agent is a program to hold private keys used for public key authentication. Through use of environment variables the agent can be located and automatically used for authentication when logging in to other machines using ssh.\n- SSH port forwarding is a mechanism in SSH for tunneling application ports from the client to the server, or servers to clients. It can be used for adding encryption to legacy applications, going through firewalls, and some system administrators and IT professionals use it for opening backdoors into the internal network from their home machines."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.10_assessment-objective",
                    "prose": "Rationale: Disable X11 forwarding unless there is an operational requirement to use X11 applications directly. There is a small risk that the remote X11 servers of users who are logged in via SSH with X11 forwarding could be compromised by other users on the X11 server. Note that even if X11 forwarding is disabled, users can always install their own forwarders.\n\nanyone with root privilege on the the intermediate server can make free use of ssh-agent to authenticate them to other servers\n\nLeaving port forwarding enabled can expose the organization to security risks and backdoors. SSH connections are protected with strong encryption. This makes their contents invisible to most deployed network monitoring and traffic filtering solutions. This invisibility carries considerable risk potential if it is used for malicious purposes such as data exfiltration. Cybercriminals or malware could exploit SSH to hide their unauthorized communications, or to exfiltrate stolen data from the target network.\nImpact: SSH tunnels are widely used in many corporate environments. In some environments the applications themselves may have very limited native support for security. By utilizing tunneling, compliance with SOX, HIPAA, PCI-DSS, and other standards can be achieved without having to modify the applications."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.10_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `DisableForwarding` parameter to `yes` above any `Include` entry as follows:\n\n```\nDisableForwarding yes\n```\n\n**Note:** First occurrence of a option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.10_assessment-method",
                    "prose": "Run the following command to verify `DisableForwarding` is set to `yes`:\n\n```\n# sshd -T | grep -i disableforwarding\n\ndisableforwarding yes\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.1.11",
                "title": "Ensure sshd GSSAPIAuthentication is disabled",
                "props": [
                  {
                    "name": "label",
                    "value": "5.1.11"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.1.11_statement",
                    "prose": "The `GSSAPIAuthentication` parameter specifies whether user authentication based on GSSAPI is allowed"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.1.11_assessment-objective",
                    "prose": "Rationale: Allowing GSSAPI authentication through SSH exposes the system's GSSAPI to remote hosts, and should be disabled to reduce the attack surface of the system"
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.1.11_guidance",
                    "prose": "Edit the `/etc/ssh/sshd_config` file to set the `GSSAPIAuthentication` parameter to `no` above any `Include` and `Match` entries as follows:\n\n```\nGSSAPIAuthentication no\n```\n\n**Note:** First occurrence of an option takes precedence, `Match` set statements withstanding. If `Include` locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in `Include` location."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.1.11_assessment-method",
                    "prose": "Run the following command to verify `GSSAPIAuthentication` is set to `no`:\n\n```\n# sshd -T | grep gssapiauthentication\n\ngssapiauthentication no\n```\n\n**- IF -** `Match` set statements are used in your environment, specify the connection parameters to use for the `-T` extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n\n_Example additional audit needed for a match block for the user `sshuser`:_\n\n```\n# sshd -T -C user=sshuser | grep gssapiauthentication\n```\n\n**Note:** If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple `-C` options or as a comma-separated list. The keywords are `addr` (source address), `user` (user), `host` (resolved source host name), `laddr` (local address), `lport` (local port number), and `rdomain` (routing domain)",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-5-2",
            "title": "Configure privilege escalation",
            "props": [
              {
                "name": "label",
                "value": "5.2"
              }
            ],
            "controls": [
              {
                "id": "cis-5.2.1",
                "title": "Ensure sudo is installed",
                "props": [
                  {
                    "name": "label",
                    "value": "5.2.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.2.1_statement",
                    "prose": "`sudo` allows a permitted user to execute a command as the superuser or another user, as specified by the security policy. The invoking user's real (not effective) user ID is used to determine the user name with which to query the security policy."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.2.1_assessment-objective",
                    "prose": "Rationale: `sudo` supports a plug-in architecture for security policies and input/output logging. Third parties can develop and distribute their own policy and I/O logging plug-ins to work seamlessly with the `sudo` front end. The default security policy is `sudoers`, which is configured via the file `/etc/sudoers` and any entries in `/etc/sudoers.d`.\n\nThe security policy determines what privileges, if any, a user has to run `sudo`. The policy may require that users authenticate themselves with a password or another authentication mechanism. If authentication is required, `sudo` will exit if the user's password is not entered within a configurable time limit. This limit is policy-specific."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.2.1_guidance",
                    "prose": "Run the following command to install sudo\n\n```\n# dnf install sudo\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.2.1_assessment-method",
                    "prose": "Verify that `sudo` is installed.\n\nRun the following command:\n\n```\n# dnf list sudo\n\nInstalled Packages\nsudo.x86_64 <VERSION> @anaconda\nAvailable Packages\nsudo.x86_64 <VERSION> updates\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.2.2",
                "title": "Ensure sudo commands use pty",
                "props": [
                  {
                    "name": "label",
                    "value": "5.2.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.2.2_statement",
                    "prose": "`sudo` can be configured to run only from a pseudo terminal (`pseudo-pty`)."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.2.2_assessment-objective",
                    "prose": "Rationale: Attackers can run a malicious program using `sudo` which would fork a background process that remains even when the main program has finished executing.\nImpact: **WARNING:** Editing the `sudo` configuration incorrectly can cause `sudo` to stop functioning. Always use `visudo` to modify `sudo` configuration files."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.2.2_guidance",
                    "prose": "Edit the file `/etc/sudoers` with `visudo` or a file in `/etc/sudoers.d/` with `visudo -f <PATH TO FILE>` and add the following line:\n\n```\nDefaults use_pty\n```\n\nEdit the file `/etc/sudoers` with `visudo` and any files in `/etc/sudoers.d/` with `visudo -f <PATH TO FILE>` and remove any occurrence of `!use_pty`\n\n**Note:** \n- sudo will read each file in `/etc/sudoers.d`, skipping file names that end in `~` or contain a `.` character to avoid causing problems with package manager or editor temporary/backup files. \n- Files are parsed in sorted lexical order. That is, `/etc/sudoers.d/01_first` will be parsed before `/etc/sudoers.d/10_second`. \n- Be aware that because the sorting is lexical, not numeric, `/etc/sudoers.d/1_whoops` would be loaded after `/etc/sudoers.d/10_second`. \n- Using a consistent number of leading zeroes in the file names can be used to avoid such problems."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.2.2_assessment-method",
                    "prose": "Verify that `sudo` can only run other commands from a pseudo terminal.\n\nRun the following command to verify `Defaults use_pty` is set:\n\n```\n# grep -rPi -- '^\\h*Defaults\\h+([^#\\n\\r]+,\\h*)?use_pty\\b' /etc/sudoers*\n```\n\nVerify the output matches:\n\n```\n/etc/sudoers:Defaults use_pty\n```\n\nRun the follow command to to verify `Defaults !use_pty` is not set:\n\n```\n# grep -rPi -- '^\\h*Defaults\\h+([^#\\n\\r]+,\\h*)?!use_pty\\b' /etc/sudoers*\n```\n\nNothing should be returned",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.2.3",
                "title": "Ensure sudo log file exists",
                "props": [
                  {
                    "name": "label",
                    "value": "5.2.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.2.3_statement",
                    "prose": "The `Defaults logfile` entry sets the path to the sudo log file. Setting a path turns on logging to a file; negating this option turns it off. By default, sudo logs via syslog."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.2.3_assessment-objective",
                    "prose": "Rationale: Defining a dedicated log file for sudo simplifies auditing of sudo commands and creation of auditd rules for sudo.\nImpact: **WARNING:** Editing the `sudo` configuration incorrectly can cause `sudo` to stop functioning. Always use `visudo` to modify `sudo` configuration files.\n\nCreation of additional log files can cause disk space exhaustion if not correctly managed. You should configure `logrotate` to manage the sudo log in accordance with your local policy."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.2.3_guidance",
                    "prose": "Edit the file `/etc/sudoers` or a file in `/etc/sudoers.d/` with `visudo -f <PATH TO FILE>` and add the following line:\n\n```\nDefaults logfile=\"<PATH TO CUSTOM LOG FILE>\"\n```\n\n_Example_\n```\nDefaults logfile=\"/var/log/sudo.log\"\n```\n\n**Notes:** \n- sudo will read each file in `/etc/sudoers.d`, skipping file names that end in `~` or contain a `.` character to avoid causing problems with package manager or editor temporary/backup files. \n- Files are parsed in sorted lexical order. That is, `/etc/sudoers.d/01_first` will be parsed before `/etc/sudoers.d/10_second`. \n- Be aware that because the sorting is lexical, not numeric, `/etc/sudoers.d/1_whoops` would be loaded after `/etc/sudoers.d/10_second`. \n- Using a consistent number of leading zeroes in the file names can be used to avoid such problems."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.2.3_assessment-method",
                    "prose": "Run the following command to verify that sudo has a custom log file configured\n\n```\n# grep -rPsi \"^\\h*Defaults\\h+([^#]+,\\h*)?logfile\\h*=\\h*(\\\"|\\')?\\H+(\\\"|\\')?(,\\h*\\H+\\h*)*\\h*(#.*)?$\" /etc/sudoers*\n```\n\n_Example output:_\n\n```\nDefaults logfile=\"/var/log/sudo.log\"\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.2.5",
                "title": "Ensure re-authentication for privilege escalation is not disabled globally",
                "props": [
                  {
                    "name": "label",
                    "value": "5.2.5"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.2.5_statement",
                    "prose": "The operating system must be configured so that users must re-authenticate for privilege escalation."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.2.5_assessment-objective",
                    "prose": "Rationale: Without re-authentication, users may access resources or perform tasks for which they do not have authorization. \n\nWhen operating systems provide the capability to escalate a functional capability, it is critical the user re-authenticate."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.2.5_guidance",
                    "prose": "Configure the operating system to require users to reauthenticate for privilege escalation.\n\nBased on the outcome of the audit procedure, use `visudo -f <PATH TO FILE>` to edit the relevant sudoers file.\n\nRemove any occurrences of `!authenticate` tags in the file(s)."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.2.5_assessment-method",
                    "prose": "Verify the operating system requires users to re-authenticate for privilege escalation.\n\nCheck the configuration of the `/etc/sudoers` and `/etc/sudoers.d/*` files with the following command:\n\n```\n# grep -r \"^[^#].*\\!authenticate\" /etc/sudoers*\n```\n\nIf any line is found with a `!authenticate` tag, refer to the remediation procedure below.",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.2.6",
                "title": "Ensure sudo authentication timeout is configured correctly",
                "props": [
                  {
                    "name": "label",
                    "value": "5.2.6"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.2.6_statement",
                    "prose": "`sudo` caches used credentials for a default of 5 minutes. This is for ease of use when there are multiple administrative tasks to perform. The timeout can be modified to suit local security policies."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.2.6_assessment-objective",
                    "prose": "Rationale: Setting a timeout value reduces the window of opportunity for unauthorized privileged access to another user."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.2.6_guidance",
                    "prose": "If the currently configured timeout is larger than 15 minutes, edit the file listed in the audit section with `visudo -f <PATH TO FILE>` and modify the entry `timestamp_timeout=` to 15 minutes or less as per your site policy. The value is in minutes. This particular entry may appear on its own, or on the same line as `env_reset`. See the following two examples:\n\n```\nDefaults env_reset, timestamp_timeout=15\n```\n\n```\nDefaults timestamp_timeout=15\nDefaults env_reset\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.2.6_assessment-method",
                    "prose": "Ensure that the caching timeout is no more than 15 minutes.\n\n_Example:_\n\n```\n# grep -roP \"timestamp_timeout=\\K[0-9]*\" /etc/sudoers*\n```\n\nIf there is no `timestamp_timeout` configured in `/etc/sudoers*` then the default is 5 minutes. This default can be checked with:\n\n```\n# sudo -V | grep \"Authentication timestamp timeout:\"\n```\n\n**Note:** A value of `-1` means that the timeout is disabled. Depending on the configuration of the `timestamp_type`, this could mean for all terminals / processes of that user and not just that one single terminal session.",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.2.7",
                "title": "Ensure access to the su command is restricted",
                "props": [
                  {
                    "name": "label",
                    "value": "5.2.7"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.2.7_statement",
                    "prose": "The `su` command allows a user to run a command or shell as another user. The program has been superseded by `sudo`, which allows for more granular control over privileged access. Normally, the `su` command can be executed by any user. By uncommenting the `pam_wheel.so` statement in `/etc/pam.d/su`, the `su` command will only allow users in a specific groups to execute `su`. This group should be empty to reinforce the use of `sudo` for privileged access."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.2.7_assessment-objective",
                    "prose": "Rationale: Restricting the use of `su` , and using `sudo` in its place, provides system administrators better control of the escalation of user privileges to execute privileged commands. The sudo utility also provides a better logging and audit mechanism, as it can log each command executed via `sudo` , whereas `su` can only record that a user executed the `su` program."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.2.7_guidance",
                    "prose": "Create an empty group that will be specified for use of the `su` command. The group should be named according to site policy.\n\n_Example:_\n```\n# groupadd sugroup\n```\n\nAdd the following line to the `/etc/pam.d/su` file, specifying the empty group:\n```\nauth required pam_wheel.so use_uid group=sugroup\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.2.7_assessment-method",
                    "prose": "Run the following command and verify the output matches the line:\n```\n# grep -Pi '^\\h*auth\\h+(?:required|requisite)\\h+pam_wheel\\.so\\h+(?:[^#\\n\\r]+\\h+)?((?!\\2)(use_uid\\b|group=\\H+\\b))\\h+(?:[^#\\n\\r]+\\h+)?((?!\\1)(use_uid\\b|group=\\H+\\b))(\\h+.*)?$' /etc/pam.d/su\n\nauth required pam_wheel.so use_uid group=<group_name>\n```\n\nRun the following command and verify that the group specified in `<group_name>` contains no users:\n```\n# grep <group_name> /etc/group\n\n<group_name>:x:<GID>:\n```\nThere should be no users listed after the Group ID field.",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-5.2.4",
                "title": "Ensure users must provide password for escalation",
                "props": [
                  {
                    "name": "label",
                    "value": "5.2.4"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-5.2.4_statement",
                    "prose": "The operating system must be configured so that users must provide a password for privilege escalation."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-5.2.4_assessment-objective",
                    "prose": "Rationale: Without re-authentication, users may access resources or perform tasks for which they do not have authorization. \n\nWhen operating systems provide the capability to escalate a functional capability, it is critical the user re-authenticate.\nImpact: This will prevent automated processes from being able to elevate privileges."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-5.2.4_guidance",
                    "prose": "Based on the outcome of the audit procedure, use `visudo -f <PATH TO FILE>` to edit the relevant sudoers file.\n\nRemove any line with occurrences of `NOPASSWD` tags in the file."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-5.2.4_assessment-method",
                    "prose": "**Note:** If passwords are not being used for authentication, this is not applicable.\n\nVerify the operating system requires users to supply a password for privilege escalation.\n\nCheck the configuration of the `/etc/sudoers` and `/etc/sudoers.d/*` files with the following command:\n\n```\n# grep -r \"^[^#].*NOPASSWD\" /etc/sudoers*\n```\n\nIf any line is found refer to the remediation procedure below.",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-5-3",
            "title": "Pluggable Authentication Modules",
            "props": [
              {
                "name": "label",
                "value": "5.3"
              }
            ],
            "controls": [],
            "groups": [
              {
                "id": "section-5-3-1",
                "title": "Configure PAM software packages",
                "props": [
                  {
                    "name": "label",
                    "value": "5.3.1"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-5.3.1.1",
                    "title": "Ensure latest version of pam is installed",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.3.1.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.3.1.1_statement",
                        "prose": "Updated versions of PAM include additional functionality"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.3.1.1_assessment-objective",
                        "prose": "Rationale: To ensure the system has full functionality and access to the options covered by this Benchmark, pam-1.5.1-19 or latter is required"
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.3.1.1_guidance",
                        "prose": "**- IF -** the version of `PAM` on the system is less that version `pam-1.5.1-19`:\n\nRun the following command to update to the latest version of `PAM`:\n\n```\n# dnf upgrade pam\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.3.1.1_assessment-method",
                        "prose": "Run the following command to verify the version of `PAM` on the system:\n\n```\n# rpm -q pam\n```\n\nVerify output is version `pam-1.5.1-19` or greater:\n\n_Example:_\n\n```\npam-1.5.1-19.el9.x86_64\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.3.1.2",
                    "title": "Ensure latest version of authselect is installed",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.3.1.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.3.1.2_statement",
                        "prose": "Authselect is a utility that simplifies the configuration of user authentication. Authselect offers ready-made profiles that can be universally used with all modern identity management systems\n\nYou can create and deploy a custom profile by customizing one of the default profiles, the sssd, winbind, or the nis profile. This is particularly useful if Modifying a ready-made authselect profile is not enough for your needs. When you deploy a custom profile, the profile is applied to every user logging into the given host. This would be the recommended method, so that the existing profiles can remain unmodified.\n\nUpdated versions of `authselect` include additional functionality"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.3.1.2_assessment-objective",
                        "prose": "Rationale: Authselect makes testing and troubleshooting easy because it only modifies files in these directories:\n- `/etc/nsswitch.conf`\n- `/etc/pam.d/*`\n- `/etc/dconf/db/distro.d/*`\n\nTo ensure the system has full functionality and access to the options covered by this Benchmark, `authselect-1.2.6-2` or latter is required\nImpact: If local site customizations have been made to an authselect default or custom profile created with the `--symlink-pam` option, these customizations may be over-written by updating authselect.\n\n**WARNING:**\n\nDo not use authselect if:\n- your host is part of Linux Identity Management. Joining your host to an IdM domain with the ipa-client-install command automatically configures SSSD authentication on your host. \n- Your host is part of Active Directory via SSSD. Calling the realm join command to join your host to an Active Directory domain automatically configures SSSD authentication on your host.\n\nIt is **not** recommended to change the authselect profiles configured by ipa-client-install or realm join. If you need to modify them, display the current settings before making any modifications, so you can revert back to them if necessary"
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.3.1.2_guidance",
                        "prose": "Run the following command to install `authselect`:\n\n```\n# dnf install authselect\n```\n\n**- IF -** the version of `authselect` on the system is less that version `authselect-1.2.6-2`:\n\nRun the following command to update to the latest version of `authselect`:\n\n```\n# dnf upgrade authselect\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.3.1.2_assessment-method",
                        "prose": "Run the following command to verify the version of `authselect` on the system:\n\n```\n# rpm -q authselect\n```\n\nVerify output is version `authselect-1.2.6-2` or greater:\n\n_Example:_\n\n```\nauthselect-1.2.6-2.el9.x86_64\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.3.1.3",
                    "title": "Ensure latest version of libpwquality is installed",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.3.1.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.3.1.3_statement",
                        "prose": "`libpwquality` provides common functions for password quality checking and scoring them based on their apparent randomness. The library also provides a function for generating random passwords with good pronounceability.\n\nThis module can be plugged into the password stack of a given service to provide some plug-in strength-checking for passwords. The code was originally based on `pam_cracklib` module and the module is backwards compatible with its options."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.3.1.3_assessment-objective",
                        "prose": "Rationale: Strong passwords reduce the risk of systems being hacked through brute force methods."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.3.1.3_guidance",
                        "prose": "Run the following command to install `libpwquality`:\n\n```\n# dnf install libpwquality\n```\n\n**- IF -** the version of `libpwquality` on the system is less that version `libpwquality-1.4.4-8`:\n\nRun the following command to update to the latest version of `libpwquality`:\n\n```\n# dnf upgrade libpwquality\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.3.1.3_assessment-method",
                        "prose": "Run the following command to verify the version of `libpwquality` on the system:\n\n```\n# rpm -q libpwquality\n```\n\nVerify output is version `libpwquality-1.4.4-8` or greater:\n\n_Example:_ \n\n```\nlibpwquality-1.4.4-8.el9.x86_64\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              },
              {
                "id": "section-5-3-2",
                "title": "Configure authselect",
                "props": [
                  {
                    "name": "label",
                    "value": "5.3.2"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-5.3.2.1",
                    "title": "Ensure active authselect profile includes pam modules",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.3.2.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.3.2.1_statement",
                        "prose": "A custom profile can be created by copying and customizing one of the default profiles. The default profiles include: sssd, winbind, and nis. These profile can be customized to follow site specific requirements.\n\nYou can select a profile for the authselect utility for a specific host. The profile will be applied to every user logging into the host."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.3.2.1_assessment-objective",
                        "prose": "Rationale: A custom profile is required to customize many of the pam options. \n\nModifications made to a default profile may be overwritten during an update.\n\nWhen you deploy a profile, the profile is applied to every user logging into the given host\nImpact: If local site customizations have been made to the authselect template or files in `/etc/pam.d` these custom entries should be added to the newly created custom profile before it's applied to the system. \n\n**Note:** The order within the pam stacks is important when adding these entries. Specifically for the password stack, the `use_authtok` option is important, and should appear on all modules except for the first entry.\n\n_Example:_\n```\npassword requisite pam_pwquality.so local_users_only #<-- Top of password stack, doesn't include use_authtok\npassword required pam_pwhistory.so use_authtok #<-- subsequent entry in password stack, includes use_authtok\n```"
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.3.2.1_guidance",
                        "prose": "Perform the following to create a custom authselect profile, with the modules covered in this Benchmark correctly included in the custom profile template files\n\nRun the following command to create a custom authselect profile:\n\n```\n# authselect create-profile <custom-profile name> <options>\n```\n\n_Example:_\n\n```\n# authselect create-profile custom-profile -b sssd\n```\n\nRun the following command to select a custom authselect profile:\n\n```\n# authselect select custom/<CUSTOM PROFILE NAME> {with-<OPTIONS>} {--force}\n```\n\n_Example:_\n\n```\n# authselect select custom/custom-profile --backup=PAM_CONFIG_BACKUP --force\n```\n\n**Notes:** \n- The PAM and authselect packages must be versions `pam-1.3.1-25` and `authselect-1.2.6-1` or newer\n- The example is based on a custom profile built (copied) from the the `SSSD` default authselect profile.\n- The example does not include the `symlink` option for the `PAM` or `Metadata` files. This is due to the fact that by linking the `PAM` files future updates to `authselect` may overwrite local site customizations to the custom profile\n- The `--backup=PAM_CONFIG_BACKUP` option will create a backup of the current config. The backup will be stored at `/var/lib/authselect/backups/PAM_CONFIG_BACKUP`\n- The `--force` option will force the overwrite of the existing files and automatically backup system files before writing any change unless the `--nobackup` option is set.\n - On a new system where authselect has not been configured. In this case, the `--force` option will force the selected authselect profile to be active and overwrite the existing files with files generated from the selected authselect profile's templates\n - On an existing system with a custom configuration. The `--force` option may be used, but **ensure that you note the backup location included as your custom files will be overwritten.** This will allow you to review the changes and add any necessary customizations to the template files for the authselect profile. After updating the templates, run the command `authselect apply-changes` to add these custom entries to the files in `/etc/pam.d/`\n\n**- IF -** you receive an error ending with a message similar to:\n\n```\n[error] Refusing to activate profile unless those changes are removed or overwrite is requested.\nSome unexpected changes to the configuration were detected. Use 'select' command instead.\n```\n\nThis error is caused when the previous configuration was not created by authselect but by other tool or by manual changes and the `--force` option will be required to enable the authselect profile."
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.3.2.1_assessment-method",
                        "prose": "Run the following command to verify the active authselect profile includes lines for the `pwquality`, `pwhistory`, `faillock`, and `unix` modules:\n\n```\n# grep -P -- '\\b(pam_pwquality\\.so|pam_pwhistory\\.so|pam_faillock\\.so|pam_unix\\.so)\\b' /etc/authselect/\"$(head -1 /etc/authselect/authselect.conf)\"/{system,password}-auth\n```\n\n_Example output:_\n\n```\n/etc/authselect/custom/custom-profile/password-auth:auth required pam_faillock.so preauth silent {include if \"with-faillock\"}\n/etc/authselect/custom/custom-profile/password-auth:auth sufficient pam_unix.so {if not \"without-nullok\":nullok}\n/etc/authselect/custom/custom-profile/password-auth:auth required pam_faillock.so authfail {include if \"with-faillock\"}\n\n/etc/authselect/custom/custom-profile/password-auth:account required pam_faillock.so {include if \"with-faillock\"}\n/etc/authselect/custom/custom-profile/password-auth:account required pam_unix.so\n\n/etc/authselect/custom/custom-profile/password-auth:password requisite pam_pwquality.so local_users_only\n/etc/authselect/custom/custom-profile/password-auth:password required pam_pwhistory.so use_authtok\n/etc/authselect/custom/custom-profile/password-auth:password sufficient pam_unix.so sha512 shadow {if not \"without-nullok\":nullok} use_authtok\n\n/etc/authselect/custom/custom-profile/password-auth:session required pam_unix.so\n\n/etc/authselect/custom/custom-profile/system-auth:auth required pam_faillock.so preauth silent {include if \"with-faillock\"}\n/etc/authselect/custom/custom-profile/system-auth:auth sufficient pam_unix.so {if not \"without-nullok\":nullok}\n/etc/authselect/custom/custom-profile/system-auth:auth required pam_faillock.so authfail {include if \"with-faillock\"}\n\n/etc/authselect/custom/custom-profile/system-auth:account required pam_faillock.so {include if \"with-faillock\"}\n/etc/authselect/custom/custom-profile/system-auth:account required pam_unix.so\n\n/etc/authselect/custom/custom-profile/system-auth:password requisite pam_pwquality.so local_users_only\n/etc/authselect/custom/custom-profile/system-auth:password required pam_pwhistory.so use_authtok\n/etc/authselect/custom/custom-profile/system-auth:password sufficient pam_unix.so sha512 shadow {if not \"without-nullok\":nullok}\n\n/etc/authselect/custom/custom-profile/system-auth:session required pam_unix.so\n```\n\n**Notes:**\n- The lines may or may not include feature options defined by text surrounded by curly brackets (`{}`) e.g. `{include if \"with-faillock\"}`\n- File path may be different due to the active profile in use",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.3.2.2",
                    "title": "Ensure pam_faillock module is enabled",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.3.2.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.3.2.2_statement",
                        "prose": "The `pam_faillock.so` module maintains a list of failed authentication attempts per user during a specified interval and locks the account in case there were more than the configured number of consecutive failed authentications (this is defined by the `deny` parameter in the faillock configuration). It stores the failure records into per-user files in the tally directory."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.3.2.2_assessment-objective",
                        "prose": "Rationale: Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.3.2.2_guidance",
                        "prose": "Run the following script to verify the `pam_faillock.so` lines exist in the profile templates:\n\n```\n#!/usr/bin/env bash\n\n{\n l_module_name=\"faillock\"\n l_pam_profile=\"$(head -1 /etc/authselect/authselect.conf)\"\n if grep -Pq -- '^custom\\/' <<< \"$l_pam_profile\"; then\n l_pam_profile_path=\"/etc/authselect/$l_pam_profile\"\n else\n l_pam_profile_path=\"/usr/share/authselect/default/$l_pam_profile\"\n fi\n grep -P -- \"\\bpam_$l_module_name\\.so\\b\" \"$l_pam_profile_path\"/{password,system}-auth\n}\n```\n\n_Example Output with a custom profile named \"custom-profile\":_\n\n```\n/etc/authselect/custom/custom-profile/password-auth:auth required pam_faillock.so preauth silent {include if \"with-faillock\"}\n/etc/authselect/custom/custom-profile/password-auth:auth required pam_faillock.so authfail {include if \"with-faillock\"}\n/etc/authselect/custom/custom-profile/password-auth:account required pam_faillock.so {include if \"with-faillock\"}\n\n/etc/authselect/custom/custom-profile/system-auth:auth required pam_faillock.so preauth silent {include if \"with-faillock\"}\n/etc/authselect/custom/custom-profile/system-auth:auth required pam_faillock.so authfail {include if \"with-faillock\"}\n/etc/authselect/custom/custom-profile/system-auth:account required pam_faillock.so {include if \"with-faillock\"}\n```\n\n**Note:** The lines may not include `{include if \"with-faillock\"}`\n\n**- IF -** the lines shown above are not returned, refer to the Recommendation \"Ensure active authselect profile includes pam modules\" to update the authselect profile template files to include the `pam_faillock` entries before continuing this remediation.\n\n**- IF -** the lines include `{include if \"with-faillock\"}`, run the following command to enable the authselect `with-faillock` feature and update the files in `/etc/pam.d` to include `pam_faillock.so`:\n\n```\n# authselect enable-feature with-faillock\n```\n\n**- IF -** any of the `pam_faillock` lines exist without `{include if \"with-faillock\"}`, run the following command to update the files in `/etc/pam.d` to include `pam_faillock.so`:\n\n```\n# authselect apply-changes\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.3.2.2_assessment-method",
                        "prose": "Run the following commands to verify that `pam_faillock` is enabled\n\n```\n# grep -P -- '\\bpam_faillock.so\\b' /etc/pam.d/{password,system}-auth\n```\n\nOutput should be similar to:\n\n```\n/etc/pam.d/password-auth:auth required pam_faillock.so preauth silent\n/etc/pam.d/password-auth:auth required pam_faillock.so authfail\n\n/etc/pam.d/password-auth:account required pam_faillock.so\n\n/etc/pam.d/system-auth:auth required pam_faillock.so preauth silent\n/etc/pam.d/system-auth:auth required pam_faillock.so authfail\n\n/etc/pam.d/system-auth:account required pam_faillock.so\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.3.2.3",
                    "title": "Ensure pam_pwquality module is enabled",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.3.2.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.3.2.3_statement",
                        "prose": "The `pam_pwquality.so` module performs password quality checking. This module can be plugged into the password stack of a given service to provide strength-checking for passwords. The code was originally based on pam_cracklib module and the module is backwards compatible with its options. \n\nThe action of this module is to prompt the user for a password and check its strength against a system dictionary and a set of rules for identifying poor choices.\n\nThe first action is to prompt for a single password, check its strength and then, if it is considered strong, prompt for the password a second time (to verify that it was typed correctly on the first occasion). All being well, the password is passed on to subsequent modules to be installed as the new authentication token."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.3.2.3_assessment-objective",
                        "prose": "Rationale: Use of a unique, complex passwords helps to increase the time and resources required to compromise the password."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.3.2.3_guidance",
                        "prose": "Review the authselect profile templates:\n\nRun the following script to verify the `pam_pwquality.so` lines exist in the active profile templates:\n\n```\n#!/usr/bin/env bash\n\n{\n l_module_name=\"pwquality\"\n l_pam_profile=\"$(head -1 /etc/authselect/authselect.conf)\"\n if grep -Pq -- '^custom\\/' <<< \"$l_pam_profile\"; then\n l_pam_profile_path=\"/etc/authselect/$l_pam_profile\"\n else\n l_pam_profile_path=\"/usr/share/authselect/default/$l_pam_profile\"\n fi\n grep -P -- \"\\bpam_$l_module_name\\.so\\b\" \"$l_pam_profile_path\"/{password,system}-auth\n}\n```\n\n_Example Output with a custom profile named \"custom-profile\":_\n\n```\n/etc/authselect/custom/custom-profile/password-auth:password requisite pam_pwquality.so local_users_only {include if \"with-pwquality\"}\n\n/etc/authselect/custom/custom-profile/system-auth:password requisite pam_pwquality.so local_users_only {include if \"with-pwquality\"}\n```\n\n**Note:** The lines may not include `{include if \"with-pwquality\"}`\n\n**- IF -** the lines shown above are not returned, refer to the Recommendation \"Ensure active authselect profile includes pam modules\" to update the authselect profile template files to include the `pam_pwquality` entries before continuing this remediation. \n\n**- IF -** any of the `pam_pwquality` lines include `{include if \"with-pwquality\"}`, run the following command to enable the authselect `with-pwquality` feature and update the files in `/etc/pam.d` to include `pam_pwquality:\n\n```\n# authselect enable-feature with-pwquality\n```\n\n**- IF -** any of the `pam_pwquality` lines exist without `{include if \"with-pwquality\"}`, run the following command to update the files in `/etc/pam.d` to include `pam_pwquality.so`:\n\n```\n# authselect apply-changes\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.3.2.3_assessment-method",
                        "prose": "Run the following commands to verify that `pam_pwquality` is enabled:\n\n```\n# grep -P -- '\\bpam_pwquality\\.so\\b' /etc/pam.d/{password,system}-auth\n```\n\nOutput should be similar to:\n\n```\n/etc/pam.d/password-auth:password requisite pam_pwquality.so local_users_only\n/etc/pam.d/system-auth:password requisite pam_pwquality.so local_users_only\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.3.2.4",
                    "title": "Ensure pam_pwhistory module is enabled",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.3.2.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.3.2.4_statement",
                        "prose": "The `pam_history.so` module saves the last passwords for each user in order to force password change history and keep the user from alternating between the same password too frequently."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.3.2.4_assessment-objective",
                        "prose": "Rationale: Requiring users not to reuse their passwords make it less likely that an attacker will be able to guess the password or use a compromised password."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.3.2.4_guidance",
                        "prose": "Run the following script to verify the `pam_pwhistory.so` lines exist in the profile templates:\n\n```\n#!/usr/bin/env bash\n\n{\n l_module_name=\"pwhistory\"\n l_pam_profile=\"$(head -1 /etc/authselect/authselect.conf)\"\n if grep -Pq -- '^custom\\/' <<< \"$l_pam_profile\"; then\n l_pam_profile_path=\"/etc/authselect/$l_pam_profile\"\n else\n l_pam_profile_path=\"/usr/share/authselect/default/$l_pam_profile\"\n fi\n grep -P -- \"\\bpam_$l_module_name\\.so\\b\" \"$l_pam_profile_path\"/{password,system}-auth\n}\n```\n\n_Example Output with a custom profile named \"custom-profile\":_\n\n```\n/etc/authselect/custom/custom-profile/password-auth:password required pam_pwhistory.so use_authtok {include if \"with-pwhistory\"}\n\n/etc/authselect/custom/custom-profile/system-auth:password required pam_pwhistory.so use_authtok {include if \"with-pwhistory\"}\n```\n\n**Note:** The lines may not include `{include if \"with-pwhistory\"}`\n\n**- IF -** the lines shown above are not returned, refer to the Recommendation \"Ensure active authselect profile includes pam modules\" to update the authselect profile template files to include the `pam_pwhistory` entries before continuing this remediation.\n\n**- IF -** the lines include `{include if \"with-pwhistory\"}`, run the following command to enable the authselect `with-pwhistory` feature and update the files in `/etc/pam.d` to include `pam_faillock.so`:\n\n```\n# authselect enable-feature with-pwhistory\n```\n\n**- IF -** any of the `pam_pwhistory` lines exist without `{include if \"with-pwhistory\"}`, run the following command to update the files in `/etc/pam.d` to include `pam_pwhistory.so`:\n\n```\n# authselect apply-changes\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.3.2.4_assessment-method",
                        "prose": "Run the following commands to verify that `pam_pwhistory` is enabled:\n\n```\n# grep -P -- '\\bpam_pwhistory\\.so\\b' /etc/pam.d/{password,system}-auth\n```\n\nOutput should be similar to:\n\n```\n/etc/pam.d/password-auth:password required pam_pwhistory.so use_authtok\n/etc/pam.d/system-auth:password required pam_pwhistory.so use_authtok\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.3.2.5",
                    "title": "Ensure pam_unix module is enabled",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.3.2.5"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.3.2.5_statement",
                        "prose": "The `pam_unix.so` module is the standard Unix authentication module. It uses standard calls from the system's libraries to retrieve and set account information as well as authentication. Usually this is obtained from the `/etc/passwd` and the `/etc/shadow` file as well if shadow is enabled."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.3.2.5_assessment-objective",
                        "prose": "Rationale: Requiring users to use authentication make it less likely that an attacker will be able to access the system."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.3.2.5_guidance",
                        "prose": "Run the following script to verify the `pam_unix.so` lines exist in the profile templates:\n\n```\n#!/usr/bin/env bash\n\n{\n l_module_name=\"unix\"\n l_pam_profile=\"$(head -1 /etc/authselect/authselect.conf)\"\n if grep -Pq -- '^custom\\/' <<< \"$l_pam_profile\"; then\n l_pam_profile_path=\"/etc/authselect/$l_pam_profile\"\n else\n l_pam_profile_path=\"/usr/share/authselect/default/$l_pam_profile\"\n fi\n grep -P -- \"\\bpam_$l_module_name\\.so\\b\" \"$l_pam_profile_path\"/{password,system}-auth\n}\n```\n\n_Example Output with a custom profile named \"custom-profile\":_\n\n```\n/etc/authselect/custom/custom-profile/password-auth:auth sufficient pam_unix.so {if not \"without-nullok\":nullok}\n/etc/authselect/custom/custom-profile/password-auth:account required pam_unix.so\n/etc/authselect/custom/custom-profile/password-auth:password sufficient pam_unix.so sha512 shadow {if not \"without-nullok\":nullok} use_authtok remember=5\n/etc/authselect/custom/custom-profile/password-auth:session required pam_unix.so\n\n/etc/authselect/custom/custom-profile/system-auth:auth sufficient pam_unix.so {if not \"without-nullok\":nullok}\n/etc/authselect/custom/custom-profile/system-auth:account required pam_unix.so\n/etc/authselect/custom/custom-profile/system-auth:password sufficient pam_unix.so sha512 shadow {if not \"without-nullok\":nullok} use_authtok\n/etc/authselect/custom/custom-profile/system-auth:session required pam_unix.so\n```\n\n**- IF -** the lines shown above are not returned, refer to the Recommendation \"Ensure active authselect profile includes pam modules\" to update the authselect profile template files to include the `pam_unix` entries before continuing this remediation.\n\n**Note:** Arguments following `pam_unix.so` may be different than the example output"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.3.2.5_assessment-method",
                        "prose": "Run the following commands to verify that `pam_unix` is enabled:\n\n```\n# grep -P -- '\\bpam_unix\\.so\\b' /etc/pam.d/{password,system}-auth\n```\n\nOutput should be similar to:\n\n```\n/etc/pam.d/password-auth:auth sufficient pam_unix.so\n/etc/pam.d/password-auth:account required pam_unix.so\n/etc/pam.d/password-auth:password sufficient pam_unix.so sha512 shadow use_authtok\n/etc/pam.d/password-auth:session required pam_unix.so\n\n/etc/pam.d/system-auth:auth sufficient pam_unix.so\n/etc/pam.d/system-auth:account required pam_unix.so\n/etc/pam.d/system-auth:password sufficient pam_unix.so sha512 shadow use_authtok\n/etc/pam.d/system-auth:session required pam_unix.so\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              },
              {
                "id": "section-5-3-3",
                "title": "Configure PAM Arguments",
                "props": [
                  {
                    "name": "label",
                    "value": "5.3.3"
                  }
                ],
                "controls": [],
                "groups": [
                  {
                    "id": "section-5-3-3-1",
                    "title": "Configure pam_faillock module",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.3.3.1"
                      }
                    ],
                    "controls": [
                      {
                        "id": "cis-5.3.3.1.1",
                        "title": "Ensure password failed attempts lockout is configured",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.1.1"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.1.1_statement",
                            "prose": "The `deny=<n>` option will deny access if the number of consecutive authentication failures for this user during the recent interval exceeds _<n>_."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.1.1_assessment-objective",
                            "prose": "Rationale: Locking out user IDs after _n_ unsuccessful consecutive login attempts mitigates brute force password attacks against your systems."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.1.1_guidance",
                            "prose": "Create or edit the following line in `/etc/security/faillock.conf` setting the `deny` option to `5` or less:\n\n```\ndeny = 5\n```\n\nRun the following script to remove the `deny` argument from the `pam_faillock.so` module in the PAM files:\n\n```\n#!/usr/bin/env bash\n{\n for l_pam_file in system-auth password-auth; do\n l_authselect_file=\"/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file\"\n sed -ri 's/(^\\s*auth\\s+(requisite|required|sufficient)\\s+pam_faillock\\.so.*)(\\s+deny\\s*=\\s*\\S+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n done\n authselect apply-changes\n}\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.1.1_assessment-method",
                            "prose": "Run the following command to verify that Number of failed logon attempts before the account is locked is no greater than `5` and meets local site policy:\n\n```\n# grep -Pi -- '^\\h*deny\\h*=\\h*[1-5]\\b' /etc/security/faillock.conf\n\ndeny = 5\n```\n\nRun the following command to verify that the `deny` argument has not been set, or is set to 5 or less and meets local site policy:\n\n```\n# grep -Pi -- '^\\h*auth\\h+(requisite|required|sufficient)\\h+pam_faillock\\.so\\h+([^#\\n\\r]+\\h+)?deny\\h*=\\h*(0|[6-9]|[1-9][0-9]+)\\b' /etc/pam.d/system-auth /etc/pam.d/password-auth\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-5.3.3.1.2",
                        "title": "Ensure password unlock time is configured",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.1.2"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.1.2_statement",
                            "prose": "`unlock_time=<n>` - The access will be re-enabled after _<n>_ seconds after the lock out. The value `0` has the same meaning as value never - the access will not be re-enabled without resetting the faillock entries by the faillock(8) command.\n\n**Notes:**\n- The default directory that pam_faillock uses is usually cleared on system boot so the access will be also re-enabled after system reboot. If that is undesirable a different tally directory must be set with the dir option.\n- It is usually undesirable to permanently lock out users as they can become easily a target of denial of service attack unless the usernames are random and kept secret to potential attackers.\n- The maximum configurable value for `unlock_time` is `604800`"
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.1.2_assessment-objective",
                            "prose": "Rationale: Locking out user IDs after _n_ unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.\nImpact: Use of `unlock_time=0` may allow an attacker to cause denial of service to legitimate users. This will also require a systems administrator with elevated privileges to unlock the account."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.1.2_guidance",
                            "prose": "Set password unlock time to conform to site policy. `unlock_time` should be `0` (never), or `900` seconds or greater.\n\nEdit `/etc/security/faillock.conf` and update or add the following line:\n\n```\nunlock_time = 900\n```\n\nRun the following script to remove the `unlock_time` argument from the `pam_faillock.so` module in the PAM files:\n\n```\n#!/usr/bin/env bash\n{\n for l_pam_file in system-auth password-auth; do\n l_authselect_file=\"/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file\"\n sed -ri 's/(^\\s*auth\\s+(requisite|required|sufficient)\\s+pam_faillock\\.so.*)(\\s+unlock_time\\s*=\\s*\\S+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n done\n authselect apply-changes\n}\n``"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.1.2_assessment-method",
                            "prose": "Run the following command to verify that the time in seconds before the account is unlocked is either `0` (never) or `900` (15 minutes) or more and meets local site policy:\n\n```\n# grep -Pi -- '^\\h*unlock_time\\h*=\\h*(0|9[0-9][0-9]|[1-9][0-9]{3,})\\b' /etc/security/faillock.conf\n\nunlock_time = 900\n```\n\nRun the following command to verify that the `unlock_time` argument has not been set, or is either `0` (never) or `900` (15 minutes) or more and meets local site policy:\n\n```\n# grep -Pi -- '^\\h*auth\\h+(requisite|required|sufficient)\\h+pam_faillock\\.so\\h+([^#\\n\\r]+\\h+)?unlock_time\\h*=\\h*([1-9]|[1-9][0-9]|[1-8][0-9][0-9])\\b' /etc/pam.d/system-auth /etc/pam.d/password-auth\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-5.3.3.1.3",
                        "title": "Ensure password failed attempts lockout includes root account",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.1.3"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.1.3_statement",
                            "prose": "`even_deny_root` - Root account can become locked as well as regular accounts\n\n`root_unlock_time=n` - This option implies even_deny_root option. Allow access after n seconds to root account after the account is locked. In case the option is not specified the value is the same as of the unlock_time option."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.1.3_assessment-objective",
                            "prose": "Rationale: Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.\nImpact: Use of `unlock_time=0` or `root_unlock_time=0` may allow an attacker to cause denial of service to legitimate users."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.1.3_guidance",
                            "prose": "Edit `/etc/security/faillock.conf`:\n- Remove or update any line containing `root_unlock_time`, **- OR -** set it to a value of `60` or more\n- Update or add the following line:\n\n```\neven_deny_root\n```\n\nRun the following script to remove the `even_deny_root` and `root_unlock_time` arguments from the `pam_faillock.so` module in the PAM files:\n\n```\n#!/usr/bin/env bash\n{\n for l_pam_file in system-auth password-auth; do\n l_authselect_file=\"/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file\"\n sed -ri 's/(^\\s*auth\\s+(.*)\\s+pam_faillock\\.so.*)(\\s+even_deny_root)(.*$)/\\1\\4/' \"$l_authselect_file\"\n sed -ri 's/(^\\s*auth\\s+(.*)\\s+pam_faillock\\.so.*)(\\s+root_unlock_time\\s*=\\s*\\S+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n done\n authselect apply-changes\n}\n``"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.1.3_assessment-method",
                            "prose": "Run the following command to verify that `even_deny_root` and/or `root_unlock_time` is enabled:\n\n```\n# grep -Pi -- '^\\h*(even_deny_root|root_unlock_time\\h*=\\h*\\d+)\\b' /etc/security/faillock.conf\n```\n\n_Example output:_\n\n```\neven_deny_root\n\n--AND/OR--\n\nroot_unlock_time = 60\n```\n\nRun the following command to verify that **- IF -** `root_unlock_time` is set, it is set to `60` (One minute) or more:\n\n```\n# grep -Pi -- '^\\h*root_unlock_time\\h*=\\h*([1-9]|[1-5][0-9])\\b' /etc/security/faillock.conf\n\nNothing should be returned\n```\n\nRun the following command to check the `pam_faillock.so` module for the `root_unlock_time` argument. Verify **- IF -** `root_unlock_time` is set, it is set to `60` (One minute) or more:\n\n```\n# grep -Pi -- '^\\h*auth\\h+([^#\\n\\r]+\\h+)pam_faillock\\.so\\h+([^#\\n\\r]+\\h+)?root_unlock_time\\h*=\\h*([1-9]|[1-5][0-9])\\b' /etc/pam.d/system-auth /etc/pam.d/password-auth\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "groups": []
                  },
                  {
                    "id": "section-5-3-3-2",
                    "title": "Configure pam_pwquality module",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.3.3.2"
                      }
                    ],
                    "controls": [
                      {
                        "id": "cis-5.3.3.2.1",
                        "title": "Ensure password number of changed characters is configured",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.2.1"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.2.1_statement",
                            "prose": "The `pwquality` `difok` option sets the number of characters in a password that must not be present in the old password."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.2.1_assessment-objective",
                            "prose": "Rationale: Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.2.1_guidance",
                            "prose": "Create or modify a file ending in `.conf` in the `/etc/security/pwquality.conf.d/` directory or the file `/etc/security/pwquality.conf` and add or modify the following line to set `difok` to `2` or more. Ensure setting conforms to local site policy:\n\n```\ndifok = 2\n```\n\n_Example:_\n\n```\n# sed -ri 's/^\\s*difok\\s*=/# &/' /etc/security/pwquality.conf\n# printf '\\n%s' \"difok = 2\" >> /etc/security/pwquality.conf.d/50-pwdifok.conf\n```\n\nRun the following script to remove setting `difok` on the `pam_pwquality.so` module in the PAM files:\n\n```\n#!/usr/bin/env bash\n\n{\n for l_pam_file in system-auth password-auth; do\n l_authselect_file=\"/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality\\.so.*)(\\s+difok\\s*=\\s*\\S+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n done\n authselect apply-changes\n}\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.2.1_assessment-method",
                            "prose": "Run the following command to verify that the `difok` option is set to `2` or more and follows local site policy:\n\n```\n# grep -Psi -- '^\\h*difok\\h*=\\h*([2-9]|[1-9][0-9]+)\\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n```\n\n_Example output:_\n\n```\n/etc/security/pwquality.conf.d/50-pwdifok.conf:difok = 2\n```\n\nVerify returned value(s) are `2` or more and meet local site policy\n\nRun the following command to verify that `difok` is not set, is `2` or more, and conforms to local site policy:\n\n```\ngrep -Psi -- '^\\h*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?difok\\h*=\\h*([0-1])\\b' /etc/pam.d/system-auth /etc/pam.d/password-auth\n\nNothing should be returned\n```\n\n**Notes:** \n- settings should be configured in only **one** location for clarity\n- Settings observe an order of precedence:\n - module arguments override the settings in the `/etc/security/pwquality.conf` configuration file\n - settings in the `/etc/security/pwquality.conf` configuration file override settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory\n - settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory are read in canonical order, with last read file containing the setting taking precedence\n- It is recommended that settings be configured in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory for clarity, convenience, and durability.",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-5.3.3.2.2",
                        "title": "Ensure password length is configured",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.2.2"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.2.2_statement",
                            "prose": "`minlen` - Minimum acceptable size for the new password (plus one if credits are not disabled which is the default). Cannot be set to lower value than 6."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.2.2_assessment-objective",
                            "prose": "Rationale: Strong passwords protect systems from being hacked through brute force methods."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.2.2_guidance",
                            "prose": "Create or modify a file ending in `.conf` in the `/etc/security/pwquality.conf.d/` directory or the file `/etc/security/pwquality.conf` and add or modify the following line to set password length of `14` or more characters. Ensure that password length conforms to local site policy: \n\n_Example:_\n\n```\n# sed -ri 's/^\\s*minlen\\s*=/# &/' /etc/security/pwquality.conf\n# printf '\\n%s' \"minlen = 14\" >> /etc/security/pwquality.conf.d/50-pwlength.conf\n```\n\nRun the following script to remove setting `minlen` on the `pam_pwquality.so` module in the PAM files:\n\n```\n#!/usr/bin/env bash\n\n{\n for l_pam_file in system-auth password-auth; do\n l_authselect_file=\"/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality\\.so.*)(\\s+minlen\\s*=\\s*[0-9]+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n done\n authselect apply-changes\n}\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.2.2_assessment-method",
                            "prose": "Run the following command to verify that password length is `14` or more characters, and conforms to local site policy:\n\n```\n# grep -Psi -- '^\\h*minlen\\h*=\\h*(1[4-9]|[2-9][0-9]|[1-9][0-9]{2,})\\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n```\n\n_Example output:_\n\n```\n/etc/security/pwquality.conf.d/50-pwlength.conf:minlen = 14\n```\n\nVerify returned value(s) are no less than `14` characters and meet local site policy\n\nRun the following command to verify that `minlen` is not set, or is `14` or more characters, and conforms to local site policy:\n\n```\ngrep -Psi -- '^\\h*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?minlen\\h*=\\h*([0-9]|1[0-3])\\b' /etc/pam.d/system-auth /etc/pam.d/password-auth\n\nNothing should be returned\n```\n\n**Notes:** \n- settings should be configured in only **one** location for clarity\n- Settings observe an order of precedence:\n - module arguments override the settings in the `/etc/security/pwquality.conf` configuration file\n - settings in the `/etc/security/pwquality.conf` configuration file override settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory\n - settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory are read in canonical order, with last read file containing the setting taking precedence\n- It is recommended that settings be configured in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory for clarity, convenience, and durability.",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-5.3.3.2.3",
                        "title": "Ensure password complexity is configured",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.2.3"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.2.3_statement",
                            "prose": "Password complexity can be set through:\n- `minclass` - The minimum number of classes of characters required in a new password. (digits, uppercase, lowercase, others). e.g. `minclass = 4` requires digits, uppercase, lower case, and special characters. \n- `dcredit` - The maximum credit for having digits in the new password. If less than `0` it is the minimum number of digits in the new password. e.g. `dcredit = -1` requires at least one digit\n- `ucredit` - The maximum credit for having uppercase characters in the new password. If less than 0 it is the minimum number of uppercase characters in the new password. e.g. `ucredit = -1` requires at least one uppercase character\n- `ocredit` - The maximum credit for having other characters in the new password. If less than 0 it is the minimum number of other characters in the new password. e.g. `ocredit = -1` requires at least one special character\n- `lcredit` - The maximum credit for having lowercase characters in the new password. If less than 0 it is the minimum number of lowercase characters in the new password. e.g. `lcredit = -1` requires at least one lowercase character"
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.2.3_assessment-objective",
                            "prose": "Rationale: Strong passwords protect systems from being hacked through brute force methods."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.2.3_guidance",
                            "prose": "Create or modify a file ending in `.conf` in the `/etc/security/pwquality.conf.d/` directory or the file `/etc/security/pwquality.conf` and add or modify the following line to set:\n- `minclass = 4`\n\n**--AND/OR--**\n- `dcredit = -_N_`\n- `ucredit = -_N_`\n- `ocredit = -_N_`\n- `lcredit = -_N_`\n\n_Example:_\n\n```\n# sed -ri 's/^\\s*minclass\\s*=/# &/' /etc/security/pwquality.conf\n# printf '\\n%s' \"minclass = 4\" >> /etc/security/pwquality.conf.d/50-pwcomplexity.conf\n```\n\n**--AND/OR--**\n\n```\n# sed -ri 's/^\\s*[dulo]credit\\s*=/# &/' /etc/security/pwquality.conf\n# printf '%s\\n' \"dcredit = -1\" \"ucredit = -1\" \"ocredit = -1\" \"lcredit = -1\" > /etc/security/pwquality.conf.d/50-pwcomplexity.conf\n```\n\nRun the following script to remove setting `minclass`, `dcredit`, `ucredit`, `lcredit`, and `ocredit` on the `pam_pwquality.so` module in the PAM files\n\n```\n#!/usr/bin/env bash\n\n{\n for l_pam_file in system-auth password-auth; do\n l_authselect_file=\"/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality\\.so.*)(\\s+minclass\\s*=\\s*\\S+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality\\.so.*)(\\s+dcredit\\s*=\\s*\\S+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality\\.so.*)(\\s+ucredit\\s*=\\s*\\S+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality\\.so.*)(\\s+lcredit\\s*=\\s*\\S+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality\\.so.*)(\\s+ocredit\\s*=\\s*\\S+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n done\n authselect apply-changes\n}\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.2.3_assessment-method",
                            "prose": "Run the following command to verify that complexity conforms to local site policy:\n\n```\n# grep -Psi -- '^\\h*(minclass|[dulo]credit)\\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n```\n\n_Example output:_\n\n```\n/etc/security/pwquality.conf.d/50-pwcomplexity.conf:minclass = 4\n -- AND/OR --\n/etc/security/pwquality.conf.d/50-pwcomplexity.conf:dcredit = -1\n/etc/security/pwquality.conf.d/50-pwcomplexity.conf:ucredit = -1\n/etc/security/pwquality.conf.d/50-pwcomplexity.conf:ocredit = -1\n/etc/security/pwquality.conf.d/50-pwcomplexity.conf:lcredit = -1\n```\n\nRun the following command to verify that:\n- `minclass` is not set to less than `4`\n- `dcredit`, `ucredit`, `lcredit`, and `ocredit` are not set to `0` or greater\n\n```\ngrep -Psi -- '^\\h*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?(minclass=[0-3]|[dulo]credit=[^-]\\d*)\\b' /etc/pam.d/system-auth /etc/pam.d/password-auth\n\nNothing should be returned\n```\n\n**Notes:**\n- settings should be configured in only **one** location for clarity\n- Settings observe an order of precedence:\n - module arguments override the settings in the `/etc/security/pwquality.conf` configuration file\n - settings in the `/etc/security/pwquality.conf` configuration file override settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory\n - settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory are read in canonical order, with last read file containing the setting taking precedence\n- It is recommended that settings be configured in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory for clarity, convenience, and durability.",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-5.3.3.2.4",
                        "title": "Ensure password same consecutive characters is configured",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.2.4"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.2.4_statement",
                            "prose": "The `pwquality` `maxrepeat` option sets the maximum number of allowed same consecutive characters in a new password."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.2.4_assessment-objective",
                            "prose": "Rationale: Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.2.4_guidance",
                            "prose": "Create or modify a file ending in `.conf` in the `/etc/security/pwquality.conf.d/` directory or the file `/etc/security/pwquality.conf` and add or modify the following line to set `maxrepeat` to `3` or less and not `0`. Ensure setting conforms to local site policy:\n\n_Example:_\n\n```\n# sed -ri 's/^\\s*maxrepeat\\s*=/# &/' /etc/security/pwquality.conf\n# printf '\\n%s' \"maxrepeat = 3\" >> /etc/security/pwquality.conf.d/50-pwrepeat.conf\n```\n\nRun the following script to remove setting `maxrepeat` on the `pam_pwquality.so` module in the PAM files:\n\n```\n#!/usr/bin/env bash\n\n{\n for l_pam_file in system-auth password-auth; do\n l_authselect_file=\"/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality\\.so.*)(\\s+maxrepeat\\s*=\\s*\\S+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n done\n authselect apply-changes\n}\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.2.4_assessment-method",
                            "prose": "Run the following command to verify that the `maxrepeat` option is set to `3` or less, not `0`, and follows local site policy:\n\n```\n# grep -Psi -- '^\\h*maxrepeat\\h*=\\h*[1-3]\\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n```\n\n_Example output:_\n\n```\n/etc/security/pwquality.conf.d/50-pwrepeat.conf:maxrepeat = 3\n```\n\nVerify returned value(s) are `3` or less, not `0`, and meet local site policy\n\nRun the following command to verify that `maxrepeat` is not set, is `3` or less, not `0`, and conforms to local site policy:\n\n```\ngrep -Psi -- '^\\h*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?maxrepeat\\h*=\\h*(0|[4-9]|[1-9][0-9]+)\\b' /etc/pam.d/system-auth /etc/pam.d/password-auth\n\nNothing should be returned\n```\n\n**Notes:** \n- settings should be configured in only **one** location for clarity\n- Settings observe an order of precedence:\n - module arguments override the settings in the `/etc/security/pwquality.conf` configuration file\n - settings in the `/etc/security/pwquality.conf` configuration file override settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory\n - settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory are read in canonical order, with last read file containing the setting taking precedence\n- It is recommended that settings be configured in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory for clarity, convenience, and durability.",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-5.3.3.2.5",
                        "title": "Ensure password maximum sequential characters is configured",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.2.5"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.2.5_statement",
                            "prose": "The `pwquality` `maxsequence` option sets the maximum length of monotonic character sequences in the new password. Examples of such sequence are `12345` or `fedcb`. The check is disabled if the value is `0`.\n\n**Note:** Most such passwords will not pass the simplicity check unless the sequence is only a minor part of the password."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.2.5_assessment-objective",
                            "prose": "Rationale: Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.2.5_guidance",
                            "prose": "Create or modify a file ending in `.conf` in the `/etc/security/pwquality.conf.d/` directory or the file `/etc/security/pwquality.conf` and add or modify the following line to set `maxsequence` to `3` or less and not `0`. Ensure setting conforms to local site policy:\n\n_Example:_\n\n```\n# sed -ri 's/^\\s*maxsequence\\s*=/# &/' /etc/security/pwquality.conf\n# printf '\\n%s' \"maxsequence = 3\" >> /etc/security/pwquality.conf.d/50-pwmaxsequence.conf\n```\n\nRun the following script to remove setting `maxsequence` on the `pam_pwquality.so` module in the PAM files:\n\n```\n#!/usr/bin/env bash\n\n{\n for l_pam_file in system-auth password-auth; do\n l_authselect_file=\"/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality\\.so.*)(\\s+maxsequence\\s*=\\s*\\S+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n done\n authselect apply-changes\n}\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.2.5_assessment-method",
                            "prose": "Run the following command to verify that the `maxsequence` option is set to `3` or less, not `0`, and follows local site policy:\n\n```\n# grep -Psi -- '^\\h*maxsequence\\h*=\\h*[1-3]\\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n```\n\n_Example output:_\n\n```\n/etc/security/pwquality.conf.d/50-pwmaxsequence.conf:maxsequence = 3\n```\n\nVerify returned value(s) are `3` or less, not `0`, and meet local site policy\n\nRun the following command to verify that `maxsequence` is not set, is `3` or less, not `0`, and conforms to local site policy:\n\n```\ngrep -Psi -- '^\\h*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?maxsequence\\h*=\\h*(0|[4-9]|[1-9][0-9]+)\\b' /etc/pam.d/system-auth /etc/pam.d/password-auth\n\nNothing should be returned\n```\n\n**Note:** \n- settings should be configured in only **one** location for clarity\n- Settings observe an order of precedence:\n - module arguments override the settings in the `/etc/security/pwquality.conf` configuration file\n - settings in the `/etc/security/pwquality.conf` configuration file override settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory\n - settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory are read in canonical order, with last read file containing the setting taking precedence\n- It is recommended that settings be configured in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory for clarity, convenience, and durability.",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-5.3.3.2.6",
                        "title": "Ensure password dictionary check is enabled",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.2.6"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.2.6_statement",
                            "prose": "The `pwquality` `dictcheck` option sets whether to check for the words from the `cracklib` dictionary."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.2.6_assessment-objective",
                            "prose": "Rationale: If the operating system allows the user to select passwords based on dictionary words, this increases the chances of password compromise by increasing the opportunity for successful guesses, and brute-force attacks."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.2.6_guidance",
                            "prose": "Edit any file ending in `.conf` in the `/etc/security/pwquality.conf.d/` directory and/or the file `/etc/security/pwquality.conf` and comment out or remove any instance of `dictcheck = 0`: \n\n_Example:_\n\n```\n# sed -ri 's/^\\s*dictcheck\\s*=/# &/' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n```\n\nRun the following script to remove setting `dictcheck` on the `pam_pwquality.so` module in the PAM files:\n\n```\n#!/usr/bin/env bash\n\n{\n for l_pam_file in system-auth password-auth; do\n l_authselect_file=\"/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality\\.so.*)(\\s+dictcheck\\s*=\\s*\\S+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n done\n authselect apply-changes\n}\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.2.6_assessment-method",
                            "prose": "Run the following command to verify that the `dictcheck` option is not set to `0` (disabled) in a pwquality configuration file:\n\n```\n# grep -Psi -- '^\\h*dictcheck\\h*=\\h*0\\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n\nNothing should be returned\n```\n\nRun the following command to verify that the `dictcheck` option is not set to `0` (disabled) as a module argument in a PAM file:\n\n```\n# grep -Psi -- '^\\h*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?dictcheck\\h*=\\h*0\\b' /etc/pam.d/system-auth /etc/pam.d/password-auth\n\nNothing should be returned\n```\n\n**Notes:** \n- Settings observe an order of precedence:\n - module arguments override the settings in the `/etc/security/pwquality.conf` configuration file\n - settings in the `/etc/security/pwquality.conf` configuration file override settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory\n - settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory are read in canonical order, with last read file containing the setting taking precedence\n- It is recommended that settings be configured in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory for clarity, convenience, and durability.",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-5.3.3.2.7",
                        "title": "Ensure password quality is enforced for the root user",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.2.7"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.2.7_statement",
                            "prose": "If the `pwquality` `enforce_for_root` option is enabled, the module will return error on failed check even if the user changing the password is root. \n\nThis option is off by default which means that just the message about the failed check is printed but root can change the password anyway. \n\n**Note:** The root is not asked for an old password so the checks that compare the old and new password are not performed."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.2.7_assessment-objective",
                            "prose": "Rationale: Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.2.7_guidance",
                            "prose": "Edit or add the following line in a `*.conf` file in `/etc/security/pwquality.conf.d` or in `/etc/security/pwquality.conf`:\n\n_Example:_\n\n```\nprintf '\\n%s\\n' \"enforce_for_root\" >> /etc/security/pwquality.conf.d/50-pwroot.conf\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.2.7_assessment-method",
                            "prose": "Run the following command to verify that the `enforce_for_root` option is enabled in a pwquality configuration file:\n\n```\n# grep -Psi -- '^\\h*enforce_for_root\\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n```\n\n_Example output:_\n\n```\n/etc/security/pwquality.conf.d/50-pwroot.conf:enforce_for_root\n```\n\n**Notes:** \n- Settings observe an order of precedence:\n - module arguments override the settings in the `/etc/security/pwquality.conf` configuration file\n - settings in the `/etc/security/pwquality.conf` configuration file override settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory\n - settings in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory are read in canonical order, with last read file containing the setting taking precedence\n- It is recommended that settings be configured in a `.conf` file in the `/etc/security/pwquality.conf.d/` directory for clarity, convenience, and durability.",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "groups": []
                  },
                  {
                    "id": "section-5-3-3-3",
                    "title": "Configure pam_pwhistory module",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.3.3.3"
                      }
                    ],
                    "controls": [
                      {
                        "id": "cis-5.3.3.3.1",
                        "title": "Ensure password history remember is configured",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.3.1"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.3.1_statement",
                            "prose": "The `/etc/security/opasswd` file stores the users' old passwords and can be checked to ensure that users are not recycling recent passwords. The number of passwords remembered is set via the remember argument value in set for the `pam_pwhistory` module.\n\n- remember=<N> - `<N>` is the number of old passwords to remember"
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.3.1_assessment-objective",
                            "prose": "Rationale: Requiring users not to reuse their passwords make it less likely that an attacker will be able to guess the password or use a compromised password.\n\n**Note:** These change only apply to accounts configured on the local system."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.3.1_guidance",
                            "prose": "Edit or add the following line in `/etc/security/pwhistory.conf`:\n\n```\nremember = 24\n```\n\nRun the following script to remove the `remember` argument from the `pam_pwhistory.so` module in `/etc/pam.d/system-auth` and `/etc/pam.d/password-auth`:\n\n```\n#!/usr/bin/env bash\n\n{\n for l_pam_file in system-auth password-auth; do\n l_authselect_file=\"/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwhistory\\.so.*)(\\s+remember\\s*=\\s*\\S+)(.*$)/\\1\\4/' \"$l_authselect_file\"\n done\n authselect apply-changes\n}\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.3.1_assessment-method",
                            "prose": "Run the following command and verify that the remember option is set to `24` or more and meets local site policy in `/etc/security/pwhistory.conf`:\n\n```\n# grep -Pi -- '^\\h*remember\\h*=\\h*(2[4-9]|[3-9][0-9]|[1-9][0-9]{2,})\\b' /etc/security/pwhistory.conf\n\nremember = 24\n```\n\nRun the following command to verify that the remember option is not set to less than `24` on the `pam_pwhistory.so` module in `/etc/pam.d/password-auth` and `/etc/pam.d/system-auth`:\n\n```\n# grep -Pi -- '^\\h*password\\h+(requisite|required|sufficient)\\h+pam_pwhistory\\.so\\h+([^#\\n\\r]+\\h+)?remember=(2[0-3]|1[0-9]|[0-9])\\b' /etc/pam.d/system-auth /etc/pam.d/password-auth\n\nNothing should be returned\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-5.3.3.3.2",
                        "title": "Ensure password history is enforced for the root user",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.3.2"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.3.2_statement",
                            "prose": "If the `pwhistory` `enforce_for_root` option is enabled, the module will enforce password history for the root user as well"
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.3.2_assessment-objective",
                            "prose": "Rationale: Requiring users not to reuse their passwords make it less likely that an attacker will be able to guess the password or use a compromised password\n\n**Note:** These change only apply to accounts configured on the local system."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.3.2_guidance",
                            "prose": "Edit or add the following line in `/etc/security/pwhistory.conf`:\n\n```\nenforce_for_root\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.3.2_assessment-method",
                            "prose": "Run the following command to verify that the `enforce_for_root` option is enabled in `/etc/pwhistory.conf`:\n\n```\n# grep -Pi -- '^\\h*enforce_for_root\\b' /etc/security/pwhistory.conf\n\nenforce_for_root\n```\n\n**Notes:** \n- Settings observe an order of precedence. \n- Module arguments override the settings in the `/etc/security/pwhistory.conf` configuration file\n- It is recommended that settings be configured in `/etc/security/pwhistory.conf` for clarity, convenience, and durability.",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-5.3.3.3.3",
                        "title": "Ensure pam_pwhistory includes use_authtok",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.3.3"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.3.3_statement",
                            "prose": "`use_authtok` - When password changing enforce the module to set the new password to the one provided by a previously stacked password module"
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.3.3_assessment-objective",
                            "prose": "Rationale: `use_authtok` allows multiple pam modules to confirm a new password before it is accepted."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.3.3_guidance",
                            "prose": "Run the following script to verify the active authselect profile includes `use_authtok` on the password stack's `pam_pwhistory.so` module lines:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pam_profile=\"$(head -1 /etc/authselect/authselect.conf)\"\n if grep -Pq -- '^custom\\/' <<< \"$l_pam_profile\"; then\n l_pam_profile_path=\"/etc/authselect/$l_pam_profile\"\n else\n l_pam_profile_path=\"/usr/share/authselect/default/$l_pam_profile\"\n fi\n grep -P -- '^\\h*password\\h+(requisite|required|sufficient)\\h+pam_pwhistory\\.so\\h+([^#\\n\\r]+\\h+)?use_authtok\\b' \"$l_pam_profile_path\"/{password,system}-auth\n}\n```\n\n_Example output:_\n\n```\n/etc/authselect/custom/custom-profile/password-auth:password required pam_pwhistory.so use_authtok\n\n/etc/authselect/custom/custom-profile/system-auth:password required pam_pwhistory.so use_authtok\n```\n\n**- IF -** the output does not include `use_authtok`, run the following script:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pam_profile=\"$(head -1 /etc/authselect/authselect.conf)\"\n if grep -Pq -- '^custom\\/' <<< \"$l_pam_profile\"; then\n l_pam_profile_path=\"/etc/authselect/$l_pam_profile\"\n else\n l_pam_profile_path=\"/usr/share/authselect/default/$l_pam_profile\"\n fi\n for l_authselect_file in \"$l_pam_profile_path\"/password-auth \"$l_pam_profile_path\"/system-auth; do\n if grep -Pq '^\\h*password\\h+([^#\\n\\r]+)\\h+pam_pwhistory\\.so\\h+([^#\\n\\r]+\\h+)?use_authtok\\b' \"$l_authselect_file\"; then\n echo \"- \\\"use_authtok\\\" is already set\"\n else\n echo \"- \\\"use_authtok\\\" is not set. Updating template\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwhistory\\.so\\s+.*)$/& use_authtok/g' \"$l_authselect_file\"\n fi\n done\n}\n```\n\nRun the following command to update the `password-auth` and `system-auth` files in `/etc/pam.d` to include the `use_authtok` argument on the password stack's `pam_pwhistory.so` lines:\n\n```\n# authselect apply-changes\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.3.3_assessment-method",
                            "prose": "Run the following command to verify that `use_authtok` is set on the `pam_pwhistory.so` module lines in the password stack:\n\n```\n# grep -P -- '^\\h*password\\h+([^#\\n\\r]+)\\h+pam_pwhistory\\.so\\h+([^#\\n\\r]+\\h+)?use_authtok\\b' /etc/pam.d/{password,system}-auth\n```\n\nOutput should be similar to:\n\n```\n/etc/pam.d/password-auth:password required pam_pwhistory.so use_authtok\n\n/etc/pam.d/system-auth:password required pam_pwhistory.so use_authtok\n```\n\nVerify that the lines include `use_authtok`",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "groups": []
                  },
                  {
                    "id": "section-5-3-3-4",
                    "title": "Configure pam_unix module",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.3.3.4"
                      }
                    ],
                    "controls": [
                      {
                        "id": "cis-5.3.3.4.1",
                        "title": "Ensure pam_unix does not include nullok",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.4.1"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.4.1_statement",
                            "prose": "The `nullok` argument overrides the default action of `pam_unix.so` to not permit the user access to a service if their official password is blank."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.4.1_assessment-objective",
                            "prose": "Rationale: Using a strong password is essential to helping protect personal and sensitive information from unauthorized access"
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.4.1_guidance",
                            "prose": "Run the following script to verify that the active authselect profile's `system-auth` and `password-auth` files include `{if not \"without-nullok\":nullok}` **- OR -** don't include the `nullok` option on the `pam_unix.so` module:\n\n```\n{\n l_module_name=\"unix\"\n l_profile_name=\"$(head -1 /etc/authselect/authselect.conf)\"\n if [[ ! \"$l_profile_name\" =~ ^custom\\/ ]]; then\n echo \" - Follow Recommendation \\\"Ensure custom authselect profile is used\\\" and then return to this Recommendation\"\n else\n grep -P -- \"\\bpam_$l_module_name\\.so\\b\" /etc/authselect/$l_profile_name/{password,system}-auth\n fi\n}\n```\n\n_Example output with a custom profile named \"custom-profile\":_\n\n```\n/etc/authselect/custom/custom-profile/password-auth:auth sufficient pam_unix.so {if not \"without-nullok\":nullok}\n/etc/authselect/custom/custom-profile/password-auth:account required pam_unix.so\n/etc/authselect/custom/custom-profile/password-auth:password sufficient pam_unix.so sha512 shadow {if not \"without-nullok\":nullok} use_authtok\n/etc/authselect/custom/custom-profile/password-auth:session required pam_unix.so\n\n/etc/authselect/custom/custom-profile/system-auth:auth sufficient pam_unix.so {if not \"without-nullok\":nullok}\n/etc/authselect/custom/custom-profile/system-auth:account required pam_unix.so\n/etc/authselect/custom/custom-profile/system-auth:password sufficient pam_unix.so sha512 shadow {if not \"without-nullok\":nullok} use_authtok\n/etc/authselect/custom/custom-profile/system-auth:session required pam_unix.so\n```\n\n**- IF -** any line is returned with `nullok` that doesn't also include `{if not \"without-nullok\":nullok}`, run the following script:\n\n```\n#!/usr/bin/env bash\n\n{\n for l_pam_file in system-auth password-auth; do\n l_file=\"/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_unix\\.so\\s+.*)(nullok)(\\s*.*)$/\\1\\2\\4/g' $l_file\n done\n}\n```\n\n**- IF -** any line is returned with `{if not \"without-nullok\":nullok}`, run the following command to enable the authselect `without-nullok` feature:\n\n```\n# authselect enable-feature without-nullok\n```\n\nRun the following command to update the files in `/etc/pam.d` to include `pam_unix.so` without the `nullok` argument:\n\n```\n# authselect apply-changes\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.4.1_assessment-method",
                            "prose": "Run the following command to verify that the `nullok` argument is not set on the `pam_unix.so` module:\n\n```\n# grep -P -- '^\\h*(auth|account|password|session)\\h+(requisite|required|sufficient)\\h+pam_unix\\.so\\b' /etc/pam.d/{password,system}-auth\n```\n\nVerify that none of the returned lines includes `nullok`. Output should be similar to:\n\n```\n/etc/pam.d/password-auth:auth sufficient pam_unix.so\n/etc/pam.d/password-auth:account required pam_unix.so\n/etc/pam.d/password-auth:password sufficient pam_unix.so sha512 shadow use_authtok\n/etc/pam.d/password-auth:session required pam_unix.so\n\n/etc/pam.d/system-auth:auth sufficient pam_unix.so\n/etc/pam.d/system-auth:account required pam_unix.so\n/etc/pam.d/system-auth:password sufficient pam_unix.so sha512 shadow use_authtok\n/etc/pam.d/system-auth:session required pam_unix.so\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-5.3.3.4.2",
                        "title": "Ensure pam_unix does not include remember",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.4.2"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.4.2_statement",
                            "prose": "The `remember=n` argument saves the last n passwords for each user in `/etc/security/opasswd` in order to force password change history and keep the user from alternating between the same password too frequently. The MD5 password hash algorithm is used for storing the old passwords. Instead of this option the `pam_pwhistory` module should be used. The `pam_pwhistory` module saves the last n passwords for each user in `/etc/security/opasswd` using the password hash algorithm set on the `pam_unix` module. This allows for the `sha512` hash algorithm to be used."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.4.2_assessment-objective",
                            "prose": "Rationale: The `remember=n` argument should be removed to ensure a strong password hashing algorithm is being used. A stronger hash provides additional protection to the system by increasing the level of effort needed for an attacker to successfully determine local user's old passwords stored in `/etc/security/opasswd`."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.4.2_guidance",
                            "prose": "Run the following script to verify the active authselect profile doesn't include the `remember` argument on the `pam_unix.so` module lines:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pam_profile=\"$(head -1 /etc/authselect/authselect.conf)\"\n if grep -Pq -- '^custom\\/' <<< \"$l_pam_profile\"; then\n l_pam_profile_path=\"/etc/authselect/$l_pam_profile\"\n else\n l_pam_profile_path=\"/usr/share/authselect/default/$l_pam_profile\"\n fi\n grep -P -- '^\\h*password\\h+([^#\\n\\r]+\\h+)pam_unix\\.so\\b' \"$l_pam_profile_path\"/{password,system}-auth\n}\n```\n\nOutput should be similar to:\n\n```\n/etc/authselect/custom/custom-profile/password-auth:password sufficient pam_unix.so sha512 shadow {if not \"without-nullok\":nullok} use_authtok\n\n/etc/authselect/custom/custom-profile/system-auth:password sufficient pam_unix.so sha512 shadow {if not \"without-nullok\":nullok} use_authtok\n```\n\n**- IF -** any line includes `remember=`, run the following script to remove the `remember=` from the `pam_unix.so` lines in the active authselect profile `password-auth` and system-auth` templates:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pam_profile=\"$(head -1 /etc/authselect/authselect.conf)\"\n if grep -Pq -- '^custom\\/' <<< \"$l_pam_profile\"; then\n l_pam_profile_path=\"/etc/authselect/$l_pam_profile\"\n else\n l_pam_profile_path=\"/usr/share/authselect/default/$l_pam_profile\"\n fi\n for l_authselect_file in \"$l_pam_profile_path\"/password-auth \"$l_pam_profile_path\"/system-auth; do\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_unix\\.so\\s+.*)(remember=[1-9][0-9]*)(\\s*.*)$/\\1\\4/g' \"$l_authselect_file\"\n done\n}\n```\n\nRun the following command to update the `password-auth` and system-auth` files in `/etc/pam.d` to include pam_unix.so without the remember` argument:\n\n```\n# authselect apply-changes\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.4.2_assessment-method",
                            "prose": "Run the following command to verify that the `remember` argument is not set on the `pam_unix.so` module:\n\n```\n# grep -Pi '^\\h*password\\h+([^#\\n\\r]+\\h+)?pam_unix\\.so\\b' /etc/pam.d/{password,system}-auth | grep -Pv '\\bremember=\\d\\b'\n```\n\nOutput should be similar to:\n\n```\n/etc/pam.d/password-auth:password sufficient pam_unix.so sha512 shadow use_authtok\n\n/etc/pam.d/system-auth:password sufficient pam_unix.so sha512 shadow use_authtok\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-5.3.3.4.3",
                        "title": "Ensure pam_unix includes a strong password hashing algorithm",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.4.3"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.4.3_statement",
                            "prose": "A cryptographic hash function converts an arbitrary-length input into a fixed length output. Password hashing performs a one-way transformation of a password, turning the password into another string, called the hashed password."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.4.3_assessment-objective",
                            "prose": "Rationale: The `SHA-512` and `yescrypt` algorithms provide a stronger hash than other algorithms used by Linux for password hash generation. A stronger hash provides additional protection to the system by increasing the level of effort needed for an attacker to successfully determine local user passwords.\n\n**Note:** These changes only apply to the local system."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.4.3_guidance",
                            "prose": "**Note:** \n- It is highly recommended that the chosen hashing algorithm is consistent across `/etc/libuser.conf`, `/etc/login.defs`, `/etc/pam.d/password-auth`, and `/etc/pam.d/system-auth`.\n- This only effects local users and passwords created after updating the files to use `sha512` or `yescrypt`. If it is determined that the password algorithm being used is not `sha512` or `yescrypt`, once it is changed, it is recommended that all user ID's be immediately expired and forced to change their passwords on next login.\n\nRun the following script to verify the active authselect profile includes a strong password hashing algorithm on the password stack's pam_unix.so module lines:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pam_profile=\"$(head -1 /etc/authselect/authselect.conf)\"\n if grep -Pq -- '^custom\\/' <<< \"$l_pam_profile\"; then\n l_pam_profile_path=\"/etc/authselect/$l_pam_profile\"\n else\n l_pam_profile_path=\"/usr/share/authselect/default/$l_pam_profile\"\n fi\n grep -P -- '^\\h*password\\h+(requisite|required|sufficient)\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?(sha512|yescrypt)\\b' \"$l_pam_profile_path\"/{password,system}-auth\n}\n```\n\n_Example output:_\n\n```\n/etc/authselect/custom/custom-profile/password-auth:password sufficient pam_unix.so sha512 shadow {if not \"without-nullok\":nullok} use_authtok\n\n/etc/authselect/custom/custom-profile/system-auth:password sufficient pam_unix.so sha512 shadow {if not \"without-nullok\":nullok} use_authtok\n```\n\n**- IF -** the output does not include either `sha512` **- OR -** `yescrypt`, or includes a different hashing algorithm, run the following script:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pam_profile=\"$(head -1 /etc/authselect/authselect.conf)\"\n if grep -Pq -- '^custom\\/' <<< \"$l_pam_profile\"; then\n l_pam_profile_path=\"/etc/authselect/$l_pam_profile\"\n else\n l_pam_profile_path=\"/usr/share/authselect/default/$l_pam_profile\"\n fi\n for l_authselect_file in \"$l_pam_profile_path\"/password-auth \"$l_pam_profile_path\"/system-auth; do\n if grep -Pq '^\\h*password\\h+()\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?(sha512|yescrypt)\\b' \"$l_authselect_file\"; then\n echo \"- A strong password hashing algorithm is correctly set\"\n elif grep -Pq '^\\h*password\\h+()\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?(md5|bigcrypt|sha256|blowfish)\\b' \"$l_authselect_file\"; then\n echo \"- A weak password hashing algorithm is set, updating to \\\"sha512\\\"\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_unix\\.so\\s+.*)(md5|bigcrypt|sha256|blowfish)(\\s*.*)$/\\1\\4 sha512/g' \"$l_authselect_file\"\n else\n echo \"No password hashing algorithm is set, updating to \\\"sha512\\\"\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_unix\\.so\\s+.*)$/& sha512/g' \"$l_authselect_file\"\n fi\n done\n}\n```\n\nRun the following command to update the `password-auth` and `system-auth` files in `/etc/pam.d` to include `pam_unix.so` with a strong password hashing algorithm argument:\n\n```\n# authselect apply-changes\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.4.3_assessment-method",
                            "prose": "Run the following command to verify that a strong password hashing algorithm is set on the pam_unix.so module:\n\n```\n# grep -P -- '^\\h*password\\h+([^#\\n\\r]+)\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?(sha512|yescrypt)\\b' /etc/pam.d/{password,system}-auth\n```\n\nOutput should be similar to:\n\n```\n/etc/pam.d/password-auth:password sufficient pam_unix.so sha512 shadow use_authtok\n\n/etc/pam.d/system-auth:password sufficient pam_unix.so sha512 shadow use_authtok\n```\n\nVerify that the lines include either `sha512` **- OR -** `yescrypt`",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-5.3.3.4.4",
                        "title": "Ensure pam_unix includes use_authtok",
                        "props": [
                          {
                            "name": "label",
                            "value": "5.3.3.4.4"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-5.3.3.4.4_statement",
                            "prose": "`use_authtok` - When password changing enforce the module to set the new password to the one provided by a previously stacked password module"
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-5.3.3.4.4_assessment-objective",
                            "prose": "Rationale: `use_authtok` allows multiple pam modules to confirm a new password before it is accepted."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-5.3.3.4.4_guidance",
                            "prose": "Run the following script to verify the active authselect profile includes `use_authtok` on the password stack's `pam_unix.so` module lines:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pam_profile=\"$(head -1 /etc/authselect/authselect.conf)\"\n if grep -Pq -- '^custom\\/' <<< \"$l_pam_profile\"; then\n l_pam_profile_path=\"/etc/authselect/$l_pam_profile\"\n else\n l_pam_profile_path=\"/usr/share/authselect/default/$l_pam_profile\"\n fi\n grep -P -- '^\\h*password\\h+(requisite|required|sufficient)\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?use_authtok\\b' \"$l_pam_profile_path\"/{password,system}-auth\n}\n```\n\n_Example output:_\n\n```\n/etc/authselect/custom/custom-profile/password-auth:password sufficient pam_unix.so sha512 shadow {if not \"without-nullok\":nullok} use_authtok\n\n/etc/authselect/custom/custom-profile/system-auth:password sufficient pam_unix.so sha512 shadow {if not \"without-nullok\":nullok} use_authtok\n```\n\n**- IF -** the output does not include `use_authtok`, run the following script:\n\n```\n#!/usr/bin/env bash\n\n{\n l_pam_profile=\"$(head -1 /etc/authselect/authselect.conf)\"\n if grep -Pq -- '^custom\\/' <<< \"$l_pam_profile\"; then\n l_pam_profile_path=\"/etc/authselect/$l_pam_profile\"\n else\n l_pam_profile_path=\"/usr/share/authselect/default/$l_pam_profile\"\n fi\n for l_authselect_file in \"$l_pam_profile_path\"/password-auth \"$l_pam_profile_path\"/system-auth; do\n if grep -Pq '^\\h*password\\h+([^#\\n\\r]+)\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?use_authtok\\b' \"$l_authselect_file\"; then\n echo \"- \\\"use_authtok\\\" is already set\"\n else\n echo \"- \\\"use_authtok\\\" is not set. Updating template\"\n sed -ri 's/(^\\s*password\\s+(requisite|required|sufficient)\\s+pam_unix\\.so\\s+.*)$/& use_authtok/g' \"$l_authselect_file\"\n fi\n done\n}\n```\n\nRun the following command to update the `password-auth` and `system-auth` files in `/etc/pam.d` to include the `use_authtok` argument on the password stack's `pam_unix.so` lines:\n\n```\n# authselect apply-changes\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-5.3.3.4.4_assessment-method",
                            "prose": "Run the following command to verify that `use_authtok` is set on the `pam_unix.so` module lines in the password stack:\n\n```\n# grep -P -- '^\\h*password\\h+([^#\\n\\r]+)\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?use_authtok\\b' /etc/pam.d/{password,system}-auth\n```\n\nOutput should be similar to:\n\n```\n/etc/pam.d/password-auth:password sufficient pam_unix.so sha512 shadow use_authtok\n\n/etc/pam.d/system-auth:password sufficient pam_unix.so sha512 shadow use_authtok\n```\n\nVerify that the lines include `use_authtok`",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "groups": []
                  }
                ]
              }
            ]
          },
          {
            "id": "section-5-4",
            "title": "User Accounts and Environment",
            "props": [
              {
                "name": "label",
                "value": "5.4"
              }
            ],
            "controls": [],
            "groups": [
              {
                "id": "section-5-4-1",
                "title": "Configure shadow password suite parameters",
                "props": [
                  {
                    "name": "label",
                    "value": "5.4.1"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-5.4.1.1",
                    "title": "Ensure password expiration is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.1.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.1.1_statement",
                        "prose": "The `PASS_MAX_DAYS` parameter in `/etc/login.defs` allows an administrator to force passwords to expire once they reach a defined age.\n\n`PASS_MAX_DAYS` _<N>_ - The maximum number of days a password may be used. If the password is older than this, a password change will be forced. If not specified, -1 will be assumed (which disables the restriction)."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.1.1_assessment-objective",
                        "prose": "Rationale: The window of opportunity for an attacker to leverage compromised credentials or successfully compromise credentials via an online brute force attack is limited by the age of the password. Therefore, reducing the maximum age of a password also reduces an attacker's window of opportunity.\n\nWe recommend a yearly password change. This is primarily because for all their good intentions users will share credentials across accounts. Therefore, even if a breach is publicly identified, the user may not see this notification, or forget they have an account on that site. This could leave a shared credential vulnerable indefinitely. Having an organizational policy of a 1-year (annual) password expiration is a reasonable compromise to mitigate this with minimal user burden.\nImpact: The password expiration must be greater than the minimum days between password changes or users will be unable to change their password.\n\nExcessive password expiration requirements do more harm than good, because these requirements make users select predictable passwords, composed of sequential words and numbers that are closely related to each other. In these cases, the next password can be predicted based on the previous one (incrementing a number used in the password for\nexample). Also, password expiration requirements offer no containment benefits because attackers will often use credentials as soon as they compromise them. Instead, immediate password changes should be based on key events including, but not limited to:\n- Indication of compromise\n- Change of user roles\n- When a user leaves the organization.\n\nNot only does changing passwords every few weeks or months frustrate the user, but it\u2019s also been suggested that it does more harm than good, because it could lead to bad practices by the user such as adding a character to the end of their existing password."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.1.1_guidance",
                        "prose": "Set the `PASS_MAX_DAYS` parameter to conform to site policy in `/etc/login.defs` :\n\n```\nPASS_MAX_DAYS 365\n```\n\nModify user parameters for all users with a password set to match:\n\n```\n# chage --maxdays 365 <user>\n```\n\nEdit `/etc/login.defs` and set `PASS_MAX_DAYS` to a value greater than `0` that follows local site policy:\n\n_Example:_\n\n```\nPASS_MAX_DAYS 365\n```\n\nRun the following command to modify user parameters for all users with a password set to a maximum age no greater than `365` or less than `1` that follows local site policy:\n\n```\n# chage --maxdays <N> <user>\n```\n\n_Example:_\n\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($5 > 365 || $5 < 1)system (\"chage --maxdays 365 \" $1)}' /etc/shadow\n```\n\n**Warning:** If a password has been set at system install or kickstart, the `last change date` field is not set, In this case, setting `PASS_MAX_DAYS` will immediately expire the password. One possible solution is to populate the `last change date` field through a command like: `chage -d \"$(date +%Y-%m-%d)\" root`"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.1.1_assessment-method",
                        "prose": "Run the following command and verify `PASS_MAX_DAYS` is set to 365 days or less and conforms to local site policy:\n\n```\n# grep -Pi -- '^\\h*PASS_MAX_DAYS\\h+\\d+\\b' /etc/login.defs\n```\n\n_Example output:_\n\n```\nPASS_MAX_DAYS 365\n```\n\nRun the following command to verify all `/etc/shadow` passwords `PASS_MAX_DAYS`:\n- is greater than `0` days\n- is less than or equal to `365` days\n- conforms to local site policy\n\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($5 > 365 || $5 < 1)print \"User: \" $1 \" PASS_MAX_DAYS: \" $5}' /etc/shadow\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.1.3",
                    "title": "Ensure password expiration warning days is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.1.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.1.3_statement",
                        "prose": "The `PASS_WARN_AGE` parameter in `/etc/login.defs` allows an administrator to notify users that their password will expire in a defined number of days.\n\n`PASS_WARN_AGE` _<N>_ - The number of days warning given before a password expires. A zero means warning is given only upon the day of expiration, a negative value means no warning is given. If not specified, no warning will be provided."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.1.3_assessment-objective",
                        "prose": "Rationale: Providing an advance warning that a password will be expiring gives users time to think of a secure password. Users caught unaware may choose a simple password or write it down where it may be discovered."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.1.3_guidance",
                        "prose": "Edit `/etc/login.defs` and set `PASS_WARN_AGE` to a value of `7` or more that follows local site policy:\n\n_Example:_\n\n```\nPASS_WARN_AGE 7\n```\n\nRun the following command to modify user parameters for all users with a password set to a minimum warning to `7` or more days that follows local site policy:\n\n```\n# chage --warndays <N> <user>\n```\n\n_Example:_\n\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($6 < 7)system (\"chage --warndays 7 \" $1)}' /etc/shadow\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.1.3_assessment-method",
                        "prose": "Run the following command and verify `PASS_WARN_AGE` is `7` or more and follows local site policy:\n\n```\n# grep -Pi -- '^\\h*PASS_WARN_AGE\\h+\\d+\\b' /etc/login.defs\n```\n\n_Example output:_\n\n```\nPASS_WARN_AGE 7\n```\n\nRun the following command to verify all passwords have a `PASS_WARN_AGE` of `7` or more:\n\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($6 < 7)print \"User: \" $1 \" PASS_WARN_AGE: \" $6}' /etc/shadow\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.1.4",
                    "title": "Ensure strong password hashing algorithm is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.1.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.1.4_statement",
                        "prose": "A cryptographic hash function converts an arbitrary-length input into a fixed length output. Password hashing performs a one-way transformation of a password, turning the password into another string, called the hashed password.\n\n`ENCRYPT_METHOD` (string) - This defines the system default encryption algorithm for encrypting passwords (if no algorithm are specified on the command line). It can take one of these values:\n- `MD5` - MD5-based algorithm will be used for encrypting password\n- `SHA256` - SHA256-based algorithm will be used for encrypting password\n- `SHA512` - SHA512-based algorithm will be used for encrypting password\n- `BCRYPT` - BCRYPT-based algorithm will be used for encrypting password\n- `YESCRYPT` - YESCRYPT-based algorithm will be used for encrypting password\n- `DES` - DES-based algorithm will be used for encrypting password (default)\n\n**Note:**\n- This parameter overrides the deprecated `MD5_CRYPT_ENAB` variable.\n- This parameter will only affect the generation of group passwords.\n- The generation of user passwords is done by PAM and subject to the PAM configuration.\n- It is recommended to set this variable consistently with the PAM configuration."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.1.4_assessment-objective",
                        "prose": "Rationale: The `SHA-512` and `yescrypt` algorithms provide a stronger hash than other algorithms used by Linux for password hash generation. A stronger hash provides additional protection to the system by increasing the level of effort needed for an attacker to successfully determine local group passwords."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.1.4_guidance",
                        "prose": "Edit `/etc/login.defs` and set the `ENCRYPT_METHOD` to `SHA512` or `YESCRYPT`:\n\n```\nENCRYPT_METHOD <HASHING_ALGORITHM>\n```\n\n_Example:_\n\n```\nENCRYPT_METHOD YESCRYPT\n```\n\n**Note:** \n- This only effects local groups' passwords created after updating the file to use `sha512` or `yescrypt`.\n- If it is determined that the password algorithm being used is not `sha512` or `yescrypt`, once it is changed, it is recommended that all group passwords be updated to use the stronger hashing algorithm.\n- It is recommended that the chosen hashing algorithm is consistent across `/etc/login.defs` and the PAM configuration"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.1.4_assessment-method",
                        "prose": "Run the following command to verify the hashing algorithm is `sha512` or `yescrypt` in `/etc/login.defs`:\n\n```\n# grep -Pi -- '^\\h*ENCRYPT_METHOD\\h+(SHA512|yescrypt)\\b' /etc/login.defs\n```\n\n_Example output:_\n\n```\nENCRYPT_METHOD SHA512\n - OR -\nENCRYPT_METHOD YESCRYPT\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.1.5",
                    "title": "Ensure inactive password lock is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.1.5"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.1.5_statement",
                        "prose": "User accounts that have been inactive for over a given period of time can be automatically disabled.\n\n`INACTIVE` - Defines the number of days after the password exceeded its maximum age where the user is expected to replace this password.\n\nThe value is stored in the shadow password file. An input of `0` will disable an expired password with no delay. An input of `-1` will blank the respective field in the shadow password file."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.1.5_assessment-objective",
                        "prose": "Rationale: Inactive accounts pose a threat to system security since the users are not logging in to notice failed login attempts or other anomalies."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.1.5_guidance",
                        "prose": "Run the following command to set the default password inactivity period to 45 days or less that meets local site policy:\n\n```\n# useradd -D -f <N>\n```\n\n_Example:_\n\n```\n# useradd -D -f 45\n```\n\nRun the following command to modify user parameters for all users with a password set to a inactive age of `45` days or less that follows local site policy:\n\n```\n# chage --inactive <N> <user>\n```\n\n_Example:_\n\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($7 > 45 || $7 < 0)system (\"chage --inactive 45 \" $1)}' /etc/shadow\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.1.5_assessment-method",
                        "prose": "Run the following command and verify `INACTIVE` conforms to site policy (no more than 45 days):\n\n```\n# useradd -D | grep INACTIVE\n\nINACTIVE=45\n```\n\nVerify all users with a password have Password inactive no more than 45 days after password expires\n\nVerify all users with a password have Password inactive no more than 45 days after password expires: Run the following command and Review list of users and `INACTIVE` to verify that all users `INACTIVE` conforms to site policy (no more than 45 days):\n\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($7 > 45 || $7 < 0)print \"User: \" $1 \" INACTIVE: \" $7}' /etc/shadow\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.1.6",
                    "title": "Ensure all users last password change date is in the past",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.1.6"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.1.6_statement",
                        "prose": "All users should have a password change date in the past."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.1.6_assessment-objective",
                        "prose": "Rationale: If a user's recorded password change date is in the future, then they could bypass any set password expiration."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.1.6_guidance",
                        "prose": "Investigate any users with a password change date in the future and correct them. Locking the account, expiring the password, or resetting the password manually may be appropriate."
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.1.6_assessment-method",
                        "prose": "Run the following script and verify nothing is returned:\n\n```\n#!/usr/bin/env bash\n\n{\n while IFS= read -r l_user; do\n l_change=$(date -d \"$(chage --list $l_user | grep '^Last password change' | cut -d: -f2 | grep -v 'never$')\" +%s)\n if [[ \"$l_change\" -gt \"$(date +%s)\" ]]; then\n echo \"User: \\\"$l_user\\\" last password change was \\\"$(chage --list $l_user | grep '^Last password change' | cut -d: -f2)\\\"\"\n fi\n done < <(awk -F: '$2~/^\\$.+\\$/{print $1}' /etc/shadow)\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.1.2",
                    "title": "Ensure minimum password days is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.1.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.1.2_statement",
                        "prose": "`PASS_MIN_DAYS` <_N_> - The minimum number of days allowed between password changes. Any password changes attempted sooner than this will be rejected. If not specified, 0 will be assumed (which disables the restriction)."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.1.2_assessment-objective",
                        "prose": "Rationale: Users may have favorite passwords that they like to use because they are easy to remember and they believe that their password choice is secure from compromise. Unfortunately, passwords are compromised and if an attacker is targeting a specific individual user account, with foreknowledge of data about that user, reuse of old, potentially compromised passwords, may cause a security breach.\n\nBy restricting the frequency of password changes, an administrator can prevent users from repeatedly changing their password in an attempt to circumvent password reuse controls\nImpact: If a users password is set by other personnel as a procedure in dealing with a lost or expired password, the user should be forced to update this \"set\" password with their own password. e.g. force \"change at next logon\".\n\nIf it is not possible to have a user set their own password immediately, and this recommendation or local site procedure may cause a user to continue using a third party generated password, `PASS_MIN_DAYS` for the effected user should be temporally changed to `0`, to allow a user to change their password immediately.\n\nFor applications where the user is not using the password at console, the ability to \"change at next logon\" may be limited. This may cause a user to continue to use a password created by other personnel."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.1.2_guidance",
                        "prose": "Edit `/etc/login.defs` and set `PASS_MIN_DAYS` to a value greater than `0` that follows local site policy:\n\n_Example:_\n\n```\nPASS_MIN_DAYS 1\n```\n\nRun the following command to modify user parameters for all users with a password set to a minimum days greater than zero that follows local site policy:\n\n```\n# chage --mindays <N> <user>\n```\n\n_Example:_\n\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($4 < 1)system (\"chage --mindays 1 \" $1)}' /etc/shadow\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.1.2_assessment-method",
                        "prose": "Run the following command to verify that `PASS_MIN_DAYS` is set to a value greater than `0`and follows local site policy:\n\n```\n# grep -Pi -- '^\\h*PASS_MIN_DAYS\\h+\\d+\\b' /etc/login.defs\n```\n\n_Example output:_\n\n```\nPASS_MIN_DAYS 1\n```\n\nRun the following command to verify all passwords have a `PASS_MIN_DAYS` greater than `0`:\n\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($4 < 1)print \"User: \" $1 \" PASS_MIN_DAYS: \" $4}' /etc/shadow\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              },
              {
                "id": "section-5-4-2",
                "title": "Configure root and system accounts and environment",
                "props": [
                  {
                    "name": "label",
                    "value": "5.4.2"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-5.4.2.1",
                    "title": "Ensure root is the only UID 0 account",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.2.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.2.1_statement",
                        "prose": "Any account with UID 0 has superuser privileges on the system."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.2.1_assessment-objective",
                        "prose": "Rationale: This access must be limited to only the default `root` account and only from the system console. Administrative access must be through an unprivileged account using an approved mechanism as noted in the Recommendation \"Ensure access to the su command is restricted\"."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.2.1_guidance",
                        "prose": "Run the following command to change the `root` account UID to `0`:\n\n```\n# usermod -u 0 root\n```\n\nModify any users other than `root` with UID `0` and assign them a new UID."
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.2.1_assessment-method",
                        "prose": "Run the following command and verify that only \"root\" is returned:\n\n```\n# awk -F: '($3 == 0) { print $1 }' /etc/passwd\n\nroot\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.2.2",
                    "title": "Ensure root is the only GID 0 account",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.2.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.2.2_statement",
                        "prose": "The `usermod` command can be used to specify which group the `root` account belongs to. This affects permissions of files that are created by the `root` account."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.2.2_assessment-objective",
                        "prose": "Rationale: Using GID 0 for the `root` account helps prevent `root` -owned files from accidentally becoming accessible to non-privileged users."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.2.2_guidance",
                        "prose": "Run the following command to set the `root` user's GID to `0`:\n\n```\n# usermod -g 0 root\n``` \n\nRun the following command to set the `root` group's GID to `0`:\n\n```\n# groupmod -g 0 root\n```\n\nRemove any users other than the `root` user with GID 0 or assign them a new GID if appropriate."
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.2.2_assessment-method",
                        "prose": "Run the following command to verify the `root` user's primary GID is `0`, and no other user's have GID `0` as their primary GID:\n\n```\n# awk -F: '($1 !~ /^(sync|shutdown|halt|operator)/ && $4==\"0\") {print $1\":\"$4}' /etc/passwd\n\nroot:0\n```\n\n**Note:** User's: sync, shutdown, halt, and operator are excluded from the check for other user's with GID `0`",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.2.3",
                    "title": "Ensure group root is the only GID 0 group",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.2.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.2.3_statement",
                        "prose": "The `groupmod` command can be used to specify which group the `root` group belongs to. This affects permissions of files that are group owned by the `root` group."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.2.3_assessment-objective",
                        "prose": "Rationale: Using GID 0 for the `root` group helps prevent `root` group owned files from accidentally becoming accessible to non-privileged users."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.2.3_guidance",
                        "prose": "Run the following command to set the `root` group's GID to `0`:\n\n```\n# groupmod -g 0 root\n```\n\nRemove any groups other than the `root` group with GID 0 or assign them a new GID if appropriate."
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.2.3_assessment-method",
                        "prose": "Run the following command to verify no group other than `root` is assigned GID `0`:\n\n```\n# awk -F: '$3==\"0\"{print $1\":\"$3}' /etc/group\n\nroot:0\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.2.4",
                    "title": "Ensure root account access is controlled",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.2.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.2.4_statement",
                        "prose": "There are a number of methods to access the root account directly. Without a password set any user would be able to gain access and thus control over the entire system."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.2.4_assessment-objective",
                        "prose": "Rationale: Access to `root` should be secured at all times.\nImpact: If there are any automated processes that relies on access to the root account without authentication, they will fail after remediation."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.2.4_guidance",
                        "prose": "Run the following command to set a password for the `root` user:\n\n```\n# passwd root\n```\n\n**- OR -**\n\nRun the following command to lock the `root` user account:\n\n```\n# usermod -L root\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.2.4_assessment-method",
                        "prose": "Run the following command to verify that either the root user's password is set or the root user's account is locked:\n\n```\n# passwd -S root | awk '$2 ~ /^P/ {print \"User: \\\"\" $1 \"\\\" Password is set\"}'\n```\n\nVerify the output is either:\n\n```\n(Password set, SHA512 crypt.)\n- OR -\n(Password locked.)\n```\n\n**Note:** output may include `YESCRYPT` opposed to `SHA512`. Either is acceptable.",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.2.5",
                    "title": "Ensure root path integrity",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.2.5"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.2.5_statement",
                        "prose": "The `root` user can execute any command on the system and could be fooled into executing programs unintentionally if the `PATH` is not set correctly."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.2.5_assessment-objective",
                        "prose": "Rationale: Including the current working directory (.) or other writable directory in `root`'s executable path makes it likely that an attacker can gain superuser access by forcing an administrator operating as `root` to execute a Trojan horse program."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.2.5_guidance",
                        "prose": "Correct or justify any:\n- Locations that are not directories\n- Empty directories (`::`)\n- Trailing (`:`)\n- Current working directory (`.`)\n- Non `root` owned directories\n- Directories that less restrictive than mode `0755`"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.2.5_assessment-method",
                        "prose": "Run the following script to verify root's path does not include:\n- Locations that are not directories\n- An empty directory (`::`)\n- A trailing (`:`)\n- Current working directory (`.`)\n- Non `root` owned directories\n- Directories that less restrictive than mode `0755`\n\n```\n#!/usr/bin/env bash\n\n{\n l_output2=\"\"\n l_pmask=\"0022\"\n l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n l_root_path=\"$(sudo -Hiu root env | grep '^PATH' | cut -d= -f2)\"\n unset a_path_loc && IFS=\":\" read -ra a_path_loc <<< \"$l_root_path\"\n grep -q \"::\" <<< \"$l_root_path\" && l_output2=\"$l_output2\\n - root's path contains a empty directory (::)\"\n grep -Pq \":\\h*$\" <<< \"$l_root_path\" && l_output2=\"$l_output2\\n - root's path contains a trailing (:)\"\n grep -Pq '(\\h+|:)\\.(:|\\h*$)' <<< \"$l_root_path\" && l_output2=\"$l_output2\\n - root's path contains current working directory (.)\"\n while read -r l_path; do\n if [ -d \"$l_path\" ]; then\n while read -r l_fmode l_fown; do\n [ \"$l_fown\" != \"root\" ] && l_output2=\"$l_output2\\n - Directory: \\\"$l_path\\\" is owned by: \\\"$l_fown\\\" should be owned by \\\"root\\\"\"\n [ $(( $l_fmode & $l_pmask )) -gt 0 ] && l_output2=\"$l_output2\\n - Directory: \\\"$l_path\\\" is mode: \\\"$l_fmode\\\" and should be mode: \\\"$l_maxperm\\\" or more restrictive\"\n done <<< \"$(stat -Lc '%#a %U' \"$l_path\")\"\n else\n l_output2=\"$l_output2\\n - \\\"$l_path\\\" is not a directory\"\n fi\n done <<< \"$(printf \"%s\\n\" \"${a_path_loc[@]}\")\"\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n *** PASS ***\\n - Root's path is correctly configured\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.2.6",
                    "title": "Ensure root user umask is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.2.6"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.2.6_statement",
                        "prose": "The user file-creation mode mask (`umask`) is used to determine the file permission for newly created directories and files. In Linux, the default permissions for any newly created directory is 0777 (`rwxrwxrwx`), and for any newly created file it is 0666 (`rw-rw-rw-`). The `umask` modifies the default Linux permissions by restricting (masking) these permissions. The `umask` is not simply subtracted, but is processed bitwise. Bits set in the `umask` are cleared in the resulting file mode.\n\n`umask` can be set with either `Octal` or `Symbolic` values:\n- `Octal` (Numeric) Value - Represented by either three or four digits. ie `umask 0027` or `umask 027`. If a four digit umask is used, the first digit is ignored. The remaining three digits effect the resulting permissions for user, group, and world/other respectively.\n- `Symbolic` Value - Represented by a comma separated list for User `u`, group `g`, and world/other `o`. The permissions listed are not masked by `umask`. ie a `umask` set by `umask u=rwx,g=rx,o=` is the `Symbolic` equivalent of the `Octal` `umask 027`. This `umask` would set a newly created directory with file mode `drwxr-x---` and a newly created file with file mode `rw-r-----`.\n\n**root user Shell Configuration Files:**\n- `/root/.bash_profile` - Is executed to configure the root users' shell before the initial command prompt. **Is only read by login shells.**\n- `/root/.bashrc` - Is executed for interactive shells. **only read by a shell that's both interactive and non-login**\n\n`umask` is set by order of precedence. If `umask` is set in multiple locations, this order of precedence will determine the system's default `umask`.\n\n**Order of precedence:**\n1. `/root/.bash_profile`\n2. `/root/.bashrc`\n3. The system default umask"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.2.6_assessment-objective",
                        "prose": "Rationale: Setting a secure value for `umask` ensures that users make a conscious choice about their file permissions. A permissive `umask` value could result in directories or files with excessive permissions that can be read and/or written to by unauthorized users."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.2.6_guidance",
                        "prose": "Edit `/root/.bash_profile` and `/root/.bashrc` and remove, comment out, or update any line with `umask` to be `0027` or more restrictive."
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.2.6_assessment-method",
                        "prose": "Run the following to verify the root user `umask` is set to enforce a newly created directories' permissions to be `750 (drwxr-x---)`, and a newly created file's permissions be `640 (rw-r-----)`, or more restrictive:\n\n```\ngrep -Psi -- '^\\h*umask\\h+(([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][0-6]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][0-6]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))' /root/.bash_profile /root/.bashrc\n\nNothing should be returned\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.2.7",
                    "title": "Ensure system accounts do not have a valid login shell",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.2.7"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.2.7_statement",
                        "prose": "There are a number of accounts provided with most distributions that are used to manage applications and are not intended to provide an interactive shell. Furthermore, a user may add special accounts that are not intended to provide an interactive shell."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.2.7_assessment-objective",
                        "prose": "Rationale: It is important to make sure that accounts that are not being used by regular users are prevented from being used to provide an interactive shell. By default, most distributions set the password field for these accounts to an invalid string, but it is also recommended that the shell field in the password file be set to the `nologin` shell. This prevents the account from potentially being used to run any commands."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.2.7_guidance",
                        "prose": "Run the following command to set the shell for any service accounts returned by the audit to `nologin`:\n\n```\n# usermod -s $(command -v nologin) <user>\n```\n\n_Example script:_\n\n```\n#!/usr/bin/env bash\n\n{\n l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\"\n awk -v pat=\"$l_valid_shells\" -F: '($1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && ($3<'\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"' || $3 == 65534) && $(NF) ~ pat) {system (\"usermod -s '\"$(command -v nologin)\"' \" $1)}' /etc/passwd\n}\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.2.7_assessment-method",
                        "prose": "Run the following command to verify system accounts, except for `root`, `halt`, `sync`, `shutdown` or `nfsnobody`, do not have a valid login shell:\n\n```\n#!/usr/bin/env bash\n\n{\n l_valid_shells=\"^($(awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\"\n awk -v pat=\"$l_valid_shells\" -F: '($1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && ($3<'\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"' || $3 == 65534) && $(NF) ~ pat) {print \"Service account: \\\"\" $1 \"\\\" has a valid shell: \" $7}' /etc/passwd\n}\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.2.8",
                    "title": "Ensure accounts without a valid login shell are locked",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.2.8"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.2.8_statement",
                        "prose": "There are a number of accounts provided with most distributions that are used to manage applications and are not intended to provide an interactive shell. Furthermore, a user may add special accounts that are not intended to provide an interactive shell."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.2.8_assessment-objective",
                        "prose": "Rationale: It is important to make sure that accounts that are not being used by regular users are prevented from being used to provide an interactive shell. By default, most distributions set the password field for these accounts to an invalid string, but it is also recommended that the shell field in the password file be set to the `nologin` shell. This prevents the account from potentially being used to run any commands."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.2.8_guidance",
                        "prose": "Run the following command to lock any non-root accounts without a valid login shell returned by the audit:\n\n```\n# usermod -L <user>\n```\n\n_Example script:_:\n\n```\n#!/usr/bin/env bash\n\n{\n l_valid_shells=\"^($(awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\"\n while IFS= read -r l_user; do\n passwd -S \"$l_user\" | awk '$2 !~ /^L/ {system (\"usermod -L \" $1)}'\n done < <(awk -v pat=\"$l_valid_shells\" -F: '($1 != \"root\" && $(NF) !~ pat) {print $1}' /etc/passwd)\n}\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.2.8_assessment-method",
                        "prose": "Run the following script to verify all non-root accounts without a valid login shell are locked.\n\n```\n#!/usr/bin/env bash\n\n{\n l_valid_shells=\"^($(awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\"\n while IFS= read -r l_user; do\n passwd -S \"$l_user\" | awk '$2 !~ /^L/ {print \"Account: \\\"\" $1 \"\\\" does not have a valid login shell and is not locked\"}'\n done < <(awk -v pat=\"$l_valid_shells\" -F: '($1 != \"root\" && $(NF) !~ pat) {print $1}' /etc/passwd)\n}\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              },
              {
                "id": "section-5-4-3",
                "title": "Configure user default environment",
                "props": [
                  {
                    "name": "label",
                    "value": "5.4.3"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-5.4.3.2",
                    "title": "Ensure default user shell timeout is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.3.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.3.2_statement",
                        "prose": "`TMOUT` is an environmental setting that determines the timeout of a shell in seconds.\n- TMOUT=_n_ - Sets the shell timeout to _n_ seconds. A setting of `TMOUT=0` disables timeout.\n- readonly TMOUT- Sets the TMOUT environmental variable as readonly, preventing unwanted modification during run-time.\n- export TMOUT - exports the TMOUT variable \n\n**System Wide Shell Configuration Files:**\n- `/etc/profile` - used to set system wide environmental variables on users shells. The variables are sometimes the same ones that are in the `.bash_profile`, however this file is used to set an initial PATH or PS1 for all shell users of the system. **is only executed for interactive *login* shells, or shells executed with the --login parameter.** \n- `/etc/profile.d` - `/etc/profile` will execute the scripts within `/etc/profile.d/*.sh`. It is recommended to place your configuration in a shell script within `/etc/profile.d` to set your own system wide environmental variables.\n- `/etc/bashrc` - System wide version of `.bashrc`. In Fedora derived distributions, `/etc/bashrc` also invokes /etc/profile.d/*.sh if *non-login* shell, but redirects output to `/dev/null` if *non-interactive.* **Is only executed for *interactive* shells or if `BASH_ENV` is set to `/etc/bashrc`.**"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.3.2_assessment-objective",
                        "prose": "Rationale: Setting a timeout value reduces the window of opportunity for unauthorized user access to another user's shell session that has been left unattended. It also ends the inactive session and releases the resources associated with that session."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.3.2_guidance",
                        "prose": "Review `/etc/bashrc`, `/etc/profile`, and all files ending in `*.sh` in the `/etc/profile.d/` directory and remove or edit all `TMOUT=_n_` entries to follow local site policy. `TMOUT` should not exceed 900 or be equal to `0`.\n\nConfigure `TMOUT` in **one** of the following files:\n- A file in the `/etc/profile.d/` directory ending in `.sh`\n- `/etc/profile`\n- `/etc/bashrc`\n\n_Example command to set TMOUT to `900` seconds in a file in `/etc/profile.d/`:_\n\n```\n# printf '%s\\n' \"# Set TMOUT to 900 seconds\" \"typeset -xr TMOUT=900\" > /etc/profile.d/50-tmout.sh\n```\n\n_`TMOUT` configuration examples:_\n\n```\ntypeset -xr TMOUT=900\n```\n\nDeprecated methods: \n\n- As multiple lines:\n```\nTMOUT=900\nreadonly TMOUT\nexport TMOUT\n```\n- As a single line:\n```\nreadonly TMOUT=900 ; export TMOUT\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.3.2_assessment-method",
                        "prose": "Run the following script to verify that `TMOUT` is configured to: include a timeout of no more than `900` seconds, to be `readonly`, to be `exported`, and is not being changed to a longer timeout.\n\n```\n#!/usr/bin/env bash\n\n{\n a_output=(); a_output2=(); l_tmout_set=\"900\"\n f_tmout_read_chk()\n {\n a_out=(); a_out2=()\n l_tmout_readonly=\"$(grep -P -- '^\\h*(typeset\\h\\-xr\\hTMOUT=\\d+|([^#\\n\\r]+)?\\breadonly\\h+TMOUT\\b)' \"$l_file\")\"\n l_tmout_export=\"$(grep -P -- '^\\h*(typeset\\h\\-xr\\hTMOUT=\\d+|([^#\\n\\r]+)?\\bexport\\b([^#\\n\\r]+\\b)?TMOUT\\b)' \"$l_file\")\"\n if [ -n \"$l_tmout_readonly\" ]; then\n a_out+=(\" - Readonly is set as: \\\"$l_tmout_readonly\\\" in: \\\"$l_file\\\"\")\n else\n a_out2+=(\" - Readonly is not set in: \\\"$l_file\\\"\")\n fi\n if [ -n \"$l_tmout_export\" ]; then\n a_out+=(\" - Export is set as: \\\"$l_tmout_export\\\" in: \\\"$l_file\\\"\")\n else\n a_out2+=(\" - Export is not set in: \\\"$l_file\\\"\")\n fi \n }\n while IFS= read -r l_file; do\n l_tmout_value=\"$(grep -Po -- '^([^#\\n\\r]+)?\\bTMOUT=\\d+\\b' \"$l_file\" | awk -F= '{print $2}')\"\n f_tmout_read_chk\n if [ -n \"$l_tmout_value\" ]; then\n if [[ \"$l_tmout_value\" -le \"$l_tmout_set\" && \"$l_tmout_value\" -gt \"0\" ]]; then\n a_output+=(\" - TMOUT is set to: \\\"$l_tmout_value\\\" in: \\\"$l_file\\\"\")\n [ \"${#a_out[@]}\" -gt 0 ] && a_output+=(\"${a_out[@]}\")\n [ \"${#a_out2[@]}\" -gt 0 ] && a_output2+=(\"${a_out[@]}\")\n fi\n if [[ \"$l_tmout_value\" -gt \"$l_tmout_set\" || \"$l_tmout_value\" -le \"0\" ]]; then\n a_output2+=(\" - TMOUT is incorrectly set to: \\\"$l_tmout_value\\\" in: \\\"$l_file\\\"\")\n [ \"${#a_out[@]}\" -gt 0 ] && a_output2+=(\" ** Incorrect TMOUT value **\" \"${a_out[@]}\")\n [ \"${#a_out2[@]}\" -gt 0 ] && a_output2+=(\"${a_out2[@]}\")\n fi\n else\n [ \"${#a_out[@]}\" -gt 0 ] && a_output2+=(\" - TMOUT is not set\" \"${a_out[@]}\")\n [ \"${#a_out2[@]}\" -gt 0 ] && a_output2+=(\" - TMOUT is not set\" \"${a_out2[@]}\")\n fi\n done < <(grep -Pls -- '^([^#\\n\\r]+)?\\bTMOUT\\b' /etc/*bashrc /etc/profile /etc/profile.d/*.sh)\n [[ \"${#a_output[@]}\" -le 0 && \"${#a_output2[@]}\" -le 0 ]] && a_output2+=(\" - TMOUT is not configured\")\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" * Reasons for audit failure *\" \"${a_output2[@]}\" \"\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```\n\n**Note:** If `TMOUT` is set as `readonly` through `readonly TMOUT` and/or `typeset -xr` in more than once, you will receive an error message when logging into a terminal session or connecting with openSSH. It is recommended that `TMOUT` be set only once in **only one** file.",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.3.3",
                    "title": "Ensure default user umask is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.3.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.3.3_statement",
                        "prose": "The user file-creation mode mask (`umask`) is used to determine the file permission for newly created directories and files. In Linux, the default permissions for any newly created directory is 0777 (`rwxrwxrwx`), and for any newly created file it is 0666 (`rw-rw-rw-`). The `umask` modifies the default Linux permissions by restricting (masking) these permissions. The `umask` is not simply subtracted, but is processed bitwise. Bits set in the `umask` are cleared in the resulting file mode.\n\n`umask` can be set with either `Octal` or `Symbolic` values:\n- `Octal` (Numeric) Value - Represented by either three or four digits. ie `umask 0027` or `umask 027`. If a four digit umask is used, the first digit is ignored. The remaining three digits effect the resulting permissions for user, group, and world/other respectively.\n- `Symbolic` Value - Represented by a comma separated list for User `u`, group `g`, and world/other `o`. The permissions listed are not masked by `umask`. ie a `umask` set by `umask u=rwx,g=rx,o=` is the `Symbolic` equivalent of the `Octal` `umask 027`. This `umask` would set a newly created directory with file mode `drwxr-x---` and a newly created file with file mode `rw-r-----`.\n\nThe default `umask` can be set to use the `pam_umask` module or in a `System Wide Shell Configuration File`. The user creating the directories or files has the discretion of changing the permissions via the chmod command, or choosing a different default `umask` by adding the `umask` command into a `User Shell Configuration File`, ( `.bash_profile` or `.bashrc`), in their home directory.\n\n**Setting the default umask:**\n- pam_umask module:\n - will set the umask according to the system default in `/etc/login.defs` and user settings, solving the problem of different `umask` settings with different shells, display managers, remote sessions etc.\n - `umask=<mask>` value in the `/etc/login.defs` file is interpreted as Octal\n - Setting `USERGROUPS_ENAB` to yes in `/etc/login.defs` (default):\n - will enable setting of the `umask` group bits to be the same as owner bits. (examples: 022 -> 002, 077 -> 007) for non-root users, if the `uid` is the same as `gid`, and `username` is the same as the `<primary group name>`\n - userdel will remove the user's group if it contains no more members, and useradd will create by default a group with the name of the user\n- `System Wide Shell Configuration File`:\n - `/etc/profile` - used to set system wide environmental variables on users shells. The variables are sometimes the same ones that are in the `.bash_profile`, however this file is used to set an initial PATH or PS1 for all shell users of the system. **is only executed for interactive *login* shells, or shells executed with the --login parameter.** \n - `/etc/profile.d` - `/etc/profile` will execute the scripts within `/etc/profile.d/*.sh`. It is recommended to place your configuration in a shell script within `/etc/profile.d` to set your own system wide environmental variables.\n - `/etc/bashrc` - System wide version of `.bashrc`. In Fedora derived distributions, `etc/bashrc` also invokes /etc/profile.d/*.sh if *non-login* shell, but redirects output to `/dev/null` if *non-interactive.* **Is only executed for *interactive* shells or if `BASH_ENV` is set to `/etc/bashrc`.**\n\n**User Shell Configuration Files:**\n- `~/.bash_profile` - Is executed to configure your shell before the initial command prompt. **Is only read by login shells.**\n- `~/.bashrc` - Is executed for interactive shells. **only read by a shell that's both interactive and non-login**\n\n`umask` is set by order of precedence. If `umask` is set in multiple locations, this order of precedence will determine the system's default `umask`.\n\n**Order of precedence:**\n1. A file in `/etc/profile.d/` ending in `.sh` - This will override any other system-wide `umask` setting\n2. In the file `/etc/profile`\n3. On the `pam_umask.so` module in `/etc/pam.d/postlogin`\n4. In the file `/etc/login.defs`\n5. In the file `/etc/default/login`"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.3.3_assessment-objective",
                        "prose": "Rationale: Setting a secure default value for `umask` ensures that users make a conscious choice about their file permissions. A permissive `umask` value could result in directories or files with excessive permissions that can be read and/or written to by unauthorized users."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.3.3_guidance",
                        "prose": "Run the following script and perform the instructions in the output to set the default umask to `027` or more restrictive:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_out=\"\"\n file_umask_chk()\n {\n if grep -Psiq -- '^\\h*umask\\h+(0?[0-7][2-7]7|u(=[rwx]{0,3}),g=([rx]{0,2}),o=)(\\h*#.*)?$' \"$l_file\"; then\n l_out=\"$l_out\\n - umask is set correctly in \\\"$l_file\\\"\"\n elif grep -Psiq -- '^\\h*umask\\h+(([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][0-6]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][0-6]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))' \"$l_file\"; then\n l_output2=\"$l_output2\\n - \\\"$l_file\\\"\"\n fi\n }\n while IFS= read -r -d $'\\0' l_file; do\n file_umask_chk\n done < <(find /etc/profile.d/ -type f -name '*.sh' -print0)\n [ -n \"$l_out\" ] && l_output=\"$l_out\"\n l_file=\"/etc/profile\" && file_umask_chk\n l_file=\"/etc/bashrc\" && file_umask_chk\n l_file=\"/etc/bash.bashrc\" && file_umask_chk\n l_file=\"/etc/pam.d/postlogin\"\n if grep -Psiq '^\\h*session\\h+[^#\\n\\r]+\\h+pam_umask\\.so\\h+([^#\\n\\r]+\\h+)?umask=(([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][0-6]\\b)|([0-7][01][0-7]\\b))' \"$l_file\"; then\n l_output2=\"$l_output2\\n - \\\"$l_file\\\"\"\n fi\n l_file=\"/etc/login.defs\" && file_umask_chk\n l_file=\"/etc/default/login\" && file_umask_chk\n if [ -z \"$l_output2\" ]; then\n echo -e \" - No files contain a UMASK that is not restrictive enough\\n No UMASK updates required to existing files\"\n else\n echo -e \"\\n - UMASK is not restrictive enough in the following file(s):$l_output2\\n\\n- Remediation Procedure:\\n - Update these files and comment out the UMASK line\\n or update umask to be \\\"0027\\\" or more restrictive\"\n fi\n if [ -n \"$l_output\" ]; then\n echo -e \"$l_output\"\n else\n echo -e \" - Configure UMASK in a file in the \\\"/etc/profile.d/\\\" directory ending in \\\".sh\\\"\\n\\n Example Command (Hash to represent being run at a root prompt):\\n\\n# printf '%s\\\\\\n' \\\"umask 027\\\" > /etc/profile.d/50-systemwide_umask.sh\\n\"\n fi\n}\n```\n\n**Notes:**\n- This method only applies to bash and shell. If other shells are supported on the system, it is recommended that their configuration files also are checked\n- If the `pam_umask.so` module is going to be used to set `umask`, ensure that it's not being overridden by another setting. Refer to the PAM_UMASK(8) man page for more information"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.3.3_assessment-method",
                        "prose": "Run the following to verify the default user `umask` is set to `027`(octal) or `u=rwx,g=rx,o=` (Symbolic) to enforce newly created directories' permissions to be `750 (drwxr-x---)`, and newly created file's permissions be `640 (rw-r-----)`, or more restrictive:\n\n```\n#!/usr/bin/env bash\n\n{ \n l_output=\"\" l_output2=\"\"\n file_umask_chk()\n {\n if grep -Psiq -- '^\\h*umask\\h+(0?[0-7][2-7]7|u(=[rwx]{0,3}),g=([rx]{0,2}),o=)(\\h*#.*)?$' \"$l_file\"; then\n l_output=\"$l_output\\n - umask is set correctly in \\\"$l_file\\\"\"\n elif grep -Psiq -- '^\\h*umask\\h+(([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][0-6]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][0-6]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))' \"$l_file\"; then\n l_output2=\"$l_output2\\n - umask is incorrectly set in \\\"$l_file\\\"\"\n fi\n }\n while IFS= read -r -d $'\\0' l_file; do\n file_umask_chk\n done < <(find /etc/profile.d/ -type f -name '*.sh' -print0)\n [ -z \"$l_output\" ] && l_file=\"/etc/profile\" && file_umask_chk\n [ -z \"$l_output\" ] && l_file=\"/etc/bashrc\" && file_umask_chk\n [ -z \"$l_output\" ] && l_file=\"/etc/bash.bashrc\" && file_umask_chk\n [ -z \"$l_output\" ] && l_file=\"/etc/pam.d/postlogin\"\n if [ -z \"$l_output\" ]; then\n if grep -Psiq -- '^\\h*session\\h+[^#\\n\\r]+\\h+pam_umask\\.so\\h+([^#\\n\\r]+\\h+)?umask=(0?[0-7][2-7]7)\\b' \"$l_file\"; then\n l_output1=\"$l_output1\\n - umask is set correctly in \\\"$l_file\\\"\"\n elif grep -Psiq '^\\h*session\\h+[^#\\n\\r]+\\h+pam_umask\\.so\\h+([^#\\n\\r]+\\h+)?umask=(([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][0-6]\\b)|([0-7][01][0-7]\\b))' \"$l_file\"; then\n l_output2=\"$l_output2\\n - umask is incorrectly set in \\\"$l_file\\\"\"\n fi\n fi\n [ -z \"$l_output\" ] && l_file=\"/etc/login.defs\" && file_umask_chk\n [ -z \"$l_output\" ] && l_file=\"/etc/default/login\" && file_umask_chk\n [[ -z \"$l_output\" && -z \"$l_output2\" ]] && l_output2=\"$l_output2\\n - umask is not set\"\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured * :\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\"\n [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured * :\\n$l_output\\n\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-5.4.3.1",
                    "title": "Ensure nologin is not listed in /etc/shells",
                    "props": [
                      {
                        "name": "label",
                        "value": "5.4.3.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-5.4.3.1_statement",
                        "prose": "`/etc/shells` is a text file which contains the full pathnames of valid login shells. This file is consulted by `chsh` and available to be queried by other programs.\n\nBe aware that there are programs which consult this file to find out if a user is a normal user; for example, FTP daemons traditionally disallow access to users with shells not included in this file."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-5.4.3.1_assessment-objective",
                        "prose": "Rationale: A user can use `chsh` to change their configured shell.\n\nIf a user has a shell configured that isn't in in `/etc/shells`, then the system assumes that they're somehow restricted. In the case of `chsh` it means that the user cannot change that value.\n\nOther programs might query that list and apply similar restrictions.\n\nBy putting `nologin` in `/etc/shells`, any user that has `nologin` as its shell is considered a full, unrestricted user. This is not the expected behavior for `nologin`."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-5.4.3.1_guidance",
                        "prose": "Edit `/etc/shells` and remove any lines that include `nologin`"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-5.4.3.1_assessment-method",
                        "prose": "Run the following command to verify that `nologin` is not listed in the `/etc/shells` file:\n\n```\n# grep -Ps '^\\h*([^#\\n\\r]+)?\\/nologin\\b' /etc/shells\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              }
            ]
          }
        ]
      },
      {
        "id": "section-6",
        "title": "Logging and Auditing",
        "props": [
          {
            "name": "label",
            "value": "6"
          }
        ],
        "controls": [],
        "groups": [
          {
            "id": "section-6-1",
            "title": "Configure Integrity Checking",
            "props": [
              {
                "name": "label",
                "value": "6.1"
              }
            ],
            "controls": [
              {
                "id": "cis-6.1.1",
                "title": "Ensure AIDE is installed",
                "props": [
                  {
                    "name": "label",
                    "value": "6.1.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-6.1.1_statement",
                    "prose": "Advanced Intrusion Detection Environment (AIDE) is a intrusion detection tool that uses predefined rules to check the integrity of files and directories in the Linux operating system. AIDE has its own database to check the integrity of files and directories. \n\n`aide` takes a snapshot of files and directories including modification times, permissions, and file hashes which can then be used to compare against the current state of the filesystem to detect modifications to the system."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-6.1.1_assessment-objective",
                    "prose": "Rationale: By monitoring the filesystem state compromised files can be detected to prevent or limit the exposure of accidental or malicious misconfigurations or modified binaries."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-6.1.1_guidance",
                    "prose": "Run the following command to install `aide`:\n\n```\n# dnf install aide\n```\n\nConfigure `aide` as appropriate for your environment. Consult the `aide` documentation for options.\n\nInitialize `aide`:\n\nRun the following commands:\n\n```\n# aide --init\n```\n\n```\n# mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-6.1.1_assessment-method",
                    "prose": "Run the following command and verify `aide` is installed:\n\n```\n# rpm -q aide\n\naide-<version>\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-6.1.2",
                "title": "Ensure filesystem integrity is regularly checked",
                "props": [
                  {
                    "name": "label",
                    "value": "6.1.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-6.1.2_statement",
                    "prose": "Periodic checking of the filesystem integrity is needed to detect changes to the filesystem."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-6.1.2_assessment-objective",
                    "prose": "Rationale: Periodic file checking allows the system administrator to determine on a regular basis if critical files have been changed in an unauthorized fashion."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-6.1.2_guidance",
                    "prose": "**- IF -** `cron` will be used to schedule and run aide check\n\nRun the following command:\n```\n# crontab -u root -e\n```\n\nAdd the following line to the crontab:\n```\n0 5 * * * /usr/sbin/aide --check\n```\n\n**- OR -** \n\n**- IF -** `aidecheck.service` and `aidecheck.timer` will be used to schedule and run aide check:\n\nCreate or edit the file `/etc/systemd/system/aidecheck.service` and add the following lines:\n```\n[Unit]\nDescription=Aide Check\n\n[Service]\nType=simple\nExecStart=/usr/sbin/aide --check\n\n[Install]\nWantedBy=multi-user.target\n```\n\nCreate or edit the file `/etc/systemd/system/aidecheck.timer` and add the following lines:\n```\n[Unit]\nDescription=Aide check every day at 5AM\n\n[Timer]\nOnCalendar=*-*-* 05:00:00\nUnit=aidecheck.service\n\n[Install]\nWantedBy=multi-user.target\n```\n\nRun the following commands:\n```\n# chown root:root /etc/systemd/system/aidecheck.*\n# chmod 0644 /etc/systemd/system/aidecheck.*\n\n# systemctl daemon-reload\n\n# systemctl enable aidecheck.service\n# systemctl --now enable aidecheck.timer\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-6.1.2_assessment-method",
                    "prose": "Run the following commands to verify a cron job scheduled to run the aide check.\n```\n# grep -Ers '^([^#]+\\s+)?(\\/usr\\/s?bin\\/|^\\s*)aide(\\.wrapper)?\\s(--?\\S+\\s)*(--(check|update)|\\$AIDEARGS)\\b' /etc/cron.* /etc/crontab /var/spool/cron/\n```\nEnsure a cron job in compliance with site policy is returned.\n\n**- OR -** \n\nRun the following commands to verify that `aidecheck.service` and `aidecheck.timer` are enabled and `aidcheck.timer` is running\n```\n# systemctl is-enabled aidecheck.service\n\n# systemctl is-enabled aidecheck.timer\n# systemctl status aidecheck.timer\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-6.1.3",
                "title": "Ensure cryptographic mechanisms are used to protect the integrity of audit tools",
                "props": [
                  {
                    "name": "label",
                    "value": "6.1.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-6.1.3_statement",
                    "prose": "Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-6.1.3_assessment-objective",
                    "prose": "Rationale: Protecting the integrity of the tools used for auditing purposes is a critical step toward ensuring the integrity of audit information. Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity. \n\nAttackers may replace the audit tools or inject code into the existing tools with the purpose of providing the capability to hide or erase system activity from the audit logs. \n\nAudit tools should be cryptographically signed in order to provide the capability to identify when the audit tools have been modified, manipulated, or replaced. An example is a checksum hash of the file or files."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-6.1.3_guidance",
                    "prose": "Run the following command to determine the absolute path to the non-symlinked version on the audit tools:\n\n```\n# readlink -f /sbin\n```\n\nThe output will be either `/usr/sbin` **- OR -** `/sbin`. Ensure the correct path is used. \n\nEdit `/etc/aide.conf` and add or update the following selection lines replacing `<PATH>` with the correct path returned in the command above:\n\n```\n# Audit Tools \n<PATH>/auditctl p+i+n+u+g+s+b+acl+xattrs+sha512 \n<PATH>/auditd p+i+n+u+g+s+b+acl+xattrs+sha512 \n<PATH>/ausearch p+i+n+u+g+s+b+acl+xattrs+sha512 \n<PATH>/aureport p+i+n+u+g+s+b+acl+xattrs+sha512 \n<PATH>/autrace p+i+n+u+g+s+b+acl+xattrs+sha512 \n<PATH>/augenrules p+i+n+u+g+s+b+acl+xattrs+sha512\n```\n\n_Example_\n\n```\n# printf '\\n%s' \"# Audit Tools\" \"$(readlink -f /sbin/auditctl) p+i+n+u+g+s+b+acl+xattrs+sha512\" \\\n\"$(readlink -f /sbin/auditd) p+i+n+u+g+s+b+acl+xattrs+sha512\" \\\n\"$(readlink -f /sbin/ausearch) p+i+n+u+g+s+b+acl+xattrs+sha512\" \\\n\"$(readlink -f /sbin/aureport) p+i+n+u+g+s+b+acl+xattrs+sha512\" \\\n\"$(readlink -f /sbin/autrace) p+i+n+u+g+s+b+acl+xattrs+sha512\" \\\n\"$(readlink -f /sbin/augenrules) p+i+n+u+g+s+b+acl+xattrs+sha512\" >> /etc/aide.conf\n```\n\n**Note: - IF -** `/etc/aide.conf` includes a `@@x_include` statement:\n\n_Example:_\n```\n@@x_include /etc/aide.conf.d ^[a-zA-Z0-9_-]+$\n```\n\n- `@@x_include` FILE\n- `@@x_include` DIRECTORY REGEX\n - `@x_include` is identical to `@@include`, except that if a config file is executable it is run and the output is used as config.\n - If the executable file exits with status greater than zero or writes to stderr aide stops with an error.\n - For security reasons DIRECTORY and each executable config file must be owned by the current user and must not be group or world-writable."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-6.1.3_assessment-method",
                    "prose": "Verify that Advanced Intrusion Detection Environment (AIDE) is properly configured . \n\nRun the following script to verify:\n- AIDE is configured to use cryptographic mechanisms to protect the integrity of audit tools:\n- The following audit tool files include the options \"p, i, n, u, g, s, b, acl, xattrs and sha512\"\n - auditctl\n - auditd\n - ausearch\n - aureport\n - autrace\n - augenrules \n\n```\n#!/usr/bin/env bash\n\n{\n a_output=();a_output2=();a_output3=();a_parlist=()\n l_systemd_analyze=\"$(whereis systemd-analyze | awk '{print $2}')\"\n a_audit_files=(\"auditctl\" \"auditd\" \"ausearch\" \"aureport\" \"autrace\" \"augenrules\")\n f_parameter_chk()\n {\n for l_tool_file in \"${a_parlist[@]}\"; do\n if grep -Pq -- '\\b'\"$l_tool_file\"'\\b' <<< \"${!A_out[*]}\"; then\n for l_string in \"${!A_out[@]}\"; do\n l_check=\"$(grep -Po -- '^\\h*(\\/usr)?\\/sbin\\/'\"$l_tool_file\"'\\b' <<< \"$l_string\")\"\n if [ -n \"$l_check\" ]; then\n l_fname=\"$(printf '%s' \"${A_out[$l_string]}\")\"\n [ \"$l_check\" != \"$(readlink -f \"$l_check\")\" ] && \\\n a_output3+=(\" - \\\"$l_check\\\" should be updated to: \\\"$(readlink -f \"$l_check\")\\\"\" \" in: \\\"$l_fname\\\"\")\n a_missing=()\n for l_var in \"${a_items[@]}\"; do\n if ! grep -Pq -- \"\\b$l_var\\b\" <<< \"$l_string\"; then\n a_missing+=(\"\\\"$l_var\\\"\")\n fi\n done\n if [ \"${#a_missing[@]}\" -gt 0 ]; then\n a_output2+=(\" - Option(s): ( ${a_missing[*]} ) are missing from: \\\"$l_tool_file\\\" in: \\\"$l_fname\\\"\")\n else\n a_output+=(\" - Audit tool file \\\"$l_tool_file\\\" exists as:\" \" \\\"$l_string\\\"\" \" in the configuration file: \\\"$l_fname\\\"\")\n fi\n fi\n done\n else\n a_output2+=(\" - Audit tool file \\\"$l_tool_file\\\" doesn't exist in an AIDE configuration file\")\n fi\n done\n }\n f_aide_conf()\n {\n l_config_file=\"$(whereis aide.conf | awk '{print $2}')\"\n if [ -f \"$l_config_file\" ]; then\n a_items=(\"p\" \"i\" \"n\" \"u\" \"g\" \"s\" \"b\" \"acl\" \"xattrs\" \"sha512\")\n declare -A A_out\n while IFS= read -r l_out; do\n if grep -Pq -- '^\\h*\\#\\h*\\/[^#\\n\\r]+\\.conf\\b' <<< \"$l_out\"; then\n l_file=\"${l_out//# /}\"\n else\n for i in \"${a_parlist[@]}\"; do\n grep -Pq -- '^\\h*(\\/usr)?\\/sbin\\/'\"$i\"'\\b' <<< \"$l_out\" && A_out+=([\"$l_out\"]=\"$l_file\")\n done\n fi\n done < <(\"$l_systemd_analyze\" cat-config \"$l_config_file\" | grep -Pio '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n if [ \"${#A_out[@]}\" -gt 0 ]; then\n f_parameter_chk\n else\n a_output2+=(\" - No audit tool files are configured in an AIDE configuration file\")\n fi\n else\n a_output2+=(\" - AIDE configuration file not found.\" \" Please verify AIDE is installed on the system\")\n fi\n }\n for l_audit_file in \"${a_audit_files[@]}\"; do\n if [ -f \"$(readlink -f \"/sbin/$l_audit_file\")\" ]; then\n a_parlist+=(\"$l_audit_file\")\n else\n a_output+=(\" - Audit tool file \\\"$(readlink -f \"/sbin/$l_audit_file\")\\\" doesn't exist\")\n fi\n done\n [ \"${#a_parlist[@]}\" -gt 0 ] && f_aide_conf\n if [ \"${#a_output2[@]}\" -le 0 ]; then\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** PASS **\" \"${a_output[@]}\"\n [ \"${#a_output3[@]}\" -gt 0 ] && printf '%s\\n' \"\" \" ** WARNING **\" \"${a_output3[@]}\"\n else\n printf '%s\\n' \"\" \"- Audit Result:\" \" ** FAIL **\" \" * Reasons for audit failure *\" \"${a_output2[@]}\" \"\"\n [ \"${#a_output3[@]}\" -gt 0 ] && printf '%s\\n' \"\" \" ** WARNING **\" \"${a_output3[@]}\"\n [ \"${#a_output[@]}\" -gt 0 ] && printf '%s\\n' \"- Correctly set:\" \"${a_output[@]}\"\n fi\n}\n```\n\n**Note:** The script is written to read the \"winning\" configuration setting, to include any configuration settings in files included as part of the `@@x_include` setting.",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-6-2",
            "title": "System Logging",
            "props": [
              {
                "name": "label",
                "value": "6.2"
              }
            ],
            "controls": [],
            "groups": [
              {
                "id": "section-6-2-1",
                "title": "Configure systemd-journald service",
                "props": [
                  {
                    "name": "label",
                    "value": "6.2.1"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-6.2.1.1",
                    "title": "Ensure journald service is enabled and active",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.1.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.1.1_statement",
                        "prose": "Ensure that the `systemd-journald` service is enabled to allow capturing of logging events."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.1.1_assessment-objective",
                        "prose": "Rationale: If the `systemd-journald` service is not enabled to start on boot, the system will not capture logging events."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.1.1_guidance",
                        "prose": "Run the following commands to unmask and start `systemd-journald.service`\n\n```\n# systemctl unmask systemd-journald.service\n# systemctl start systemd-journald.service\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.1.1_assessment-method",
                        "prose": "Run the following command to verify `systemd-journald` is enabled:\n\n```\n# systemctl is-enabled systemd-journald.service\n\nstatic\n```\n\n**Note:** By default the `systemd-journald` service does not have an `[Install]` section and thus cannot be enabled / disabled. It is meant to be referenced as `Requires` or `Wants` by other unit files. As such, if the status of `systemd-journald` is not `static`, investigate why\n\nRun the following command to verify `systemd-journald` is active:\n\n```\n# systemctl is-active systemd-journald.service\n\nactive\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.2.1.2",
                    "title": "Ensure journald log file access is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.1.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.1.2_statement",
                        "prose": "Journald will create logfiles that do not already exist on the system. This setting controls what permissions will be applied to these newly created files."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.1.2_assessment-objective",
                        "prose": "Rationale: It is important to ensure that log files have the correct permissions to ensure that sensitive data is archived and protected."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.1.2_guidance",
                        "prose": "If the default configuration is not appropriate for the site specific requirements, copy `/usr/lib/tmpfiles.d/systemd.conf` to `/etc/tmpfiles.d/systemd.conf` and modify as required. Requirements is either `0640` or site policy if that is less restrictive."
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.1.2_assessment-method",
                        "prose": "First determine if there is an override file `/etc/tmpfiles.d/systemd.conf`. If so, this file will override all default settings as defined in `/usr/lib/tmpfiles.d/systemd.conf` and should be inspected.\n\nIf no override file exists, inspect the default `/usr/lib/tmpfiles.d/systemd.conf` against the site specific requirements.\n\nEnsure that file permissions are mode `0640` or more restrictive.\n\nRun the following script to verify if an override file exists or not and if the files permissions are mode `640` or more restrictive:\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" file_path=\"\"\n # Check for the existence of an override file\n if [ -f /etc/tmpfiles.d/systemd.conf ]; then\n file_path=\"/etc/tmpfiles.d/systemd.conf\"\n elif [ -f /usr/lib/tmpfiles.d/systemd.conf ]; then\n file_path=\"/usr/lib/tmpfiles.d/systemd.conf\"\n fi \n if [ -n \"$file_path\" ]; then # Ensure a file path is found\n higher_permissions_found=false # Initialize a flag to check if higher permissions are found\n # Read the file line by line and check for permissions higher than 0640\n while IFS= read -r line; do\n if echo \"$line\" | grep -Piq '^\\s*[a-z]+\\s+[^\\s]+\\s+0*([6-7][4-7][1-7]|7[0-7][0-7])\\s+'; then\n higher_permissions_found=true\n break\n fi\n done < \"$file_path\"\n if $higher_permissions_found; then\n echo -e \"\\n - permissions other than 0640 found in $file_path\"\n l_output=\"$l_output\\n - Inspect $file_path\"\n else\n echo -e \"All permissions inside $file_path are 0640 or more restrictive.\"\n fi\n fi\n if [ -z \"$l_output\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$file_path exists and has correct permissions set\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** REVIEW **\\n$l_output\\n - Review permissions to ensure they are set IAW site policy\"\n fi \n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.2.1.3",
                    "title": "Ensure journald log file rotation is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.1.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.1.3_statement",
                        "prose": "Journald includes the capability of rotating log files regularly to avoid filling up the system with logs or making the logs unmanageably large. The file `/etc/systemd/journald.conf` is the configuration file used to specify how logs generated by Journald should be rotated."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.1.3_assessment-objective",
                        "prose": "Rationale: By keeping the log files smaller and more manageable, a system administrator can easily archive these files to another system and spend less time looking through inordinately large log files."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.1.3_guidance",
                        "prose": "Edit `/etc/systemd/journald.conf` or a file ending in `.conf` the `/etc/systemd/journald.conf.d/` directory. Set the following parameters in the `[Journal]` section to ensure logs are rotated according to site policy. The settings should be carefully understood as there are specific edge cases and prioritization of parameters.\n\n_Example Configuration_\n```\n[Journal]\nSystemMaxUse=1G\nSystemKeepFree=500M\nRuntimeMaxUse=200M\nRuntimeKeepFree=50M\nMaxFileSec=1month\n```\n\n**Note:** If these settings appear in a canonically later file, or later in the same file, the setting will be overwritten"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.1.3_assessment-method",
                        "prose": "Review `/etc/systemd/journald.conf` and files in the `/etc/systemd/journald.conf.d/` directory ending in `.conf`. Verify logs are rotated according to site policy. \n\nRun the following command and ensure logs are rotated according to site policy:\n```\n# systemd-analyze cat-config systemd/journald.conf | grep -E '(SystemMaxUse|SystemKeepFree|RuntimeMaxUse|RuntimeKeepFree|MaxFileSec)'\n```\n\n```\nSystemMaxUse=\nSystemKeepFree=\nRuntimeMaxUse=\nRuntimeKeepFree=\nMaxFileSec=\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.2.1.4",
                    "title": "Ensure only one logging system is in use",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.1.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.1.4_statement",
                        "prose": "Best practices recommend that a single centralized logging system be used for log management, choose a single service either `rsyslog` **- OR -** `journald` to be used as a single centralized logging system."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.1.4_assessment-objective",
                        "prose": "Rationale: Configuring only one logging service either `rsyslog` **- OR -** `journald` avoids redundancy, optimizes resources, simplifies configuration and management, and ensures consistency.\nImpact: Transitioning from one logging service to another can be complex and time consuming, it involves reconfiguration and may result in data loss if not managed and reconfigured correctly."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.1.4_guidance",
                        "prose": "1. Determine whether to use `journald` **- OR -** `rsyslog` depending on site needs\n2. Configure `systemd-jounald.service` \n3. Configure only **ONE** either `journald` **- OR -** `rsyslog` and complete the recommendations in that subsection\n4. Return to this recommendation to ensure only one logging system is in use"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.1.4_assessment-method",
                        "prose": "Run the following script to ensure only one logging system is in use:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" # Check the status of rsyslog and journald\n if systemctl is-active --quiet rsyslog; then\n l_output=\"$l_output\\n - rsyslog is in use\\n- follow the recommendations in Configure rsyslog subsection only\"\n elif systemctl is-active --quiet systemd-journald; then\n l_output=\"$l_output\\n - journald is in use\\n- follow the recommendations in Configure journald subsection only\"\n else\n echo -e \u201cunable to determine system logging\u201d\n l_output2=\"$l_output2\\n - unable to determine system logging\\n- Configure only ONE system logging: rsyslog OR journald\"\n fi\n if [ -z \"$l_output2\" ]; then # Provide audit results\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              },
              {
                "id": "section-6-2-2",
                "title": "Configure journald",
                "props": [
                  {
                    "name": "label",
                    "value": "6.2.2"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-6.2.2.2",
                    "title": "Ensure journald ForwardToSyslog is disabled",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.2.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.2.2_statement",
                        "prose": "Data from `journald` should be kept in the confines of the service and not forwarded to other services."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.2.2_assessment-objective",
                        "prose": "Rationale: **- IF -** `journald` is the method for capturing logs, all logs of the system should be handled by `journald` and not forwarded to other logging mechanisms.\n\n**Note:** This recommendation **only applies if `journald` is the chosen method for client side logging**. Do not apply this recommendation if `rsyslog` is used."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.2.2_guidance",
                        "prose": "**- IF -** `rsyslog` is the preferred method for capturing logs, this section and Recommendation should be skipped and the \"Configure rsyslog\" section followed.\n\n**- IF -** `journald` is the preferred method for capturing logs:\n\nSet the following parameter in the `[Journal]` section in `/etc/systemd/journald.conf` or a file in /etc/systemd/journald.conf.d/ ending in `.conf`:\n\n```\nForwardToSyslog=no\n```\n\n_Example:_\n```\n#!/usr/bin/env bash\n\n{\n [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir /etc/systemd/journald.conf.d/\n if grep -Psq -- '^\\h*\\[Journal\\]' /etc/systemd/journald.conf.d/60-journald.conf; then\n printf '%s\\n' \"ForwardToSyslog=no\" >> /etc/systemd/journald.conf.d/60-journald.conf\n else\n printf '%s\\n' \"[Journal]\" \"ForwardToSyslog=no\" >> /etc/systemd/journald.conf.d/60-journald.conf\n fi\n}\n```\n\n**Note:** If this setting appears in a canonically later file, or later in the same file, the setting will be overwritten\n\nRun to following command to update the parameters in the service:\n\n```\n# systemctl reload-or-restart systemd-journald\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.2.2_assessment-method",
                        "prose": "**- IF -** `journald` is the method for capturing logs\n\nRun the following command to verify `ForwardToSyslog` is set to `no`:\n\n```\n# systemd-analyze cat-config systemd/journald.conf systemd/journald.conf.d/* | grep -E \"^ForwardToSyslog=no\"\n\nForwardToSyslog=no\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.2.2.3",
                    "title": "Ensure journald Compress is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.2.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.2.3_statement",
                        "prose": "The journald system includes the capability of compressing overly large files to avoid filling up the system with logs or making the logs unmanageably large."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.2.3_assessment-objective",
                        "prose": "Rationale: Uncompressed large files may unexpectedly fill a filesystem leading to resource unavailability. Compressing logs prior to write can prevent sudden, unexpected filesystem impacts.\n\n**Note:** This recommendation **only applies if `journald` is the chosen method for client side logging**. Do not apply this recommendation if `rsyslog` is used."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.2.3_guidance",
                        "prose": "Set the following parameter in the `[Journal]` section in `/etc/systemd/journald.conf` or a file in `/etc/systemd/journald.conf.d/` ending in `.conf`:\n\n```\nCompress=yes\n```\n\n_Example:_\n```\n#!/usr/bin/env bash\n\n{\n [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir /etc/systemd/journald.conf.d/\n if grep -Psq -- '^\\h*\\[Journal\\]' /etc/systemd/journald.conf.d/60-journald.conf; then\n printf '%s\\n' \"Compress=yes\" >> /etc/systemd/journald.conf.d/60-journald.conf\n else\n printf '%s\\n' \"[Journal]\" \"Compress=yes\" >> /etc/systemd/journald.conf.d/60-journald.conf\n fi\n}\n```\n\n**Note:** If this setting appears in a canonically later file, or later in the same file, the setting will be overwritten\n\nRun to following command to update the parameters in the service:\n\n```\n# systemctl reload-or-restart systemd-journald\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.2.3_assessment-method",
                        "prose": "Run the following command to verify `Compress` is set to `yes`:\n\n```\n# systemd-analyze cat-config systemd/journald.conf systemd/journald.conf.d/* | grep -E \"^Compress=yes\"\n\nCompress=yes\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.2.2.4",
                    "title": "Ensure journald Storage is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.2.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.2.4_statement",
                        "prose": "Data from journald may be stored in volatile memory or persisted locally on the server. Logs in memory will be lost upon a system reboot. By persisting logs to local disk on the server they are protected from loss due to a reboot."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.2.4_assessment-objective",
                        "prose": "Rationale: Writing log data to disk will provide the ability to forensically reconstruct events which may have impacted the operations or security of a system even after a system crash or reboot.\n\n**Note:** This recommendation **only applies if `journald` is the chosen method for client side logging**. Do not apply this recommendation if `rsyslog` is used."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.2.4_guidance",
                        "prose": "Set the following parameter in the `[Journal]` section in `/etc/systemd/journald.conf` or a file in `/etc/systemd/journald.conf.d/` ending in `.conf`:\n\n```\nStorage=persistent\n```\n\n_Example:_\n```\n#!/usr/bin/env bash\n\n{\n [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir /etc/systemd/journald.conf.d/\n if grep -Psq -- '^\\h*\\[Journal\\]' /etc/systemd/journald.conf.d/60-journald.conf; then\n printf '%s\\n' \"Storage=persistent\" >> /etc/systemd/journald.conf.d/60-journald.conf\n else\n printf '%s\\n' \"[Journal]\" \"Storage=persistent\" >> /etc/systemd/journald.conf.d/60-journald.conf\n fi\n}\n```\n\n**Note:** If this setting appears in a canonically later file, or later in the same file, the setting will be overwritten\n\nRun to following command to update the parameters in the service:\n\n```\n# systemctl reload-or-restart systemd-journald\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.2.4_assessment-method",
                        "prose": "Run the following command to verify `Storage` is set to `persistent`:\n```\n# systemd-analyze cat-config systemd/journald.conf systemd/journald.conf.d/* | grep -E \"^Storage=persistent\"\n\nStorage=persistent\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": [
                  {
                    "id": "section-6-2-2-1",
                    "title": "Configure systemd-journal-remote",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.2.1"
                      }
                    ],
                    "controls": [
                      {
                        "id": "cis-6.2.2.1.1",
                        "title": "Ensure systemd-journal-remote is installed",
                        "props": [
                          {
                            "name": "label",
                            "value": "6.2.2.1.1"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-6.2.2.1.1_statement",
                            "prose": "Journald `systemd-journal-remote` supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus enabling centralized log management."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-6.2.2.1.1_assessment-objective",
                            "prose": "Rationale: Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.\n\n**Note:** This recommendation **only applies if `journald` is the chosen method for client side logging**. Do not apply this recommendation if `rsyslog` is used."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-6.2.2.1.1_guidance",
                            "prose": "Run the following command to install `systemd-journal-remote`:\n\n```\n# dnf install systemd-journal-remote\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-6.2.2.1.1_assessment-method",
                            "prose": "**- IF -** `journald` will be used for logging on the system:\n\nRun the following command to verify `systemd-journal-remote` is installed.\n\n```\n# rpm -q systemd-journal-remote\n```\n\nVerify the output matches:\n\n```\nsystemd-journal-remote-<version>\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-6.2.2.1.2",
                        "title": "Ensure systemd-journal-upload authentication is configured",
                        "props": [
                          {
                            "name": "label",
                            "value": "6.2.2.1.2"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-6.2.2.1.2_statement",
                            "prose": "Journald `systemd-journal-upload` supports the ability to send log events it gathers to a remote log host."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-6.2.2.1.2_assessment-objective",
                            "prose": "Rationale: Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.\n\n**Note:** This recommendation **only applies if `journald` is the chosen method for client side logging**. Do not apply this recommendation if `rsyslog` is used."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-6.2.2.1.2_guidance",
                            "prose": "Edit the `/etc/systemd/journal-upload.conf` file or a file in `/etc/systemd/journal-upload.conf.d` ending in `.conf` and ensure the following lines are set in the `[Upload]` section per your environment:\n\n```\n[Upload]\nURL=192.168.50.42\nServerKeyFile=/etc/ssl/private/journal-upload.pem\nServerCertificateFile=/etc/ssl/certs/journal-upload.pem\nTrustedCertificateFile=/etc/ssl/ca/trusted.pem\n```\n\nRestart the service:\n\n```\n# systemctl restart systemd-journal-upload\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-6.2.2.1.2_assessment-method",
                            "prose": "Run the following command to verify `systemd-journal-upload` authentication is configured:\n\n```\n# grep -P \"^ *URL=|^ *ServerKeyFile=|^ *ServerCertificateFile=|^ *TrustedCertificateFile=\" /etc/systemd/journal-upload.conf\n```\n\nVerify the output matches per your environments certificate locations and the URL of the log server:\n\n_Example:_\n```\n[Upload]\nURL=192.168.50.42\nServerKeyFile=/etc/ssl/private/journal-upload.pem\nServerCertificateFile=/etc/ssl/certs/journal-upload.pem\nTrustedCertificateFile=/etc/ssl/ca/trusted.pem\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-6.2.2.1.3",
                        "title": "Ensure systemd-journal-upload is enabled and active",
                        "props": [
                          {
                            "name": "label",
                            "value": "6.2.2.1.3"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-6.2.2.1.3_statement",
                            "prose": "Journald `systemd-journal-upload` supports the ability to send log events it gathers to a remote log host."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-6.2.2.1.3_assessment-objective",
                            "prose": "Rationale: Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.\n\n**Note:** This recommendation **only applies if `journald` is the chosen method for client side logging**. Do not apply this recommendation if `rsyslog` is used."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-6.2.2.1.3_guidance",
                            "prose": "Run the following commands to unmask, enable and start `systemd-journal-upload`:\n\n```\n# systemctl unmask systemd-journal-upload.service\n# systemctl --now enable systemd-journal-upload.service\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-6.2.2.1.3_assessment-method",
                            "prose": "Run the following command to verify `systemd-journal-upload` is enabled.\n\n```\n# systemctl is-enabled systemd-journal-upload.service\n\nenabled\n```\n\nRun the following command to verify `systemd-journal-upload` is active:\n\n```\n# systemctl is-active systemd-journal-upload.service\n\nactive\n```",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "cis-6.2.2.1.4",
                        "title": "Ensure systemd-journal-remote service is not in use",
                        "props": [
                          {
                            "name": "label",
                            "value": "6.2.2.1.4"
                          }
                        ],
                        "parts": [
                          {
                            "name": "statement",
                            "id": "cis-6.2.2.1.4_statement",
                            "prose": "Journald `systemd-journal-remote` supports the ability to receive messages from remote hosts, thus acting as a log server. Clients should not receive data from other hosts.\n\n**Note:** \n- The same package, `systemd-journal-remote`, is used for both sending logs to remote hosts and receiving incoming logs.\n- With regards to receiving logs, there are two services; `systemd-journal-remote.socket` and `systemd-journal-remote.service`."
                          },
                          {
                            "name": "assessment-objective",
                            "id": "cis-6.2.2.1.4_assessment-objective",
                            "prose": "Rationale: If a client is configured to also receive data, thus turning it into a server, the client system is acting outside it's operational boundary.\n\n**Note:** This recommendation **only applies if `journald` is the chosen method for client side logging**. Do not apply this recommendation if `rsyslog` is used."
                          },
                          {
                            "name": "guidance",
                            "id": "cis-6.2.2.1.4_guidance",
                            "prose": "Run the following commands to stop and mask `systemd-journal-remote.socket` and systemd-journal-remote.service:\n\n```\n# systemctl stop systemd-journal-remote.socket systemd-journal-remote.service\n# systemctl mask systemd-journal-remote.socket systemd-journal-remote.service\n```"
                          },
                          {
                            "name": "assessment-method",
                            "id": "cis-6.2.2.1.4_assessment-method",
                            "prose": "Run the following command to verify `systemd-journal-remote.socket` and `systemd-journal-remote.service` are not enabled:\n\n```\n# systemctl is-enabled systemd-journal-remote.socket systemd-journal-remote.service | grep -P -- '^enabled'\n```\nNothing should be returned\n\nRun the following command to verify `systemd-journal-remote.socket` and `systemd-journal-remote.service` are not active:\n\n```\n# systemctl is-active systemd-journal-remote.socket systemd-journal-remote.service | grep -P -- '^active'\n```\nNothing should be returned",
                            "props": [
                              {
                                "name": "method",
                                "value": "TEST",
                                "ns": "http://csrc.nist.gov/ns/rmf"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "groups": []
                  }
                ]
              },
              {
                "id": "section-6-2-3",
                "title": "Configure rsyslog",
                "props": [
                  {
                    "name": "label",
                    "value": "6.2.3"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-6.2.3.1",
                    "title": "Ensure rsyslog is installed",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.3.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.3.1_statement",
                        "prose": "The `rsyslog` software is recommended in environments where `journald` does not meet operation requirements."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.3.1_assessment-objective",
                        "prose": "Rationale: The security enhancements of `rsyslog` such as connection-oriented (i.e. TCP) transmission of logs, the option to log to database formats, and the encryption of log data en route to a central logging server) justify installing and configuring the package.\n\n**Note:** This recommendation only applies if `rsyslog` is the chosen method for client side logging. Do not apply this recommendation if `journald` is used."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.3.1_guidance",
                        "prose": "Run the following command to install `rsyslog`:\n\n```\n# dnf install rsyslog\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.3.1_assessment-method",
                        "prose": "**- IF -** `rsyslog` is being used for logging on the system:\n\nRun the following command to verify `rsyslog` is installed:\n\n```\n# rpm -q rsyslog\n```\n\nVerify the output matches:\n\n```\nrsyslog-<version>\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.2.3.2",
                    "title": "Ensure rsyslog service is enabled and active",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.3.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.3.2_statement",
                        "prose": "Once the `rsyslog` package is installed, ensure that the service is enabled."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.3.2_assessment-objective",
                        "prose": "Rationale: If the `rsyslog` service is not enabled to start on boot, the system will not capture logging events.\n\n**Note:** This recommendation only applies if `rsyslog` is the chosen method for client side logging. Do not apply this recommendation if `journald` is used."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.3.2_guidance",
                        "prose": "**- IF -** `rsyslog` is being used for logging on the system:\n\nRun the following commands to unmask, enable, and start `rsyslog.service`:\n\n```\n# systemctl unmask rsyslog.service\n# systemctl enable rsyslog.service\n# systemctl start rsyslog.service\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.3.2_assessment-method",
                        "prose": "**- IF -** `rsyslog` is being used for logging on the system:\n\nRun the following command to verify `rsyslog.service` is enabled:\n\n```\n# systemctl is-enabled rsyslog\n\nenabled\n```\n\nRun the following command to verify `rsyslog.service` is active:\n\n```\n# systemctl is-active rsyslog.service\n\nactive\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.2.3.3",
                    "title": "Ensure journald is configured to send logs to rsyslog",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.3.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.3.3_statement",
                        "prose": "Data from `systemd-journald` may be stored in volatile memory or persisted locally on the server. Utilities exist to accept remote export of `systemd-journald` logs, however, use of the `rsyslog` service provides a consistent means of log collection and export."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.3.3_assessment-objective",
                        "prose": "Rationale: **- IF -** `rsyslog` is the preferred method for capturing logs, all logs of the system should be sent to it for further processing.\nImpact: **- IF -** `Journald` is the preferred method for capturing logs, this section and Recommendation should be skipped and the \"Configure Journald\" section followed."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.3.3_guidance",
                        "prose": "**- IF -** `rsyslog` is the preferred method for capturing logs:\n\nSet the following parameter in the `[Journal]` section in `/etc/systemd/journald.conf` or a file in `/etc/systemd/journald.conf.d/` ending in `.conf`:\n\n```\nForwardToSyslog=yes\n```\n\n_Example:_\n```\n#!/usr/bin/env bash\n\n{\n [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir /etc/systemd/journald.conf.d/\n if grep -Psq -- '^\\h*\\[Journal\\]' /etc/systemd/journald.conf.d/60-journald.conf; then\n printf '%s\\n' \"ForwardToSyslog=yes\" >> /etc/systemd/journald.conf.d/60-journald.conf\n else\n printf '%s\\n' \"[Journal]\" \"ForwardToSyslog=yes\" >> /etc/systemd/journald.conf.d/60-journald.conf\n fi\n}\n```\n\n**Note:** If this setting appears in a canonically later file, or later in the same file, the setting will be overwritten\n\nRun to following command to update the parameters in the service:\n\nRestart `systemd-journald.service`:\n\n```\n# systemctl reload-or-restart systemd-journald.service\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.3.3_assessment-method",
                        "prose": "**- IF -** `rsyslog` is the preferred method for capturing logs\n\nRun the following command to verify that logs are forwarded to `rsyslog` by setting `ForwardToSyslog` to `yes` in the systemd-journald configuration:\n\n```\n# systemd-analyze cat-config systemd/journald.conf systemd/journald.conf.d/* | grep -E \"^ForwardToSyslog=yes\"\n\nForwardToSyslog=yes\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.2.3.4",
                    "title": "Ensure rsyslog log file creation mode is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.3.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.3.4_statement",
                        "prose": "`rsyslog` will create logfiles that do not already exist on the system.\n\nThe `$FileCreateMode` parameter allows you to specify the creation mode with which `rsyslog` creates new files. If not specified, the value 0644 is used (which retains backward-compatibility with earlier releases). The value given must always be a 4-digit octal number, with the initial digit being zero.\n\nPlease note that the actual permission depend on rsyslogd\u2019s process umask. \n\n`$FileCreateMode` may be specified multiple times. If so, it specifies the creation mode for all selector lines that follow until the next $FileCreateMode parameter. Order of lines is vitally important."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.3.4_assessment-objective",
                        "prose": "Rationale: It is important to ensure that log files have the correct permissions to ensure that sensitive data is archived and protected.\n\n**Note:** This recommendation only applies if `rsyslog` is the chosen method for client side logging. Do not apply this recommendation if `systemd-journald` is used."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.3.4_guidance",
                        "prose": "Edit either `/etc/rsyslog.conf` or a dedicated `.conf` file in `/etc/rsyslog.d/` and set `$FileCreateMode` to `0640` or more restrictive:\n\n```\n$FileCreateMode 0640\n```\n\nRestart the service:\n\n```\n# systemctl restart rsyslog\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.3.4_assessment-method",
                        "prose": "Run the following command \n\nRun the following command to verify `$FileCreateMode`: \n\n```\n# grep -Ps '^\\h*\\$FileCreateMode\\h+0[0,2,4,6][0,2,4]0\\b' /etc/rsyslog.conf /etc/rsyslog.d/*.conf\n```\n\nVerify the output is includes 0640 or more restrictive:\n\n```\n$FileCreateMode 0640 \n```\n\nShould a site policy dictate less restrictive permissions, ensure to follow said policy.\n\n**Note:** More restrictive permissions such as `0600` is implicitly sufficient.",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.2.3.5",
                    "title": "Ensure rsyslog logging is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.3.5"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.3.5_statement",
                        "prose": "The `/etc/rsyslog.conf` and `/etc/rsyslog.d/*.conf` files specifies rules for logging and which files are to be used to log certain classes of messages."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.3.5_assessment-objective",
                        "prose": "Rationale: A great deal of important security-related information is sent via `rsyslog` (e.g., successful and failed su attempts, failed login attempts, root login attempts, etc.).\n\n**Note:** This recommendation only applies if `rsyslog` is the chosen method for client side logging. Do not apply this recommendation if `journald` is used."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.3.5_guidance",
                        "prose": "Edit the following lines in the `/etc/rsyslog.conf` and `/etc/rsyslog.d/*.conf` files as appropriate for your environment.\n\n**Note:** The below configuration is shown for example purposes only. Due care should be given to how the organization wishes to store log data.\n\n```\n*.emerg :omusrmsg:*\nauth,authpriv.* /var/log/secure\nmail.* -/var/log/mail\nmail.info -/var/log/mail.info\nmail.warning -/var/log/mail.warn\nmail.err /var/log/mail.err\ncron.* /var/log/cron\n*.=warning;*.=err -/var/log/warn\n*.crit /var/log/warn\n*.*;mail.none;news.none -/var/log/messages\nlocal0,local1.* -/var/log/localmessages\nlocal2,local3.* -/var/log/localmessages\nlocal4,local5.* -/var/log/localmessages\nlocal6,local7.* -/var/log/localmessages\n```\n\nRun the following command to reload the `rsyslogd` configuration:\n\n```\n# systemctl restart rsyslog\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.3.5_assessment-method",
                        "prose": "Review the contents of `/etc/rsyslog.conf` and `/etc/rsyslog.d/*.conf` files to ensure appropriate logging is set. In addition, run the following command and verify that the log files are logging information as expected:\n\n```\n# ls -l /var/log/maillog\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.2.3.6",
                    "title": "Ensure rsyslog is configured to send logs to a remote log host",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.3.6"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.3.6_statement",
                        "prose": "`rsyslog` supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus enabling centralized log management."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.3.6_assessment-objective",
                        "prose": "Rationale: Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.\n\n**Note:** This recommendation only applies if `rsyslog` is the chosen method for client side logging. Do not apply this recommendation if `systemd-journald` is used."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.3.6_guidance",
                        "prose": "Edit the `/etc/rsyslog.conf` and `/etc/rsyslog.d/*.conf` files and add the following line (where `loghost.example.com` is the name of your central log host). The `target` directive may either be a fully qualified domain name or an IP address.\n\n_Example:_\n```\n*.* action(type=\"omfwd\" target=\"loghost.example.com\" port=\"514\" protocol=\"tcp\"\n action.resumeRetryCount=\"100\"\n queue.type=\"LinkedList\" queue.size=\"1000\")\n```\n\nRun the following command to reload `rsyslog.service`:\n\n```\n# systemctl reload-or-restart rsyslog.service\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.3.6_assessment-method",
                        "prose": "Review the `/etc/rsyslog.conf` and `/etc/rsyslog.d/*.conf` files and verify that logs are sent to a central host:\n\n**Note:** The **basic format** is intended for users that configured their file use `@loghost.example.com` The **advanced format** is a more modern format that will audit formatting similar to that found in the remediation.\n\n**basic format**\n\n```\n# grep \"^*.*[^I][^I]*@\" /etc/rsyslog.conf /etc/rsyslog.d/*.conf\n```\n\nOutput should include `@@<FQDN or IP of remote loghost>`:\n\n_Example:_\n```\n*.* @@loghost.example.com\n```\n\n**advanced format**\n\n```\n# grep -Psi -- '^\\s*([^#]+\\s+)?action\\(([^#]+\\s+)?\\btarget=\\\"?[^#\"]+\\\"?\\b' /etc/rsyslog.conf /etc/rsyslog.d/*.conf\n```\n\nOutput should include `target=<FQDN or IP of remote loghost>`:\n\n_Example:_\n```\n*.* action(type=\"omfwd\" target=\"loghost.example.com\" port=\"514\" protocol=\"tcp\"\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.2.3.7",
                    "title": "Ensure rsyslog is not configured to receive logs from a remote client",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.3.7"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.3.7_statement",
                        "prose": "`rsyslog` supports the ability to receive messages from remote hosts, thus acting as a log server. Clients should not receive data from other hosts."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.3.7_assessment-objective",
                        "prose": "Rationale: If a client is configured to also receive data, thus turning it into a server, the client system is acting outside its operational boundary.\n\n**Note:** This recommendation only applies if `rsyslog` is the chosen method for client side logging. Do not apply this recommendation if `systemd-journald` is used."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.3.7_guidance",
                        "prose": "Should there be any active log server configuration found in the auditing section, modify those files and remove the specific lines highlighted by the audit. Verify none of the following entries are present in any of `/etc/rsyslog.conf` or `/etc/rsyslog.d/*.conf`.\n\n**advanced format**\n\n```\nmodule(load=\"imtcp\")\ninput(type=\"imtcp\" port=\"514\")\n```\n\n**deprecated legacy format**\n\n```\n$ModLoad imtcp\n$InputTCPServerRun\n```\n\nRestart the service:\n\n```\n# systemctl restart rsyslog\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.3.7_assessment-method",
                        "prose": "Review the `/etc/rsyslog.conf` and `/etc/rsyslog.d/*.conf` files and verify that the system is not configured to accept incoming logs.\n\n**advanced format**\n\n```\n# grep -Psi -- '^\\h*module\\(load=\\\"?imtcp\\\"?\\)' /etc/rsyslog.conf /etc/rsyslog.d/*.conf\n# grep -Psi -- '^\\h*input\\(type=\\\"?imtcp\\\"?\\b' /etc/rsyslog.conf /etc/rsyslog.d/*.conf\n```\n\nNothing should be returned\n\n**obsolete legacy format**\n\n```\n# grep -Psi -- '^\\h*\\$ModLoad\\h+imtcp\\b' /etc/rsyslog.conf /etc/rsyslog.d/*.conf\n# grep -Psi -- '^\\h*\\$InputTCPServerRun\\b' /etc/rsyslog.conf /etc/rsyslog.d/*.conf\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.2.3.8",
                    "title": "Ensure rsyslog logrotate is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.3.8"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.3.8_statement",
                        "prose": "The system includes the capability of rotating log files regularly to avoid filling up the system with logs or making the logs unmanageably large. The file `/etc/logrotate.d/rsyslog` is the configuration file used to rotate log files created by `rsyslog`."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.3.8_assessment-objective",
                        "prose": "Rationale: By keeping the log files smaller and more manageable, a system administrator can easily archive these files to another system and spend less time looking through inordinately large log files.\n\n**Note:** This recommendation only applies if `rsyslog` is the chosen method for client side logging. Do not apply this recommendation if `systemd-journald` is used."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.3.8_guidance",
                        "prose": "Edit `/etc/logrotate.conf` and `/etc/logrotate.d/*` to ensure logs are rotated according to site policy.\n\n_Example logrotate configuration that specifies log files be rotated weekly, keep 4 backlogs, compress old log files, ignores missing and empty log files, postrotate to reload rsyslog service after logs are rotated_\n```\n/var/log/rsyslog/*.log {\n weekly\n rotate 4\n compress\n missingok\n notifempty\n postrotate\n /usr/bin/systemctl reload rsyslog.service >/dev/null || true\n endscript \n}"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.3.8_assessment-method",
                        "prose": "Review `/etc/logrotate.conf` and `/etc/logrotate.d/*` and verify logs are rotated according to site policy.\n```\n#!/usr/bin/env bash\n\n{ \n l_output=\"\" l_rotate_conf=\"\" #check for logrotate.conf file\n if [ -f /etc/logrotate.conf ]; then\n l_rotate_conf=\"/etc/logrotate.conf\"\n elif compgen -G \"/etc/logrotate.d/*.conf\" 2>/dev/null; then\n for file in /etc/logrotate.d/*.conf; do\n l_rotate_conf=\"$file\" \n done\n elif systemctl is-active --quiet systemd-journal-upload.service; then\n echo -e \"- journald is in use on system\\n - recommendation is NA\"\n else \n echo -e \"- logrotate is not configured\"\n l_output=\"$l_output\\n- rsyslog is in use and logrotate is not configured\"\n fi\n if [ -z \"$l_output\" ]; then # Provide output from checks\n echo -e \"\\n- Audit Result:\\n ** REVIEW **\\n - $l_rotate_conf and verify logs are rotated according to site policy.\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              },
              {
                "id": "section-6-2-4",
                "title": "Configure Logfiles",
                "props": [
                  {
                    "name": "label",
                    "value": "6.2.4"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-6.2.4.1",
                    "title": "Ensure access to all logfiles has been configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.2.4.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.2.4.1_statement",
                        "prose": "Log files contain information from many services on the the local system, or in the event of a centralized log server, others systems logs as well. \n\nIn general log files are found in `/var/log/`, although application can be configured to store logs elsewhere. Should your application store logs in another, ensure to run the same test on that location."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.2.4.1_assessment-objective",
                        "prose": "Rationale: It is important that log files have the correct permissions to ensure that sensitive data is protected and that only the appropriate users / groups have access to them."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.2.4.1_guidance",
                        "prose": "Run the following script to update permissions and ownership on files in `/var/log`. \n\nAlthough the script is not destructive, ensure that the output is captured in the event that the remediation causes issues.\n\n```\n#!/usr/bin/env bash\n\n{\n l_op2=\"\" l_output2=\"\"\n l_uidmin=\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"\n file_test_fix()\n {\n l_op2=\"\"\n l_fuser=\"root\"\n l_fgroup=\"root\"\n if [ $(( $l_mode & $perm_mask )) -gt 0 ]; then\n l_op2=\"$l_op2\\n - Mode: \\\"$l_mode\\\" should be \\\"$maxperm\\\" or more restrictive\\n - Removing excess permissions\"\n chmod \"$l_rperms\" \"$l_fname\"\n fi\n if [[ ! \"$l_user\" =~ $l_auser ]]; then\n l_op2=\"$l_op2\\n - Owned by: \\\"$l_user\\\" and should be owned by \\\"${l_auser//|/ or }\\\"\\n - Changing ownership to: \\\"$l_fuser\\\"\"\n chown \"$l_fuser\" \"$l_fname\"\n fi\n if [[ ! \"$l_group\" =~ $l_agroup ]]; then\n l_op2=\"$l_op2\\n - Group owned by: \\\"$l_group\\\" and should be group owned by \\\"${l_agroup//|/ or }\\\"\\n - Changing group ownership to: \\\"$l_fgroup\\\"\"\n chgrp \"$l_fgroup\" \"$l_fname\"\n fi\n [ -n \"$l_op2\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_fname\\\" is:$l_op2\\n\"\n }\n unset a_file && a_file=() # clear and initialize array\n # Loop to create array with stat of files that could possibly fail one of the audits\n while IFS= read -r -d $'\\0' l_file; do\n [ -e \"$l_file\" ] && a_file+=(\"$(stat -Lc '%n^%#a^%U^%u^%G^%g' \"$l_file\")\")\n done < <(find -L /var/log -type f \\( -perm /0137 -o ! -user root -o ! -group root \\) -print0)\n while IFS=\"^\" read -r l_fname l_mode l_user l_uid l_group l_gid; do\n l_bname=\"$(basename \"$l_fname\")\"\n case \"$l_bname\" in\n lastlog | lastlog.* | wtmp | wtmp.* | wtmp-* | btmp | btmp.* | btmp-* | README)\n perm_mask='0113'\n maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n l_rperms=\"ug-x,o-wx\"\n l_auser=\"root\"\n l_agroup=\"(root|utmp)\"\n file_test_fix\n ;;\n secure | auth.log | syslog | messages)\n perm_mask='0137'\n maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n l_rperms=\"u-x,g-wx,o-rwx\"\n l_auser=\"(root|syslog)\"\n l_agroup=\"(root|adm)\"\n file_test_fix\n ;;\n SSSD | sssd)\n perm_mask='0117'\n maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n l_rperms=\"ug-x,o-rwx\"\n l_auser=\"(root|SSSD)\"\n l_agroup=\"(root|SSSD)\"\n file_test_fix \n ;;\n gdm | gdm3)\n perm_mask='0117'\n l_rperms=\"ug-x,o-rwx\"\n maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n l_auser=\"root\"\n l_agroup=\"(root|gdm|gdm3)\"\n file_test_fix \n ;;\n *.journal | *.journal~)\n perm_mask='0137'\n maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n l_rperms=\"u-x,g-wx,o-rwx\"\n l_auser=\"root\"\n l_agroup=\"(root|systemd-journal)\" \n file_test_fix\n ;;\n *)\n perm_mask='0137'\n maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n l_rperms=\"u-x,g-wx,o-rwx\"\n l_auser=\"(root|syslog)\"\n l_agroup=\"(root|adm)\"\n if [ \"$l_uid\" -lt \"$l_uidmin\" ] && [ -z \"$(awk -v grp=\"$l_group\" -F: '$1==grp {print $4}' /etc/group)\" ]; then\n if [[ ! \"$l_user\" =~ $l_auser ]]; then\n l_auser=\"(root|syslog|$l_user)\"\n fi\n if [[ ! \"$l_group\" =~ $l_agroup ]]; then\n l_tst=\"\"\n while l_out3=\"\" read -r l_duid; do\n [ \"$l_duid\" -ge \"$l_uidmin\" ] && l_tst=failed\n done <<< \"$(awk -F: '$4=='\"$l_gid\"' {print $3}' /etc/passwd)\"\n [ \"$l_tst\" != \"failed\" ] && l_agroup=\"(root|adm|$l_group)\"\n fi\n fi\n file_test_fix\n ;;\n esac\n done <<< \"$(printf '%s\\n' \"${a_file[@]}\")\"\n unset a_file # Clear array\n # If all files passed, then we report no changes\n if [ -z \"$l_output2\" ]; then\n echo -e \"- All files in \\\"/var/log/\\\" have appropriate permissions and ownership\\n - No changes required\\n\"\n else\n # print report of changes\n echo -e \"\\n$l_output2\"\n fi\n}\n```\n\n**Note:** You may also need to change the configuration for your logging software or services for any logs that had incorrect permissions.\n\nIf there are services that log to other locations, ensure that those log files have the appropriate access configured."
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.2.4.1_assessment-method",
                        "prose": "Run the following script to verify that files in `/var/log/` have appropriate permissions and ownership:\n- `/var/log/` files: `(lastlog|lastlog.*|wtmp|wtmp.*|wtmp-*|btmp|btmp.*|btmp-*)` user and group ownership is `root` and permissions are set to `0664` or more restrictive.\n- `/var/log` files: `(secure|auth.log|syslog|messages|*.journal|.*journal~| * other files)` user ownership `(root|syslog)`, group ownership `(root|adm)`, and permissions are set to `0640` or more restrictive.\n- `/var/log` files: `(gdm|gdm3|SSSD)` user ownership is `(root|SSSD)`, group ownership is `(root|SSSD|gdm|gdm3)`, and permissions are set to `660` or more restrictive.\n```\n#!/usr/bin/env bash\n\n{\n l_op2=\"\" l_output2=\"\"\n l_uidmin=\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"\n file_test_chk()\n {\n l_op2=\"\"\n if [ $(( $l_mode & $perm_mask )) -gt 0 ]; then\n l_op2=\"$l_op2\\n - Mode: \\\"$l_mode\\\" should be \\\"$maxperm\\\" or more restrictive\"\n fi\n if [[ ! \"$l_user\" =~ $l_auser ]]; then\n l_op2=\"$l_op2\\n - Owned by: \\\"$l_user\\\" and should be owned by \\\"${l_auser//|/ or }\\\"\"\n fi\n if [[ ! \"$l_group\" =~ $l_agroup ]]; then\n l_op2=\"$l_op2\\n - Group owned by: \\\"$l_group\\\" and should be group owned by \\\"${l_agroup//|/ or }\\\"\"\n fi\n [ -n \"$l_op2\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_fname\\\" is:$l_op2\\n\"\n }\n unset a_file && a_file=() # clear and initialize array\n # Loop to create array with stat of files that could possibly fail one of the audits\n while IFS= read -r -d $'\\0' l_file; do\n [ -e \"$l_file\" ] && a_file+=(\"$(stat -Lc '%n^%#a^%U^%u^%G^%g' \"$l_file\")\")\n done < <(find -L /var/log -type f \\( -perm /0137 -o ! -user root -o ! -group root \\) -print0)\n while IFS=\"^\" read -r l_fname l_mode l_user l_uid l_group l_gid; do\n l_bname=\"$(basename \"$l_fname\")\"\n case \"$l_bname\" in\n lastlog | lastlog.* | wtmp | wtmp.* | wtmp-* | btmp | btmp.* | btmp-* | README)\n perm_mask='0113'\n maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n l_auser=\"root\"\n l_agroup=\"(root|utmp)\"\n file_test_chk\n ;;\n secure | auth.log | syslog | messages)\n perm_mask='0137'\n maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n l_auser=\"(root|syslog)\"\n l_agroup=\"(root|adm)\"\n file_test_chk\n ;;\n SSSD | sssd)\n perm_mask='0117'\n maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n l_auser=\"(root|SSSD)\"\n l_agroup=\"(root|SSSD)\"\n file_test_chk \n ;;\n gdm | gdm3)\n perm_mask='0117'\n maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n l_auser=\"root\"\n l_agroup=\"(root|gdm|gdm3)\"\n file_test_chk \n ;;\n *.journal | *.journal~)\n perm_mask='0137'\n maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n l_auser=\"root\"\n l_agroup=\"(root|systemd-journal)\"\n file_test_chk\n ;;\n *)\n perm_mask='0137'\n maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n l_auser=\"(root|syslog)\"\n l_agroup=\"(root|adm)\"\n if [ \"$l_uid\" -lt \"$l_uidmin\" ] && [ -z \"$(awk -v grp=\"$l_group\" -F: '$1==grp {print $4}' /etc/group)\" ]; then\n if [[ ! \"$l_user\" =~ $l_auser ]]; then\n l_auser=\"(root|syslog|$l_user)\"\n fi\n if [[ ! \"$l_group\" =~ $l_agroup ]]; then\n l_tst=\"\"\n while l_out3=\"\" read -r l_duid; do\n [ \"$l_duid\" -ge \"$l_uidmin\" ] && l_tst=failed\n done <<< \"$(awk -F: '$4=='\"$l_gid\"' {print $3}' /etc/passwd)\"\n [ \"$l_tst\" != \"failed\" ] && l_agroup=\"(root|adm|$l_group)\"\n fi\n fi\n file_test_chk\n ;;\n esac\n done <<< \"$(printf '%s\\n' \"${a_file[@]}\")\"\n unset a_file # Clear array\n # If all files passed, then we pass\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Results:\\n ** Pass **\\n- All files in \\\"/var/log/\\\" have appropriate permissions and ownership\\n\"\n else\n # print the reason why we are failing\n echo -e \"\\n- Audit Results:\\n ** Fail **\\n$l_output2\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              }
            ]
          },
          {
            "id": "section-6-3",
            "title": "System Auditing",
            "props": [
              {
                "name": "label",
                "value": "6.3"
              }
            ],
            "controls": [],
            "groups": [
              {
                "id": "section-6-3-1",
                "title": "Configure auditd Service",
                "props": [
                  {
                    "name": "label",
                    "value": "6.3.1"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-6.3.1.1",
                    "title": "Ensure auditd packages are installed",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.1.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.1.1_statement",
                        "prose": "`auditd` is the userspace component to the Linux Auditing System. It's responsible for writing audit records to the disk."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.1.1_assessment-objective",
                        "prose": "Rationale: The capturing of system events provides system administrators with information to allow them to determine if unauthorized access to their system is occurring."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.1.1_guidance",
                        "prose": "Run the following command to install `audit` and `audit-libs`:\n\n```\n# dnf install audit audit-libs\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.1.1_assessment-method",
                        "prose": "Run the following command and verify `audit` and `audit-libs` packages are installed:\n\n``` \n# rpm -q audit audit-libs\n\naudit-<version>\naudit-libs-<version>\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.1.2",
                    "title": "Ensure auditing for processes that start prior to auditd is enabled",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.1.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.1.2_statement",
                        "prose": "Configure `grub2` so that processes that are capable of being audited can be audited even if they start up prior to `auditd` startup."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.1.2_assessment-objective",
                        "prose": "Rationale: Audit events need to be captured on processes that start up prior to `auditd` , so that potential malicious activity cannot go undetected."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.1.2_guidance",
                        "prose": "Run the following command to update the `grub2` configuration with `audit=1`:\n\n```\n# grubby --update-kernel ALL --args 'audit=1'\n```\n\nEdit `/etc/default/grub` and add `audit=1` to the `GRUB_CMDLINE_LINUX=` line between the opening and closing double quotes:\n\n_Example:_\n\n```\nGRUB_CMDLINE_LINUX=\"quiet audit=1\"\n```\n\n**Note:** Other parameters may also be listed"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.1.2_assessment-method",
                        "prose": "**Note:** `/etc/default/grub` should be checked because the `grub2-mkconfig -o` command will overwrite `grub.cfg` with parameters listed in `/etc/default/grub`.\n\nRun the following command to verify that the `audit=1` parameter has been set:\n\n```\n# grubby --info=ALL | grep -Po '\\baudit=1\\b'\n\naudit=1\n```\n\n**Note:** `audit=1` may be returned multiple times\n\nRun the following command to verify that the `audit=1` parameter has been set in `/etc/default/grub`:\n\n```\n# grep -Psoi -- '^\\h*GRUB_CMDLINE_LINUX=\\\"([^#\\n\\r]+\\h+)?audit=1\\b' /etc/default/grub\n```\n\n_Example output:_\n\n```\nGRUB_CMDLINE_LINUX=\"quiet audit=1\"\n```\n\n**Note:** Other parameters may also be listed",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.1.3",
                    "title": "Ensure audit_backlog_limit is sufficient",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.1.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.1.3_statement",
                        "prose": "The `audit_backlog_limit` parameter determines how auditd records can be held in the auditd backlog. The default setting of 64 may be insufficient to store all audit events during boot."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.1.3_assessment-objective",
                        "prose": "Rationale: During boot if `audit=1`, then the backlog will hold 64 records. If more than 64 records are created during boot, auditd records will be lost and potential malicious activity could go undetected."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.1.3_guidance",
                        "prose": "Run the following command to add `audit_backlog_limit=<BACKLOG SIZE>` to GRUB_CMDLINE_LINUX:\n\n```\n# grubby --update-kernel ALL --args 'audit_backlog_limit=<BACKLOG SIZE>'\n```\n\n_Example:_\n```\n# grubby --update-kernel ALL --args 'audit_backlog_limit=8192'\n```\n\nEdit `/etc/default/grub` and add `audit_backlog_limit=<BACKLOG SIZE>` to the `GRUB_CMDLINE_LINUX=` line between the opening and closing double quotes:\n\n_Example:_\n\n```\nGRUB_CMDLINE_LINUX=\"quiet audit_backlog_limit=8192\"\n```\n\n**Note:** Other parameters may also be listed"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.1.3_assessment-method",
                        "prose": "**Note:** `/etc/default/grub` should be checked because the `grub2-mkconfig -o` command will overwrite `grub.cfg` with parameters listed in `/etc/default/grub`.\n\nRun the following command and verify the `audit_backlog_limit=` parameter is set to an appropriate size for your organization\n\n```\n# grubby --info=ALL | grep -Po \"\\baudit_backlog_limit=\\d+\\b\"\n\naudit_backlog_limit=<BACKLOG SIZE>\n```\n\nValidate that the line(s) returned contain a value for `audit_backlog_limit=` that is sufficient for your organization. \n\n**Recommended that this value be `8192` or larger.**\n\nRun the following command to verify that the `audit_backlog_limit=<BACKLOG SIZE>` parameter has been set in `/etc/default/grub`:\n\n```\n# grep -Psoi -- '^\\h*GRUB_CMDLINE_LINUX=\\\"([^#\\n\\r]+\\h+)?\\baudit_backlog_limit=\\d+\\b' /etc/default/grub\n```\n\n_Example output:_\n\n```\nGRUB_CMDLINE_LINUX=\"quiet audit_backlog_limit=8192\"\n```\n\n**Note:** Other parameters may also be listed",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.1.4",
                    "title": "Ensure auditd service is enabled and active",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.1.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.1.4_statement",
                        "prose": "Turn on the `auditd` daemon to record system events."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.1.4_assessment-objective",
                        "prose": "Rationale: The capturing of system events provides system administrators with information to allow them to determine if unauthorized access to their system is occurring."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.1.4_guidance",
                        "prose": "Run the following commands to unmask, enable and start `auditd`:\n\n```\n# systemctl unmask auditd\n# systemctl enable auditd\n# systemctl start auditd\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.1.4_assessment-method",
                        "prose": "Run the following command to verify `auditd` is enabled:\n\n```\n# systemctl is-enabled auditd | grep '^enabled'\n\nenabled\n```\n\nVerify result is \"enabled\".\n\nRun the following command to verify `auditd` is active:\n\n```\n# systemctl is-active auditd | grep '^active'\n\nactive\n```\n\nVerify result is active",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              },
              {
                "id": "section-6-3-2",
                "title": "Configure Data Retention",
                "props": [
                  {
                    "name": "label",
                    "value": "6.3.2"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-6.3.2.1",
                    "title": "Ensure audit log storage size is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.2.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.2.1_statement",
                        "prose": "Configure the maximum size of the audit log file. Once the log reaches the maximum size, it will be rotated and a new log file will be started."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.2.1_assessment-objective",
                        "prose": "Rationale: It is important that an appropriate size is determined for log files so that they do not impact the system and audit data is not lost."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.2.1_guidance",
                        "prose": "Set the following parameter in `/etc/audit/auditd.conf` in accordance with site policy:\n\n```\nmax_log_file = <MB>\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.2.1_assessment-method",
                        "prose": "Run the following command and ensure output is in compliance with site policy:\n\n```\n# grep -Po -- '^\\h*max_log_file\\h*=\\h*\\d+\\b' /etc/audit/auditd.conf\n\nmax_log_file = <MB>\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.2.2",
                    "title": "Ensure audit logs are not automatically deleted",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.2.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.2.2_statement",
                        "prose": "The `max_log_file_action` setting determines how to handle the audit log file reaching the max file size. A value of `keep_logs` will rotate the logs but never delete old logs."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.2.2_assessment-objective",
                        "prose": "Rationale: In high security contexts, the benefits of maintaining a long audit history exceed the cost of storing the audit history."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.2.2_guidance",
                        "prose": "Set the following parameter in `/etc/audit/auditd.conf:` \n\n```\nmax_log_file_action = keep_logs\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.2.2_assessment-method",
                        "prose": "Run the following command and verify output matches:\n\n```\n# grep max_log_file_action /etc/audit/auditd.conf\n\nmax_log_file_action = keep_logs\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.2.3",
                    "title": "Ensure system is disabled when audit logs are full",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.2.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.2.3_statement",
                        "prose": "The `auditd` daemon can be configured to halt the system or put the system in single user mode, if no free space is available or an error is detected on the partition that holds the audit log files.\n\nThe `disk_full_action` parameter tells the system what action to take when no free space is available on the partition that holds the audit log files. Valid values are `ignore`, `syslog`, `rotate`, `exec`, `suspend`, `single`, and `halt`.\n- `ignore`, the audit daemon will issue a syslog message but no other action is taken\n- `syslog`, the audit daemon will issue a warning to syslog\n- `rotate`, the audit daemon will rotate logs, losing the oldest to free up space\n- `exec`, /path-to-script will execute the script. You cannot pass parameters to the script. The script is also responsible for telling the auditd daemon to resume logging once its completed its action\n- `suspend`, the audit daemon will stop writing records to the disk\n- `single`, the audit daemon will put the computer system in single user mode\n- `halt`, the audit daemon will shut down the system\n\nThe `disk_error_action` parameter tells the system what action to take when an error is detected on the partition that holds the audit log files. Valid values are `ignore`, `syslog`, `exec`, `suspend`, `single`, and `halt`.\n- `ignore`, the audit daemon will not take any action\n- `syslog`, the audit daemon will issue no more than 5 consecutive warnings to syslog\n- `exec`, /path-to-script will execute the script. You cannot pass parameters to the script\n- `suspend`, the audit daemon will stop writing records to the disk\n- `single`, the audit daemon will put the computer system in single user mode\n- `halt`, the audit daemon will shut down the system"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.2.3_assessment-objective",
                        "prose": "Rationale: In high security contexts, the risk of detecting unauthorized access or nonrepudiation exceeds the benefit of the system's availability.\nImpact: `disk_full_action` parameter:\n- Set to `halt` - the `auditd` daemon will shutdown the system when the disk partition containing the audit logs becomes full.\n- Set to `single` - the `auditd` daemon will put the computer system in single user mode when the disk partition containing the audit logs becomes full.\n\n`disk_error_action` parameter:\n- Set to `halt` - the `auditd` daemon will shutdown the system when an error is detected on the partition that holds the audit log files.\n- Set to `single` - the `auditd` daemon will put the computer system in single user mode when an error is detected on the partition that holds the audit log files.\n- Set to `syslog` - the `auditd` daemon will issue no more than 5 consecutive warnings to syslog when an error is detected on the partition that holds the audit log files."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.2.3_guidance",
                        "prose": "Set one of the following parameters in `/etc/audit/auditd.conf` depending on your local security policies. \n\n```\ndisk_full_action = <halt|single>\ndisk_error_action = <syslog|single|halt>\n```\n\n_Example:_\n\n```\ndisk_full_action = halt\ndisk_error_action = halt\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.2.3_assessment-method",
                        "prose": "Run the following command and verify the `disk_full_action` is set to either `halt` or `single`:\n\n```\n# grep -P -- '^\\h*disk_full_action\\h*=\\h*(halt|single)\\b' /etc/audit/auditd.conf\n\ndisk_full_action = <halt|single>\n```\n\nRun the following command and verify the `disk_error_action` is set to `syslog`, `single`, or `halt`:\n\n```\n# grep -P -- '^\\h*disk_error_action\\h*=\\h*(syslog|single|halt)\\b' /etc/audit/auditd.conf\n\ndisk_error_action = <syslog|single|halt>\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.2.4",
                    "title": "Ensure system warns when audit logs are low on space",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.2.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.2.4_statement",
                        "prose": "The `auditd` daemon can be configured to halt the system, put the system in single user mode or send a warning message, if the partition that holds the audit log files is low on space.\n\nThe `space_left_action` parameter tells the system what action to take when the system has detected that it is starting to get low on disk space. Valid values are `ignore`, `syslog`, `rotate`, `email`, `exec`, `suspend`, `single`, and `halt`.\n- `ignore`, the audit daemon does nothing\n- `syslog`, the audit daemon will issue a warning to syslog\n- `rotate`, the audit daemon will rotate logs, losing the oldest to free up space\n- `email`, the audit daemon will send a warning to the email account specified in `action_mail_acct` as well as sending the message to syslog\n- `exec`, /path-to-script will execute the script. You cannot pass parameters to the script. The script is also responsible for telling the auditd daemon to resume logging once its completed its action\n- `suspend`, the audit daemon will stop writing records to the disk\n- `single`, the audit daemon will put the computer system in single user mode\n- `halt`, the audit daemon will shut down the system\n\nThe `admin_space_left_action` parameter tells the system what action to take when the system has detected that it is low on disk space. Valid values are `ignore`, `syslog`, `rotate`, `email`, `exec`, `suspend`, `single`, and `halt`.\n- `ignore`, the audit daemon does nothing\n- `syslog`, the audit daemon will issue a warning to syslog\n- `rotate`, the audit daemon will rotate logs, losing the oldest to free up space\n- `email`, the audit daemon will send a warning to the email account specified in `action_mail_acct` as well as sending the message to syslog\n- `exec`, /path-to-script will execute the script. You cannot pass parameters to the script. The script is also responsible for telling the auditd daemon to resume logging once its completed its action\n- `suspend`, the audit daemon will stop writing records to the disk\n- `single`, the audit daemon will put the computer system in single user mode\n- `halt`, the audit daemon will shut down the system"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.2.4_assessment-objective",
                        "prose": "Rationale: In high security contexts, the risk of detecting unauthorized access or nonrepudiation exceeds the benefit of the system's availability.\nImpact: If the `admin_space_left_action` is set to `single` the audit daemon will put the computer system in single user mode."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.2.4_guidance",
                        "prose": "Set the `space_left_action` parameter in `/etc/audit/auditd.conf` to `email`, `exec`, `single`, or `halt`:\n\n_Example:_\n\n```\nspace_left_action = email\n```\n\nSet the `admin_space_left_action` parameter in `/etc/audit/auditd.conf` to `single` or `halt`:\n\n_Example:_\n\n```\nadmin_space_left_action = single\n```\n\n**Note:** A Mail Transfer Agent (MTA) must be installed and configured properly to set `space_left_action = email`"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.2.4_assessment-method",
                        "prose": "Run the following command and verify the `space_left_action` is set to `email`, `exec`, `single`, or `halt`:\n\n```\ngrep -P -- '^\\h*space_left_action\\h*=\\h*(email|exec|single|halt)\\b' /etc/audit/auditd.conf\n```\n\nVerify the output is `email`, `exec`, `single`, or `halt`\n\n_Example output_\n\n```\nspace_left_action = email\n```\n\nRun the following command and verify the `admin_space_left_action` is set to `single` **- OR -** `halt`:\n\n```\ngrep -P -- '^\\h*admin_space_left_action\\h*=\\h*(single|halt)\\b' /etc/audit/auditd.conf\n```\n\nVerify the output is `single` or `halt`\n\n_Example output:_\n\n```\nadmin_space_left_action = single\n```\n\n**Note:** A Mail Transfer Agent (MTA) must be installed and configured properly to set `space_left_action = email`",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              },
              {
                "id": "section-6-3-3",
                "title": "Configure auditd Rules",
                "props": [
                  {
                    "name": "label",
                    "value": "6.3.3"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-6.3.3.1",
                    "title": "Ensure changes to system administration scope (sudoers) is collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.1_statement",
                        "prose": "Monitor scope changes for system administrators. If the system has been properly configured to force system administrators to log in as themselves first and then use the `sudo` command to execute privileged commands, it is possible to monitor changes in scope. The file `/etc/sudoers`, or files in `/etc/sudoers.d`, will be written to when the file(s) or related attributes have changed. The audit records will be tagged with the identifier \"scope\"."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.1_assessment-objective",
                        "prose": "Rationale: Changes in the `/etc/sudoers` and `/etc/sudoers.d` files can indicate that an unauthorized change has been made to the scope of system administrator activity."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.1_guidance",
                        "prose": "Edit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor scope changes for system administrators.\n\n_Example:_\n\n```\n# printf '%s\\n' \"-w /etc/sudoers -p wa -k scope\" \"-w /etc/sudoers.d -p wa -k scope\" >> /etc/audit/rules.d/50-scope.rules\n```\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.1_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# awk '/^ *-w/ \\\n&&/\\/etc\\/sudoers/ \\\n&&/ +-p *wa/ \\\n&&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules\n```\n\nVerify the output matches:\n\n```\n-w /etc/sudoers -p wa -k scope\n-w /etc/sudoers.d -p wa -k scope\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# auditctl -l | awk '/^ *-w/ \\\n&&/\\/etc\\/sudoers/ \\\n&&/ +-p *wa/ \\\n&&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)'\n```\n\nVerify the output matches:\n\n```\n-w /etc/sudoers -p wa -k scope\n-w /etc/sudoers.d -p wa -k scope\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.2",
                    "title": "Ensure actions as another user are always logged",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.2_statement",
                        "prose": "`sudo` provides users with temporary elevated privileges to perform operations, either as the superuser or another user."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.2_assessment-objective",
                        "prose": "Rationale: Creating an audit log of users with temporary elevated privileges and the operation(s) they performed is essential to reporting. Administrators will want to correlate the events written to the audit trail with the records written to `sudo`'s logfile to verify if unauthorized commands have been executed."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.2_guidance",
                        "prose": "**Create audit rules**\n\nEdit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor elevated privileges.\n\n_Example:_\n\n```\n# printf \"\n-a always,exit -F arch=b64 -C euid!=uid -F auid!=unset -S execve -k user_emulation \n-a always,exit -F arch=b32 -C euid!=uid -F auid!=unset -S execve -k user_emulation\n\" >> /etc/audit/rules.d/50-user_emulation.rules\n```\n\n**Load audit rules**\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.2_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# awk '/^ *-a *always,exit/ \\\n&&/ -F *arch=b(32|64)/ \\\n&&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n&&(/ -C *euid!=uid/||/ -C *uid!=euid/) \\\n&&/ -S *execve/ \\\n&&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules\n```\n\nVerify the output matches:\n\n```\n-a always,exit -F arch=b64 -C euid!=uid -F auid!=unset -S execve -k user_emulation \n-a always,exit -F arch=b32 -C euid!=uid -F auid!=unset -S execve -k user_emulation\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# auditctl -l | awk '/^ *-a *always,exit/ \\\n&&/ -F *arch=b(32|64)/ \\\n&&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n&&(/ -C *euid!=uid/||/ -C *uid!=euid/) \\\n&&/ -S *execve/ \\\n&&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)'\n```\n\nVerify the output matches:\n\n```\n-a always,exit -F arch=b64 -S execve -C uid!=euid -F auid!=-1 -F key=user_emulation\n-a always,exit -F arch=b32 -S execve -C uid!=euid -F auid!=-1 -F key=user_emulation\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.3",
                    "title": "Ensure events that modify the sudo log file are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.3_statement",
                        "prose": "Monitor the `sudo` log file. If the system has been properly configured to disable the use of the `su` command and force all administrators to have to log in first and then use `sudo` to execute privileged commands, then all administrator commands will be logged to `/var/log/sudo.log` . Any time a command is executed, an audit event will be triggered as the `/var/log/sudo.log` file will be opened for write and the executed administration command will be written to the log."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.3_assessment-objective",
                        "prose": "Rationale: Changes in `/var/log/sudo.log` indicate that an administrator has executed a command or the log file itself has been tampered with. Administrators will want to correlate the events written to the audit trail with the records written to `/var/log/sudo.log` to verify if unauthorized commands have been executed."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.3_guidance",
                        "prose": "**Note:** This recommendation requires that the sudo logfile is configured. See guidance provided in the recommendation \"Ensure sudo log file exists\"\n\nEdit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor events that modify the sudo log file.\n\n_Example:_\n\n```\n# {\nSUDO_LOG_FILE=$(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,? .*//' -e 's/\"//g')\n[ -n \"${SUDO_LOG_FILE}\" ] && printf \"\n-w ${SUDO_LOG_FILE} -p wa -k sudo_log_file\n\" >> /etc/audit/rules.d/50-sudo.rules || printf \"ERROR: Variable 'SUDO_LOG_FILE' is unset.\\n\"\n}\n```\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.3_assessment-method",
                        "prose": "**Note:** This recommendation requires that the sudo logfile is configured. See guidance provided in the recommendation \"Ensure sudo log file exists\"\n\n**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# {\n SUDO_LOG_FILE=$(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,? .*//' -e 's/\"//g' -e 's|/|\\\\/|g')\n [ -n \"${SUDO_LOG_FILE}\" ] && awk \"/^ *-w/ \\\n &&/\"${SUDO_LOG_FILE}\"/ \\\n &&/ +-p *wa/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\\n || printf \"ERROR: Variable 'SUDO_LOG_FILE' is unset.\\n\"\n}\n```\n\nVerify output of matches:\n\n```\n-w /var/log/sudo.log -p wa -k sudo_log_file\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# {\n SUDO_LOG_FILE=$(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,? .*//' -e 's/\"//g' -e 's|/|\\\\/|g')\n [ -n \"${SUDO_LOG_FILE}\" ] && auditctl -l | awk \"/^ *-w/ \\\n &&/\"${SUDO_LOG_FILE}\"/ \\\n &&/ +-p *wa/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\\n || printf \"ERROR: Variable 'SUDO_LOG_FILE' is unset.\\n\"\n}\n```\n\nVerify output matches:\n\n```\n-w /var/log/sudo.log -p wa -k sudo_log_file\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.4",
                    "title": "Ensure events that modify date and time information are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.4_statement",
                        "prose": "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the;\n- `adjtimex` - tune kernel clock\n- `settimeofday` - set time using `timeval` and `timezone` structures\n- `stime` - using seconds since 1/1/1970\n- `clock_settime` - allows for the setting of several internal clocks and timers\n\nsystem calls have been executed. Further, ensure to write an audit record to the configured audit log file upon exit, tagging the records with a unique identifier such as \"time-change\"."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.4_assessment-objective",
                        "prose": "Rationale: Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.4_guidance",
                        "prose": "**Create audit rules**\n\nEdit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor events that modify date and time information.\n\nExample:\n\n```\n# printf \"\n-a always,exit -F arch=b64 -S adjtimex,settimeofday -k time-change\n-a always,exit -F arch=b32 -S adjtimex,settimeofday -k time-change\n-a always,exit -F arch=b64 -S clock_settime -F a0=0x0 -k time-change\n-a always,exit -F arch=b32 -S clock_settime -F a0=0x0 -k time-change\n-w /etc/localtime -p wa -k time-change\n\" >> /etc/audit/rules.d/50-time-change.rules\n```\n\n**Load audit rules**\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.4_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# {\n awk '/^ *-a *always,exit/ \\\n &&/ -F *arch=b(32|64)/ \\\n &&/ -S/ \\\n &&(/adjtimex/ \\\n ||/settimeofday/ \\\n ||/clock_settime/ ) \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules\n\n awk '/^ *-w/ \\\n &&/\\/etc\\/localtime/ \\\n &&/ +-p *wa/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules\n}\n```\n\nVerify output of matches:\n\n```\n-a always,exit -F arch=b64 -S adjtimex,settimeofday -k time-change\n-a always,exit -F arch=b32 -S adjtimex,settimeofday -k time-change\n-a always,exit -F arch=b64 -S clock_settime -F a0=0x0 -k time-change\n-a always,exit -F arch=b32 -S clock_settime -F a0=0x0 -k time-change\n-w /etc/localtime -p wa -k time-change\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# {\n auditctl -l | awk '/^ *-a *always,exit/ \\\n &&/ -F *arch=b(32|64)/ \\\n &&/ -S/ \\\n &&(/adjtimex/ \\\n ||/settimeofday/ \\\n ||/clock_settime/ ) \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)'\n\n auditctl -l | awk '/^ *-w/ \\\n &&/\\/etc\\/localtime/ \\\n &&/ +-p *wa/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)'\n}\n```\n\nVerify the output includes:\n\n```\n-a always,exit -F arch=b64 -S adjtimex,settimeofday -F key=time-change\n-a always,exit -F arch=b32 -S settimeofday,adjtimex -F key=time-change\n-a always,exit -F arch=b64 -S clock_settime -F a0=0x0 -F key=time-change\n-a always,exit -F arch=b32 -S clock_settime -F a0=0x0 -F key=time-change\n-w /etc/localtime -p wa -k time-change\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.5",
                    "title": "Ensure events that modify the system's network environment are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.5"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.5_statement",
                        "prose": "Record changes to network environment files or system calls. The below parameters monitors the following system calls, and write an audit event on system call exit:\n- `sethostname` - set the systems host name\n- `setdomainname` - set the systems domain name\n\nThe files being monitored are:\n- `/etc/issue` and `/etc/issue.net` - messages displayed pre-login\n- `/etc/hosts` - file containing host names and associated IP addresses\n- `/etc/hostname` - file contains the system's host name\n- `/etc/sysconfig/network` - additional information that is valid to all network interfaces\n- `/etc/sysconfig/network-scripts/` - directory containing network interface scripts and configurations files\n- `/etc/NetworkManager/` - directory contains configuration files and settings used by the `NetworkManager`"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.5_assessment-objective",
                        "prose": "Rationale: Monitoring `sethostname` and `setdomainname` will identify potential unauthorized changes to host and domain name of a system. The changing of these names could potentially break security parameters that are set based on those names. The `/etc/hosts` file is monitored for changes that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring `/etc/issue` and `/etc/issue.net` is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring `/etc/sysconfig/network` is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records should have a relevant tag associated with them."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.5_guidance",
                        "prose": "**Create audit rules**\n\nEdit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor events that modify the system's network environment.\n\nExample:\n\n```\n# printf \"\n-a always,exit -F arch=b64 -S sethostname,setdomainname -k system-locale\n-a always,exit -F arch=b32 -S sethostname,setdomainname -k system-locale\n-w /etc/issue -p wa -k system-locale\n-w /etc/issue.net -p wa -k system-locale\n-w /etc/hosts -p wa -k system-locale\n-w /etc/hostname -p wa -k system-locale\n-w /etc/sysconfig/network -p wa -k system-locale\n-w /etc/sysconfig/network-scripts/ -p wa -k system-locale\n-w /etc/NetworkManager -p wa -k system-locale\n\" >> /etc/audit/rules.d/50-system_locale.rules\n```\n\n**Load audit rules**\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.5_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following commands to check the on disk rules:\n\n```\n# {\n# Check for syscalls related to hostname and domainname change\nawk '/^*-a *always, exit/ \\\n&& /-F *arch=b(32|64)/ \\\n&& /-S/ && (/sethostname/ \\\n|| /setdomainname/) \\\n&& (/skey= *[!-~]* *$/ || /-k *[!-~]* *$/)' /etc/audit/rules.d/*.rules\n\n# Check for file watches on network-related files\nawk '/^ *-w/ \\\n&& (/etc\\/issue/ \\\n|| /etc\\/issue.net/ \\\n|| /etc\\/hosts/ \\\n|| /etc\\/sysconfig\\/network/ \\\n|| /etc\\/hostname/ \\\n|| /etc\\/NetworkManager/) \\\n&& / +-p *wa/ \\\n&& (/ key= *[!-~]* *$/ || /-k *[!-~]* *$/)' /etc/audit/rules.d/*.rules\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -F arch=b64 -S sethostname,setdomainname -k system-locale\n-a always,exit -F arch=b32 -S sethostname,setdomainname -k system-locale\n-w /etc/issue -p wa -k system-locale\n-w /etc/issue.net -p wa -k system-locale\n-w /etc/hosts -p wa -k system-locale\n-w /etc/hostname -p wa -k system-locale\n-w /etc/sysconfig/network -p wa -k system-locale\n-w /etc/sysconfig/network-scripts/ -p wa -k system-locale\n-w /etc/NetworkManager -p wa -k system-locale\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# {\n auditctl -l | awk '/^ *-a *always,exit/ \\\n &&/ -F *arch=b(32|64)/ \\\n &&/ -S/ \\\n &&(/sethostname/ \\\n ||/setdomainname/) \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)'\n\n auditctl -l | awk '/^ *-w/ \\\n &&(/etc\\/issue/ \\\n || /etc\\/issue.net/ \\\n || /etc\\/hosts/ \\\n || /etc\\/sysconfig\\/network/ \\\n || /etc\\/hostname/ \\\n || /etc\\/NetworkManager/) \\\n &&/ +-p *wa/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)'\n}\n```\n\nVerify the output includes:\n\n```\n-a always,exit -F arch=b64 -S sethostname,setdomainname -F key=system-locale\n-a always,exit -F arch=b32 -S sethostname,setdomainname -F key=system-locale\n-w /etc/issue -p wa -k system-locale\n-w /etc/issue.net -p wa -k system-locale\n-w /etc/hosts -p wa -k system-locale\n-w /etc/hostname -p wa -k system-locale\n-w /etc/sysconfig/network -p wa -k system-locale\n-w /etc/sysconfig/network-scripts -p wa -k system-locale\n-w /etc/NetworkManager -p wa -k system-locale\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.6",
                    "title": "Ensure use of privileged commands are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.6"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.6_statement",
                        "prose": "Monitor privileged programs, those that have the `setuid` and/or `setgid` bit set on execution, to determine if unprivileged users are running these commands."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.6_assessment-objective",
                        "prose": "Rationale: Execution of privileged commands by non-privileged users could be an indication of someone trying to gain unauthorized access to the system.\nImpact: Both the audit and remediation section of this recommendation will traverse all mounted file systems that is not mounted with either `noexec` or `nosuid` mount options. If there are large file systems without these mount options, **such traversal will be significantly detrimental to the performance of the system.**\n\nBefore running either the audit or remediation section, inspect the output of the following command to determine exactly which file systems will be traversed:\n\n```\n# findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | grep -Pv \"noexec|nosuid\"\n```\n\nTo exclude a particular file system due to adverse performance impacts, update the audit and remediation sections by adding a sufficiently unique string to the `grep` statement. The above command can be used to test the modified exclusions."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.6_guidance",
                        "prose": "Edit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor the use of privileged commands.\n\n_Example script:_\n\n```\n#!/usr/bin/env bash\n\n{\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n AUDIT_RULE_FILE=\"/etc/audit/rules.d/50-privileged.rules\"\n NEW_DATA=()\n for PARTITION in $(findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | grep -Pv \"noexec|nosuid\" | awk '{print $1}'); do\n readarray -t DATA < <(find \"${PARTITION}\" -xdev -perm /6000 -type f | awk -v UID_MIN=${UID_MIN} '{print \"-a always,exit -F path=\" $1 \" -F perm=x -F auid>=\"UID_MIN\" -F auid!=unset -k privileged\" }')\n for ENTRY in \"${DATA[@]}\"; do\n NEW_DATA+=(\"${ENTRY}\")\n done\n done\n readarray &> /dev/null -t OLD_DATA < \"${AUDIT_RULE_FILE}\"\n COMBINED_DATA=( \"${OLD_DATA[@]}\" \"${NEW_DATA[@]}\" )\n printf '%s\\n' \"${COMBINED_DATA[@]}\" | sort -u > \"${AUDIT_RULE_FILE}\"\n}\n```\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```\n\n**Special mount points**\n\nIf there are any special mount points that are not visible by default from just scanning `/`, change the `PARTITION` variable to the appropriate partition and re-run the remediation."
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.6_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following script to check on disk rules:\n\n```\n#!/usr/bin/env bash\n\n{\n for PARTITION in $(findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | grep -Pv \"noexec|nosuid\" | awk '{print $1}'); do\n for PRIVILEGED in $(find \"${PARTITION}\" -xdev -perm /6000 -type f); do\n grep -qr \"${PRIVILEGED}\" /etc/audit/rules.d && printf \"OK: '${PRIVILEGED}' found in auditing rules.\\n\" || printf \"Warning: '${PRIVILEGED}' not found in on disk configuration.\\n\"\n done\n done\n}\n```\n\nVerify that all output is `OK`.\n\n**Running configuration**\n\nRun the following script to check loaded rules:\n\n```\n#!/usr/bin/env bash\n\n{\n RUNNING=$(auditctl -l)\n [ -n \"${RUNNING}\" ] && for PARTITION in $(findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | grep -Pv \"noexec|nosuid\" | awk '{print $1}'); do\n for PRIVILEGED in $(find \"${PARTITION}\" -xdev -perm /6000 -type f); do\n printf -- \"${RUNNING}\" | grep -q \"${PRIVILEGED}\" && printf \"OK: '${PRIVILEGED}' found in auditing rules.\\n\" || printf \"Warning: '${PRIVILEGED}' not found in running configuration.\\n\"\n done\n done \\\n || printf \"ERROR: Variable 'RUNNING' is unset.\\n\"\n}\n```\n\nVerify that all output is `OK`.\n\n**Special mount points**\n\nIf there are any special mount points that are not visible by default from `findmnt` as per the above audit, said file systems would have to be manually audited.",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.7",
                    "title": "Ensure unsuccessful file access attempts are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.7"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.7_statement",
                        "prose": "Monitor for unsuccessful attempts to access files. The following parameters are associated with system calls that control files:\n- creation - `creat`\n- opening - `open` , `openat`\n- truncation - `truncate` , `ftruncate`\n\nAn audit log record will only be written if all of the following criteria is met for the user when trying to access a file:\n- a non-privileged user (auid>=UID_MIN)\n- is not a Daemon event (auid=4294967295/unset/-1)\n- if the system call returned EACCES (permission denied) or EPERM (some other permanent error associated with the specific system call)"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.7_assessment-objective",
                        "prose": "Rationale: Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.7_guidance",
                        "prose": "**Create audit rules**\n\nEdit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor unsuccessful file access attempts.\n\n_Example:_\n\n```\n# {\nUID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n[ -n \"${UID_MIN}\" ] && printf \"\n-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-EACCES -F auid>=${UID_MIN} -F auid!=unset -k access\n-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-EPERM -F auid>=${UID_MIN} -F auid!=unset -k access\n-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-EACCES -F auid>=${UID_MIN} -F auid!=unset -k access\n-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-EPERM -F auid>=${UID_MIN} -F auid!=unset -k access\n\" >> /etc/audit/rules.d/50-access.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\n**Load audit rules**\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.7_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\\n &&/ -F *arch=b(32|64)/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&(/ -F *exit=-EACCES/||/ -F *exit=-EPERM/) \\\n &&/ -S/ \\\n &&/creat/ \\\n &&/open/ \\\n &&/truncate/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output includes:\n\n```\n-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -k access\n-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -k access\n-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -k access\n-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -k access\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\\n &&/ -F *arch=b(32|64)/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&(/ -F *exit=-EACCES/||/ -F *exit=-EPERM/) \\\n &&/ -S/ \\\n &&/creat/ \\\n &&/open/ \\\n &&/truncate/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output includes:\n\n```\n-a always,exit -F arch=b64 -S open,truncate,ftruncate,creat,openat -F exit=-EACCES -F auid>=1000 -F auid!=-1 -F key=access\n-a always,exit -F arch=b64 -S open,truncate,ftruncate,creat,openat -F exit=-EPERM -F auid>=1000 -F auid!=-1 -F key=access\n-a always,exit -F arch=b32 -S open,truncate,ftruncate,creat,openat -F exit=-EACCES -F auid>=1000 -F auid!=-1 -F key=access\n-a always,exit -F arch=b32 -S open,truncate,ftruncate,creat,openat -F exit=-EPERM -F auid>=1000 -F auid!=-1 -F key=access\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.8",
                    "title": "Ensure events that modify user/group information are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.8"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.8_statement",
                        "prose": "Record events affecting the modification of user or group information, including that of passwords and old passwords if in use.\n- `/etc/group` - system groups\n- `/etc/passwd` - system users\n- `/etc/gshadow` - encrypted password for each group\n- `/etc/shadow` - system user passwords\n- `/etc/security/opasswd` - storage of old passwords if the relevant PAM module is in use\n- `/etc/nsswitch.conf` - file configures how the system uses various databases and name resolution mechanisms\n- `/etc/pam.conf` - file determines the authentication services to be used, and the order in which the services are used.\n- `/etc/pam.d` - directory contains the PAM configuration files for each PAM-aware application.\n\nThe parameters in this section will watch the files to see if they have been opened for write or have had attribute changes (e.g. permissions) and tag them with the identifier \"identity\" in the audit log file."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.8_assessment-objective",
                        "prose": "Rationale: Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.8_guidance",
                        "prose": "Edit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor events that modify user/group information.\n\n_Example:_\n\n```\n# printf \"\n-w /etc/group -p wa -k identity\n-w /etc/passwd -p wa -k identity\n-w /etc/gshadow -p wa -k identity\n-w /etc/shadow -p wa -k identity\n-w /etc/security/opasswd -p wa -k identity\n-w /etc/nsswitch.conf -p wa -k identity\n-w /etc/pam.conf -p wa -k identity\n-w /etc/pam.d -p wa -k identity\n\" >> /etc/audit/rules.d/50-identity.rules\n```\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.8_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# awk '/^ *-w/ \\\n&&(/\\/etc\\/group/ \\\n ||/\\/etc\\/passwd/ \\\n ||/\\/etc\\/gshadow/ \\\n ||/\\/etc\\/shadow/ \\\n ||/\\/etc\\/security\\/opasswd/ \\\n ||/\\/etc\\/nsswitch.conf/ \\\n ||/\\/etc\\/pam.conf/ \\\n ||/\\/etc\\/pam.d/) \\\n&&/ +-p *wa/ \\\n&&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules\n```\n\nVerify the output matches:\n\n```\n-w /etc/group -p wa -k identity\n-w /etc/passwd -p wa -k identity\n-w /etc/gshadow -p wa -k identity\n-w /etc/shadow -p wa -k identity\n-w /etc/security/opasswd -p wa -k identity\n-w /etc/nsswitch.conf -p wa -k identity\n-w /etc/pam.conf -p wa -k identity\n-w /etc/pam.d -p wa -k identity\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# auditctl -l | awk '/^ *-w/ \\\n&&(/\\/etc\\/group/ \\\n ||/\\/etc\\/passwd/ \\\n ||/\\/etc\\/gshadow/ \\\n ||/\\/etc\\/shadow/ \\\n ||/\\/etc\\/security\\/opasswd/ \\\n ||/\\/etc\\/nsswitch.conf/ \\\n ||/\\/etc\\/pam.conf/ \\\n ||/\\/etc\\/pam.d/) \\\n&&/ +-p *wa/ \\\n&&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)'\n```\n\nVerify the output matches:\n\n```\n-w /etc/group -p wa -k identity\n-w /etc/passwd -p wa -k identity\n-w /etc/gshadow -p wa -k identity\n-w /etc/shadow -p wa -k identity\n-w /etc/security/opasswd -p wa -k identity\n-w /etc/nsswitch.conf -p wa -k identity\n-w /etc/pam.conf -p wa -k identity\n-w /etc/pam.d -p wa -k identity\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.9",
                    "title": "Ensure discretionary access control permission modification events are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.9"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.9_statement",
                        "prose": "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The following commands and system calls effect the permissions, ownership and various attributes of files.\n- `chmod`\n- `fchmod`\n- `fchmodat`\n- `chown`\n- `fchown`\n- `fchownat`\n- `lchown`\n- `setxattr`\n- `lsetxattr`\n- `fsetxattr`\n- `removexattr`\n- `lremovexattr`\n- `fremovexattr`\n\nIn all cases, an audit record will only be written for non-system user ids and will ignore Daemon events. All audit records will be tagged with the identifier \"perm_mod.\""
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.9_assessment-objective",
                        "prose": "Rationale: Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.9_guidance",
                        "prose": "**Create audit rules**\n\nEdit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor discretionary access control permission modification events.\n\n_Example:_\n\n```\n# {\nUID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n[ -n \"${UID_MIN}\" ] && printf \"\n-a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod\n-a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod\n-a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod\n-a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod\n-a always,exit -F arch=b64 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod\n-a always,exit -F arch=b32 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod\n\" >> /etc/audit/rules.d/50-perm_mod.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\n**Load audit rules**\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.9_assessment-method",
                        "prose": "**Note:** Output showing all audited syscalls, e.g. (-a always,exit -F arch=b64 -S chmod,fchmod,fchmodat,chmod,fchmod,fchmodat,setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=1000 -F auid!=unset -F key=perm_mod) is also acceptable. These have been separated by function on the displayed output for clarity.\n\n**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\\n &&/ -F *arch=b(32|64)/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -S/ \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&(/chmod/||/fchmod/||/fchmodat/ \\\n ||/chown/||/fchown/||/fchownat/||/lchown/ \\\n ||/setxattr/||/lsetxattr/||/fsetxattr/ \\\n ||/removexattr/||/lremovexattr/||/fremovexattr/) \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n```\n-a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=unset -F key=perm_mod\n-a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=1000 -F auid!=unset -F key=perm_mod\n-a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=unset -F key=perm_mod\n-a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=1000 -F auid!=unset -F key=perm_mod\n-a always,exit -F arch=b64 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=1000 -F auid!=unset -F key=perm_mod\n-a always,exit -F arch=b32 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=1000 -F auid!=unset -F key=perm_mod\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\\n &&/ -F *arch=b(32|64)/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -S/ \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&(/chmod/||/fchmod/||/fchmodat/ \\\n ||/chown/||/fchown/||/fchownat/||/lchown/ \\\n ||/setxattr/||/lsetxattr/||/fsetxattr/ \\\n ||/removexattr/||/lremovexattr/||/fremovexattr/) \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=-1 -F key=perm_mod\n-a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=1000 -F auid!=-1 -F key=perm_mod\n-a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=-1 -F key=perm_mod\n-a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=1000 -F auid!=-1 -F key=perm_mod\n-a always,exit -F arch=b64 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=1000 -F auid!=-1 -F key=perm_mod\n-a always,exit -F arch=b32 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=1000 -F auid!=-1 -F key=perm_mod\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.10",
                    "title": "Ensure successful file system mounts are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.10"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.10_statement",
                        "prose": "Monitor the use of the `mount` system call. The `mount` (and `umount` ) system call controls the mounting and unmounting of file systems. The parameters below configure the system to create an audit record when the mount system call is used by a non-privileged user"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.10_assessment-objective",
                        "prose": "Rationale: It is highly unusual for a non privileged user to `mount` file systems to the system. While tracking `mount` commands gives the system administrator evidence that external media may have been mounted (based on a review of the source of the mount and confirming it's an external media type), it does not conclusively indicate that data was exported to the media. System administrators who wish to determine if data were exported, would also have to track successful `open`, `creat` and `truncate` system calls requiring write access to a file under the mount point of the external media file system. This could give a fair indication that a write occurred. The only way to truly prove it, would be to track successful writes to the external media. Tracking write system calls could quickly fill up the audit log and is not recommended. Recommendations on configuration options to track data export to media is beyond the scope of this document."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.10_guidance",
                        "prose": "**Create audit rules**\n\nEdit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor successful file system mounts.\n\n_Example:_\n\n```\n# {\nUID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n[ -n \"${UID_MIN}\" ] && printf \"\n-a always,exit -F arch=b32 -S mount -F auid>=$UID_MIN -F auid!=unset -k mounts\n-a always,exit -F arch=b64 -S mount -F auid>=$UID_MIN -F auid!=unset -k mounts\n\" >> /etc/audit/rules.d/50-mounts.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\n**Load audit rules**\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.10_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\\n &&/ -F *arch=b(32|64)/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -S/ \\\n &&/mount/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=unset -k mounts\n-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=unset -k mounts\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\\n &&/ -F *arch=b(32|64)/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -S/ \\\n &&/mount/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=-1 -F key=mounts\n-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=-1 -F key=mounts\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.11",
                    "title": "Ensure session initiation information is collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.11"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.11_statement",
                        "prose": "Monitor session initiation events. The parameters in this section track changes to the files associated with session events.\n- `/var/run/utmp` - tracks all currently logged in users.\n- `/var/log/wtmp` - file tracks logins, logouts, shutdown, and reboot events.\n- `/var/log/btmp` - keeps track of failed login attempts and can be read by entering the command `/usr/bin/last -f /var/log/btmp`.\n\nAll audit records will be tagged with the identifier \"session.\""
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.11_assessment-objective",
                        "prose": "Rationale: Monitoring these files for changes could alert a system administrator to logins occurring at unusual hours, which could indicate intruder activity (i.e. a user logging in at a time when they do not normally log in)."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.11_guidance",
                        "prose": "Edit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor session initiation information.\n\n_Example:_\n\n```\n# printf \"\n-w /var/run/utmp -p wa -k session\n-w /var/log/wtmp -p wa -k session\n-w /var/log/btmp -p wa -k session\n\" >> /etc/audit/rules.d/50-session.rules\n```\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.11_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# awk '/^ *-w/ \\\n&&(/\\/var\\/run\\/utmp/ \\\n ||/\\/var\\/log\\/wtmp/ \\\n ||/\\/var\\/log\\/btmp/) \\\n&&/ +-p *wa/ \\\n&&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules\n```\n\nVerify the output matches:\n\n```\n-w /var/run/utmp -p wa -k session\n-w /var/log/wtmp -p wa -k session\n-w /var/log/btmp -p wa -k session\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# auditctl -l | awk '/^ *-w/ \\\n&&(/\\/var\\/run\\/utmp/ \\\n ||/\\/var\\/log\\/wtmp/ \\\n ||/\\/var\\/log\\/btmp/) \\\n&&/ +-p *wa/ \\\n&&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)'\n```\n\nVerify the output matches:\n\n```\n-w /var/run/utmp -p wa -k session\n-w /var/log/wtmp -p wa -k session\n-w /var/log/btmp -p wa -k session\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.12",
                    "title": "Ensure login and logout events are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.12"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.12_statement",
                        "prose": "Monitor login and logout events. The parameters below track changes to files associated with login/logout events.\n- `/var/log/lastlog` - maintain records of the last time a user successfully logged in. \n- `/var/run/faillock` - directory maintains records of login failures via the `pam_faillock` module."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.12_assessment-objective",
                        "prose": "Rationale: Monitoring login/logout events could provide a system administrator with information associated with brute force attacks against user logins."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.12_guidance",
                        "prose": "Edit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor login and logout events.\n\n_Example:_\n\n```\n# printf \"\n-w /var/log/lastlog -p wa -k logins\n-w /var/run/faillock -p wa -k logins\n\" >> /etc/audit/rules.d/50-login.rules\n```\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.12_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# awk '/^ *-w/ \\\n&&(/\\/var\\/log\\/lastlog/ \\\n ||/\\/var\\/run\\/faillock/) \\\n&&/ +-p *wa/ \\\n&&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules\n```\n\nVerify the output matches:\n\n```\n-w /var/log/lastlog -p wa -k logins\n-w /var/run/faillock -p wa -k logins\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# auditctl -l | awk '/^ *-w/ \\\n&&(/\\/var\\/log\\/lastlog/ \\\n ||/\\/var\\/run\\/faillock/) \\\n&&/ +-p *wa/ \\\n&&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)'\n```\n\nVerify the output matches:\n\n```\n-w /var/log/lastlog -p wa -k logins\n-w /var/run/faillock -p wa -k logins\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.13",
                    "title": "Ensure file deletion events by users are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.13"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.13_statement",
                        "prose": "Monitor the use of system calls associated with the deletion or renaming of files and file attributes. This configuration statement sets up monitoring for:\n- `unlink` - remove a file\n- `unlinkat` - remove a file attribute\n- `rename` - rename a file\n- `renameat` rename a file attribute\nsystem calls and tags them with the identifier \"delete\"."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.13_assessment-objective",
                        "prose": "Rationale: Monitoring these calls from non-privileged users could provide a system administrator with evidence that inappropriate removal of files and file attributes associated with protected files is occurring. While this audit option will look at all events, system administrators will want to look for specific privileged files that are being deleted or altered."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.13_guidance",
                        "prose": "**Create audit rules**\n\nEdit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor file deletion events by users.\n\n_Example:_\n\n```\n# {\nUID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n[ -n \"${UID_MIN}\" ] && printf \"\n-a always,exit -F arch=b64 -S rename,unlink,unlinkat,renameat -F auid>=${UID_MIN} -F auid!=unset -F key=delete\n-a always,exit -F arch=b32 -S rename,unlink,unlinkat,renameat -F auid>=${UID_MIN} -F auid!=unset -F key=delete\n\" >> /etc/audit/rules.d/50-delete.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\n**Load audit rules**\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.13_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\\n &&/ -F *arch=b(32|64)/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -S/ \\\n &&(/unlink/||/rename/||/unlinkat/||/renameat/) \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -F arch=b64 -S unlink,unlinkat,rename,renameat -F auid>=1000 -F auid!=unset -k delete\n-a always,exit -F arch=b32 -S unlink,unlinkat,rename,renameat -F auid>=1000 -F auid!=unset -k delete\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\\n &&/ -F *arch=b(32|64)/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -S/ \\\n &&(/unlink/||/rename/||/unlinkat/||/renameat/) \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -F arch=b64 -S rename,unlink,unlinkat,renameat -F auid>=1000 -F auid!=-1 -F key=delete\n-a always,exit -F arch=b32 -S unlink,rename,unlinkat,renameat -F auid>=1000 -F auid!=-1 -F key=delete\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.14",
                    "title": "Ensure events that modify the system's Mandatory Access Controls are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.14"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.14_statement",
                        "prose": "Monitor SELinux, an implementation of mandatory access controls. The parameters below monitor any write access (potential additional, deletion or modification of files in the directory) or attribute changes to the `/etc/selinux/` and `/usr/share/selinux/` directories.\n\n**Note:** If a different Mandatory Access Control method is used, changes to the corresponding directories should be audited."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.14_assessment-objective",
                        "prose": "Rationale: Changes to files in the `/etc/selinux/` and `/usr/share/selinux/` directories could indicate that an unauthorized user is attempting to modify access controls and change security contexts, leading to a compromise of the system."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.14_guidance",
                        "prose": "Edit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor events that modify the system's Mandatory Access Controls.\n\n_Example:_\n\n```\n# printf \"\n-w /etc/selinux -p wa -k MAC-policy\n-w /usr/share/selinux -p wa -k MAC-policy\n\" >> /etc/audit/rules.d/50-MAC-policy.rules\n```\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.14_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# awk '/^ *-w/ \\\n&&(/\\/etc\\/selinux/ \\\n ||/\\/usr\\/share\\/selinux/) \\\n&&/ +-p *wa/ \\\n&&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules\n```\n\nVerify the output matches:\n\n```\n-w /etc/selinux -p wa -k MAC-policy\n-w /usr/share/selinux -p wa -k MAC-policy\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# auditctl -l | awk '/^ *-w/ \\\n&&(/\\/etc\\/selinux/ \\\n ||/\\/usr\\/share\\/selinux/) \\\n&&/ +-p *wa/ \\\n&&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)'\n```\n\nVerify the output matches:\n\n```\n-w /etc/selinux -p wa -k MAC-policy\n-w /usr/share/selinux -p wa -k MAC-policy\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.15",
                    "title": "Ensure successful and unsuccessful attempts to use the chcon command are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.15"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.15_statement",
                        "prose": "The operating system must generate audit records for successful/unsuccessful uses of the `chcon` command."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.15_assessment-objective",
                        "prose": "Rationale: The `chcon` command is used to change file security context. Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within the information system (e.g., module or policy filter)."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.15_guidance",
                        "prose": "**Create audit rules**\n\nEdit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor successful and unsuccessful attempts to use the `chcon` command.\n\n_Example:_\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && printf \"\n-a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng\n\" >> /etc/audit/rules.d/50-perm_chng.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\n**Load audit rules**\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.15_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -F *perm=x/ \\\n &&/ -F *path=\\/usr\\/bin\\/chcon/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=1000 -F auid!=unset -k perm_chng\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -F *perm=x/ \\\n &&/ -F *path=\\/usr\\/bin\\/chcon/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -S all -F path=/usr/bin/chcon -F perm=x -F auid>=1000 -F auid!=-1 -F key=perm_chng\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.16",
                    "title": "Ensure successful and unsuccessful attempts to use the setfacl command are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.16"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.16_statement",
                        "prose": "The operating system must generate audit records for successful/unsuccessful uses of the `setfacl` command"
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.16_assessment-objective",
                        "prose": "Rationale: This utility sets Access Control Lists (ACLs) of files and directories. Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within the information system (e.g., module or policy filter)."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.16_guidance",
                        "prose": "**Create audit rules**\n\nEdit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor successful and unsuccessful attempts to use the `setfacl` command.\n\n_Example:_\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && printf \"\n-a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng\n\" >> /etc/audit/rules.d/50-perm_chng.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\n**Load audit rules**\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.16_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -F *perm=x/ \\\n &&/ -F *path=\\/usr\\/bin\\/setfacl/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=1000 -F auid!=unset -k perm_chng\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -F *perm=x/ \\\n &&/ -F *path=\\/usr\\/bin\\/setfacl/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -S all -F path=/usr/bin/setfacl -F perm=x -F auid>=1000 -F auid!=-1 -F key=perm_chng\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.17",
                    "title": "Ensure successful and unsuccessful attempts to use the chacl command are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.17"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.17_statement",
                        "prose": "The operating system must generate audit records for successful/unsuccessful uses of the `chacl` command.\n\n`chacl` is an IRIX-compatibility command, and is maintained for those users who are familiar with its use from either XFS or IRIX."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.17_assessment-objective",
                        "prose": "Rationale: `chacl` changes the ACL(s) for a file or directory. Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within the information system (e.g., module or policy filter)."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.17_guidance",
                        "prose": "**Create audit rules**\n\nEdit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor successful and unsuccessful attempts to use the `chacl` command.\n\n_Example:_\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && printf \"\n-a always,exit -F path=/usr/bin/chacl -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng\n\" >> /etc/audit/rules.d/50-perm_chng.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\n**Load audit rules**\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.17_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -F *perm=x/ \\\n &&/ -F *path=\\/usr\\/bin\\/chacl/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -F path=/usr/bin/chacl -F perm=x -F auid>=1000 -F auid!=unset -k perm_chng\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -F *perm=x/ \\\n &&/ -F *path=\\/usr\\/bin\\/chacl/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -S all -F path=/usr/bin/chacl -F perm=x -F auid>=1000 -F auid!=-1 -F key=perm_chng\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.18",
                    "title": "Ensure successful and unsuccessful attempts to use the usermod command are collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.18"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.18_statement",
                        "prose": "The operating system must generate audit records for successful/unsuccessful uses of the `usermod` command."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.18_assessment-objective",
                        "prose": "Rationale: The `usermod` command modifies the system account files to reflect the changes that are specified on the command line. Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within the information system (e.g., module or policy filter)."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.18_guidance",
                        "prose": "**Create audit rules**\n\nEdit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor successful and unsuccessful attempts to use the `usermod` command.\n\n_Example:_\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && printf \"\n-a always,exit -F path=/usr/sbin/usermod -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k usermod\n\" >> /etc/audit/rules.d/50-usermod.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\n**Load audit rules**\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.18_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following command to check the on disk rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -F *perm=x/ \\\n &&/ -F *path=\\/usr\\/sbin\\/usermod/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -F path=/usr/sbin/usermod -F perm=x -F auid>=1000 -F auid!=unset -k usermod\n```\n\n**Running configuration**\n\nRun the following command to check loaded rules:\n\n```\n# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -F *perm=x/ \\\n &&/ -F *path=\\/usr\\/sbin\\/usermod/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -S all -F path=/usr/sbin/usermod -F perm=x -F auid>=1000 -F auid!=-1 -F key=usermod\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.19",
                    "title": "Ensure kernel module loading unloading and modification is collected",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.19"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.19_statement",
                        "prose": "Monitor the loading and unloading of kernel modules. All the loading / listing / dependency checking of modules is done by `kmod` via symbolic links.\n\nThe following system calls control loading and unloading of modules:\n- `init_module` - load a module\n- `finit_module` - load a module (used when the overhead of using cryptographically signed modules to determine the authenticity of a module can be avoided)\n- `delete_module` - delete a module\n- `create_module` - create a loadable module entry\n- `query_module` - query the kernel for various bits pertaining to modules\n\nAny execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of `modules`."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.19_assessment-objective",
                        "prose": "Rationale: Monitoring the use of all the various ways to manipulate kernel modules could provide system administrators with evidence that an unauthorized change was made to a kernel module, possibly compromising the security of the system."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.19_guidance",
                        "prose": "**Create audit rules**\n\nEdit or create a file in the `/etc/audit/rules.d/` directory, ending in `.rules` extension, with the relevant rules to monitor kernel module modification.\n\n_Example:_\n\n```\n#!/usr/bin/env bash\n\n{\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && printf \"\n -a always,exit -F arch=b64 -S init_module,finit_module,delete_module,create_module,query_module -F auid>=${UID_MIN} -F auid!=unset -k kernel_modules\n -a always,exit -F path=/usr/bin/kmod -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k kernel_modules\n \" >> /etc/audit/rules.d/50-kernel_modules.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\n**Load audit rules**\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.19_assessment-method",
                        "prose": "**On disk configuration**\n\nRun the following script to check the on disk rules:\n\n```\n#!/usr/bin/env bash\n\n{\n awk '/^ *-a *always,exit/ \\\n &&/ -F *arch=b(32|64)/ \\\n &&(/ -F auid!=unset/||/ -F auid!=-1/||/ -F auid!=4294967295/) \\\n &&/ -S/ \\\n &&(/init_module/ \\\n ||/finit_module/ \\\n ||/delete_module/ \\\n ||/create_module/ \\\n ||/query_module/) \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules\n\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -F *perm=x/ \\\n &&/ -F *path=\\/usr\\/bin\\/kmod/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output matches:\n\n```\n-a always,exit -F arch=b64 -S init_module,finit_module,delete_module,create_module,query_module -F auid>=1000 -F auid!=unset -k kernel_modules\n-a always,exit -F path=/usr/bin/kmod -F perm=x -F auid>=1000 -F auid!=unset -k kernel_modules\n```\n\n**Running configuration**\n\nRun the following script to check loaded rules:\n\n```\n#!/usr/bin/env bash\n\n{\n auditctl -l | awk '/^ *-a *always,exit/ \\\n &&/ -F *arch=b(32|64)/ \\\n &&(/ -F auid!=unset/||/ -F auid!=-1/||/ -F auid!=4294967295/) \\\n &&/ -S/ \\\n &&(/init_module/ \\\n ||/finit_module/ \\\n ||/delete_module/ \\\n ||/create_module/ \\\n ||/query_module/) \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)'\n\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\\n &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\\n &&/ -F *auid>=${UID_MIN}/ \\\n &&/ -F *perm=x/ \\\n &&/ -F *path=\\/usr\\/bin\\/kmod/ \\\n &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\\n || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\"\n}\n```\n\nVerify the output includes:\n\n```\n-a always,exit -F arch=b64 -S create_module,init_module,delete_module,query_module,finit_module -F auid>=1000 -F auid!=-1 -F key=kernel_modules\n-a always,exit -S all -F path=/usr/bin/kmod -F perm=x -F auid>=1000 -F auid!=-1 -F key=kernel_modules\n```\n\n**Symlink audit**\n\nRun the following script to audit if the symlinks `kmod` accepts are indeed pointing at it:\n\n```\n#!/usr/bin/env bash\n\n{\n a_files=(\"/usr/sbin/lsmod\" \"/usr/sbin/rmmod\" \"/usr/sbin/insmod\" \"/usr/sbin/modinfo\" \"/usr/sbin/modprobe\" \"/usr/sbin/depmod\")\n for l_file in \"${a_files[@]}\"; do\n if [ \"$(readlink -f \"$l_file\")\" = \"$(readlink -f /bin/kmod)\" ]; then\n printf \"OK: \\\"$l_file\\\"\\n\"\n else\n printf \"Issue with symlink for file: \\\"$l_file\\\"\\n\"\n fi\n done\n}\n```\n\nVerify the output states `OK`. If there is a symlink pointing to a different location it should be investigated",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.20",
                    "title": "Ensure the audit configuration is immutable",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.20"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.20_statement",
                        "prose": "Set system audit so that audit rules cannot be modified with `auditctl` . Setting the flag \"-e 2\" forces audit to be put in immutable mode. Audit changes can only be made on system reboot.\n\n**Note:** This setting will require the system to be rebooted to update the active `auditd` configuration settings."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.20_assessment-objective",
                        "prose": "Rationale: In immutable mode, unauthorized users cannot execute changes to the audit system to potentially hide malicious activity and then put the audit rules back. Users would most likely notice a system reboot and that could alert administrators of an attempt to make unauthorized audit changes."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.20_guidance",
                        "prose": "Edit or create the file `/etc/audit/rules.d/99-finalize.rules` and add the line `-e 2` at the end of the file:\n\n_Example:_ \n\n```\n# printf '\\n%s' \"-e 2\" >> /etc/audit/rules.d/99-finalize.rules\n```\n\n**Load audit rules**\n\nMerge and load the rules into active configuration:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.20_assessment-method",
                        "prose": "Run the following command and verify output matches:\n\n```\n# grep -Ph -- '^\\h*-e\\h+2\\b' /etc/audit/rules.d/*.rules | tail -1\n\n-e 2\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.3.21",
                    "title": "Ensure the running and on disk configuration is the same",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.3.21"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.3.21_statement",
                        "prose": "The Audit system have both on disk and running configuration. It is possible for these configuration settings to differ.\n\n**Note:** Due to the limitations of `augenrules` and `auditctl`, it is not absolutely guaranteed that loading the rule sets via `augenrules --load` will result in all rules being loaded or even that the user will be informed if there was a problem loading the rules."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.3.21_assessment-objective",
                        "prose": "Rationale: Configuration differences between what is currently running and what is on disk could cause unexpected problems or may give a false impression of compliance requirements."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.3.21_guidance",
                        "prose": "If the rules are not aligned across all three () areas, run the following command to merge and load all rules:\n\n```\n# augenrules --load\n```\n\nCheck if reboot is required.\n\n```\nif [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then echo \"Reboot required to load rules\"; fi\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.3.21_assessment-method",
                        "prose": "**Merged rule sets**\n\nEnsure that all rules in `/etc/audit/rules.d` have been merged into `/etc/audit/audit.rules`:\n\n```\n# augenrules --check\n\n/usr/sbin/augenrules: No change\n```\n\nShould there be any drift, run `augenrules --load` to merge and load all rules.",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              },
              {
                "id": "section-6-3-4",
                "title": "Configure auditd File Access",
                "props": [
                  {
                    "name": "label",
                    "value": "6.3.4"
                  }
                ],
                "controls": [
                  {
                    "id": "cis-6.3.4.1",
                    "title": "Ensure the audit log file directory mode is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.4.1"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.4.1_statement",
                        "prose": "The audit log directory contains audit log files."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.4.1_assessment-objective",
                        "prose": "Rationale: Audit information includes all information including: audit records, audit settings and audit reports. This information is needed to successfully audit system activity. This information must be protected from unauthorized modification or deletion. If this information were to be compromised, forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.4.1_guidance",
                        "prose": "Run the following command to configure the audit log directory to have a mode of \"0750\" or less permissive: \n\n```\n# chmod g-w,o-rwx \"$(dirname \"$(awk -F= '/^\\s*log_file\\s*/{print $2}' /etc/audit/auditd.conf | xargs)\")\"\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.4.1_assessment-method",
                        "prose": "Run the following script to verify the audit log directory is mode 0750 or more restrictive:\n\n```\n#!/usr/bin/env bash\n\n{\n l_perm_mask=\"0027\"\n if [ -e \"/etc/audit/auditd.conf\" ]; then\n l_audit_log_directory=\"$(dirname \"$(awk -F= '/^\\s*log_file\\s*/{print $2}' /etc/audit/auditd.conf | xargs)\")\"\n if [ -d \"$l_audit_log_directory\" ]; then\n l_maxperm=\"$(printf '%o' $(( 0777 & ~$l_perm_mask )) )\"\n l_directory_mode=\"$(stat -Lc '%#a' \"$l_audit_log_directory\")\"\n if [ $(( $l_directory_mode & $l_perm_mask )) -gt 0 ]; then\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Directory: \\\"$l_audit_log_directory\\\" is mode: \\\"$l_directory_mode\\\"\\n (should be mode: \\\"$l_maxperm\\\" or more restrictive)\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n - Directory: \\\"$l_audit_log_directory\\\" is mode: \\\"$l_directory_mode\\\"\\n (should be mode: \\\"$l_maxperm\\\" or more restrictive)\\n\"\n fi \n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Log file directory not set in \\\"/etc/audit/auditd.conf\\\" please set log file directory\"\n fi\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - File: \\\"/etc/audit/auditd.conf\\\" not found\\n - ** Verify auditd is installed **\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.4.2",
                    "title": "Ensure audit log files mode is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.4.2"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.4.2_statement",
                        "prose": "Audit log files contain information about the system and system activity."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.4.2_assessment-objective",
                        "prose": "Rationale: Access to audit records can reveal system and configuration data to attackers, potentially compromising its confidentiality."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.4.2_guidance",
                        "prose": "Run the following command to remove more permissive mode than `0640` from audit log files:\n\n```\n# [ -f /etc/audit/auditd.conf ] && find \"$(dirname $(awk -F \"=\" '/^\\s*log_file/ {print $2}' /etc/audit/auditd.conf | xargs))\" -type f -perm /0137 -exec chmod u-x,g-wx,o-rwx {} +\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.4.2_assessment-method",
                        "prose": "Run the following script to verify audit log files are mode `0640` or more restrictive:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n l_perm_mask=\"0177\"\n if [ -e \"/etc/audit/auditd.conf\" ]; then\n l_audit_log_directory=\"$(dirname \"$(awk -F= '/^\\s*log_file\\s*/{print $2}' /etc/audit/auditd.conf | xargs)\")\"\n if [ -d \"$l_audit_log_directory\" ]; then\n l_maxperm=\"$(printf '%o' $(( 0777 & ~$l_perm_mask )) )\"\n while IFS= read -r -d $'\\0' l_file; do\n while IFS=: read -r l_file_mode l_hr_file_mode; do\n l_output2=\"$l_output2\\n - File: \\\"$l_file\\\" is mode: \\\"$l_file_mode\\\"\\n (should be mode: \\\"$l_maxperm\\\" or more restrictive)\\n\"\n done <<< \"$(stat -Lc '%#a:%A' \"$l_file\")\"\n done < <(find \"$l_audit_log_directory\" -maxdepth 1 -type f -perm /\"$l_perm_mask\" -print0)\n else\n l_output2=\"$l_output2\\n - Log file directory not set in \\\"/etc/audit/auditd.conf\\\" please set log file directory\"\n fi\n else\n l_output2=\"$l_output2\\n - File: \\\"/etc/audit/auditd.conf\\\" not found.\\n - ** Verify auditd is installed **\"\n fi\n if [ -z \"$l_output2\" ]; then\n l_output=\"$l_output\\n - All files in \\\"$l_audit_log_directory\\\" are mode: \\\"$l_maxperm\\\" or more restrictive\"\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured * :$l_output\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :$l_output2\\n\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.4.3",
                    "title": "Ensure audit log files owner is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.4.3"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.4.3_statement",
                        "prose": "Audit log files contain information about the system and system activity."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.4.3_assessment-objective",
                        "prose": "Rationale: Access to audit records can reveal system and configuration data to attackers, potentially compromising its confidentiality."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.4.3_guidance",
                        "prose": "Run the following command to configure the audit log files to be owned by the `root` user: \n\n```\n# [ -f /etc/audit/auditd.conf ] && find \"$(dirname $(awk -F \"=\" '/^\\s*log_file/ {print $2}' /etc/audit/auditd.conf | xargs))\" -type f ! -user root -exec chown root {} +\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.4.3_assessment-method",
                        "prose": "Run the following script to verify audit log files are owned by the `root` user: \n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n l_perm_mask=\"0177\"\n if [ -e \"/etc/audit/auditd.conf\" ]; then\n l_audit_log_directory=\"$(dirname \"$(awk -F= '/^\\s*log_file\\s*/{print $2}' /etc/audit/auditd.conf | xargs)\")\"\n if [ -d \"$l_audit_log_directory\" ]; then\n l_maxperm=\"$(printf '%o' $(( 0777 & ~$l_perm_mask )) )\"\n while IFS= read -r -d $'\\0' l_file; do\n l_output2=\"$l_output2\\n - File: \\\"$l_file\\\" is mode: \\\"$(stat -Lc '%#a' \"$l_file\")\\\"\\n (should be mode: \\\"$l_maxperm\\\" or more restrictive)\\n\"\n done < <(find \"$l_audit_log_directory\" -maxdepth 1 -type f -perm /\"$l_perm_mask\" -print0)\n else\n l_output2=\"$l_output2\\n - Log file directory not set in \\\"/etc/audit/auditd.conf\\\" please set log file directory\"\n fi\n else\n l_output2=\"$l_output2\\n - File: \\\"/etc/audit/auditd.conf\\\" not found.\\n - ** Verify auditd is installed **\"\n fi\n if [ -z \"$l_output2\" ]; then\n l_output=\"$l_output\\n - All files in \\\"$l_audit_log_directory\\\" are mode: \\\"$l_maxperm\\\" or more restrictive\"\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured * :$l_output\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :$l_output2\\n\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.4.4",
                    "title": "Ensure audit log files group owner is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.4.4"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.4.4_statement",
                        "prose": "Audit log files contain information about the system and system activity."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.4.4_assessment-objective",
                        "prose": "Rationale: Access to audit records can reveal system and configuration data to attackers, potentially compromising its confidentiality."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.4.4_guidance",
                        "prose": "Run the following command to configure the audit log files to be owned by `adm` group: \n\n```\n# find $(dirname $(awk -F\"=\" '/^\\s*log_file\\s*=\\s*/ {print $2}' /etc/audit/auditd.conf | xargs)) -type f \\( ! -group adm -a ! -group root \\) -exec chgrp adm {} +\n```\n\nRun the following command to configure the audit log files to be owned by the `adm` group:\n\n```\n# chgrp adm /var/log/audit/\n```\n\nRun the following command to set the `log_group` parameter in the audit configuration file to `log_group = adm`:\n\n```\n# sed -ri 's/^\\s*#?\\s*log_group\\s*=\\s*\\S+(\\s*#.*)?.*$/log_group = adm\\1/' /etc/audit/auditd.conf\n```\n\nRun the following command to restart the audit daemon to reload the configuration file: \n\n```\n# systemctl restart auditd\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.4.4_assessment-method",
                        "prose": "Run the following script to verify:\n- `log_group` parameter is set to either `adm` or `root` in `/etc/audit/auditd.conf`\n- audit log files are group owned by the group \"root\" or \"adm\" \n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n if [ -e \"/etc/audit/auditd.conf\" ]; then\n l_audit_log_directory=\"$(dirname \"$(awk -F= '/^\\s*log_file\\s*/{print $2}' /etc/audit/auditd.conf | xargs)\")\"\n l_audit_log_group=\"$(awk -F= '/^\\s*log_group\\s*/{print $2}' /etc/audit/auditd.conf | xargs)\"\n if grep -Pq -- '^\\h*(root|adm)\\h*$' <<< \"$l_audit_log_group\"; then\n l_output=\"$l_output\\n - Log file group correctly set to: \\\"$l_audit_log_group\\\" in \\\"/etc/audit/auditd.conf\\\"\"\n else\n l_output2=\"$l_output2\\n - Log file group is set to: \\\"$l_audit_log_group\\\" in \\\"/etc/audit/auditd.conf\\\"\\n (should be set to group: \\\"root or adm\\\")\\n\"\n fi\n if [ -d \"$l_audit_log_directory\" ]; then\n while IFS= read -r -d $'\\0' l_file; do\n l_output2=\"$l_output2\\n - File: \\\"$l_file\\\" is group owned by group: \\\"$(stat -Lc '%G' \"$l_file\")\\\"\\n (should be group owned by group: \\\"root or adm\\\")\\n\"\n done < <(find \"$l_audit_log_directory\" -maxdepth 1 -type f \\( ! -group root -a ! -group adm \\) -print0)\n else\n l_output2=\"$l_output2\\n - Log file directory not set in \\\"/etc/audit/auditd.conf\\\" please set log file directory\"\n fi\n else\n l_output2=\"$l_output2\\n - File: \\\"/etc/audit/auditd.conf\\\" not found.\\n - ** Verify auditd is installed **\"\n fi\n if [ -z \"$l_output2\" ]; then\n l_output=\"$l_output\\n - All files in \\\"$l_audit_log_directory\\\" are group owned by group: \\\"root or adm\\\"\\n\"\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured * :$l_output\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \" - * Correctly configured * :\\n$l_output\\n\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.4.5",
                    "title": "Ensure audit configuration files mode is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.4.5"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.4.5_statement",
                        "prose": "Audit configuration files control auditd and what events are audited."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.4.5_assessment-objective",
                        "prose": "Rationale: Access to the audit configuration files could allow unauthorized personnel to prevent the auditing of critical events. \n\nMisconfigured audit configuration files may prevent the auditing of critical events or impact the system's performance by overwhelming the audit log. Misconfiguration of the audit configuration files may also make it more difficult to establish and investigate events relating to an incident."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.4.5_guidance",
                        "prose": "Run the following command to remove more permissive mode than 0640 from the audit configuration files:\n\n```\n# find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) -exec chmod u-x,g-wx,o-rwx {} +\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.4.5_assessment-method",
                        "prose": "Run the following script to verify that the audit configuration files are mode `0640` or more restrictive:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_perm_mask=\"0137\"\n l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_perm_mask )) )\"\n while IFS= read -r -d $'\\0' l_fname; do\n l_mode=$(stat -Lc '%#a' \"$l_fname\")\n if [ $(( \"$l_mode\" & \"$l_perm_mask\" )) -gt 0 ]; then\n l_output2=\"$l_output2\\n - file: \\\"$l_fname\\\" is mode: \\\"$l_mode\\\" (should be mode: \\\"$l_maxperm\\\" or more restrictive)\"\n fi\n done < <(find /etc/audit/ -type f \\( -name \"*.conf\" -o -name '*.rules' \\) -print0)\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n - All audit configuration files are mode: \\\"$l_maxperm\\\" or more restrictive\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n$l_output2\"\n fi\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.4.6",
                    "title": "Ensure audit configuration files owner is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.4.6"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.4.6_statement",
                        "prose": "Audit configuration files control auditd and what events are audited."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.4.6_assessment-objective",
                        "prose": "Rationale: Access to the audit configuration files could allow unauthorized personnel to prevent the auditing of critical events. \n\nMisconfigured audit configuration files may prevent the auditing of critical events or impact the system's performance by overwhelming the audit log. Misconfiguration of the audit configuration files may also make it more difficult to establish and investigate events relating to an incident."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.4.6_guidance",
                        "prose": "Run the following command to change ownership to `root` user:\n\n```\n# find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -user root -exec chown root {} +\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.4.6_assessment-method",
                        "prose": "Run the following command to verify that the audit configuration files have mode 640 or more restrictive and are owned by the root user and root group: \n\n```\n# find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -user root\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.4.7",
                    "title": "Ensure audit configuration files group owner is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.4.7"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.4.7_statement",
                        "prose": "Audit configuration files control auditd and what events are audited."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.4.7_assessment-objective",
                        "prose": "Rationale: Access to the audit configuration files could allow unauthorized personnel to prevent the auditing of critical events. \n\nMisconfigured audit configuration files may prevent the auditing of critical events or impact the system's performance by overwhelming the audit log. Misconfiguration of the audit configuration files may also make it more difficult to establish and investigate events relating to an incident."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.4.7_guidance",
                        "prose": "Run the following command to change group to `root`:\n\n```\n# find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -group root -exec chgrp root {} +\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.4.7_assessment-method",
                        "prose": "Run the following command to verify that the audit configuration files are owned by the group `root`: \n\n```\n# find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -group root\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.4.8",
                    "title": "Ensure audit tools mode is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.4.8"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.4.8_statement",
                        "prose": "Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.4.8_assessment-objective",
                        "prose": "Rationale: Protecting audit information includes identifying and protecting the tools used to view and manipulate log data. Protecting audit tools is necessary to prevent unauthorized operation on audit information."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.4.8_guidance",
                        "prose": "Run the following command to remove more permissive mode from the audit tools: \n\n```\n# chmod go-w /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.4.8_assessment-method",
                        "prose": "Run the following script to verify the audit tools are mode `0755` or more restrictive:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_perm_mask=\"0022\"\n l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_perm_mask )) )\"\n a_audit_tools=(\"/sbin/auditctl\" \"/sbin/aureport\" \"/sbin/ausearch\" \"/sbin/autrace\" \"/sbin/auditd\" \"/sbin/augenrules\")\n for l_audit_tool in \"${a_audit_tools[@]}\"; do\n l_mode=\"$(stat -Lc '%#a' \"$l_audit_tool\")\"\n if [ $(( \"$l_mode\" & \"$l_perm_mask\" )) -gt 0 ]; then\n l_output2=\"$l_output2\\n - Audit tool \\\"$l_audit_tool\\\" is mode: \\\"$l_mode\\\" and should be mode: \\\"$l_maxperm\\\" or more restrictive\"\n else\n l_output=\"$l_output\\n - Audit tool \\\"$l_audit_tool\\\" is correctly configured to mode: \\\"$l_mode\\\"\"\n fi\n done\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured * :$l_output\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"\\n - * Correctly configured * :\\n$l_output\\n\"\n fi\n unset a_audit_tools\n}\n```",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.4.9",
                    "title": "Ensure audit tools owner is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.4.9"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.4.9_statement",
                        "prose": "Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.4.9_assessment-objective",
                        "prose": "Rationale: Protecting audit information includes identifying and protecting the tools used to view and manipulate log data. Protecting audit tools is necessary to prevent unauthorized operation on audit information."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.4.9_guidance",
                        "prose": "Run the following command to change the owner of the audit tools to the `root` user:\n\n```\n# chown root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.4.9_assessment-method",
                        "prose": "Run the following command to verify the audit tools are owned by the `root` user: \n\n```\n# stat -Lc \"%n %U\" /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules | awk '$2 != \"root\" {print}'\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "cis-6.3.4.10",
                    "title": "Ensure audit tools group owner is configured",
                    "props": [
                      {
                        "name": "label",
                        "value": "6.3.4.10"
                      }
                    ],
                    "parts": [
                      {
                        "name": "statement",
                        "id": "cis-6.3.4.10_statement",
                        "prose": "Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators."
                      },
                      {
                        "name": "assessment-objective",
                        "id": "cis-6.3.4.10_assessment-objective",
                        "prose": "Rationale: Protecting audit information includes identifying and protecting the tools used to view and manipulate log data. Protecting audit tools is necessary to prevent unauthorized operation on audit information."
                      },
                      {
                        "name": "guidance",
                        "id": "cis-6.3.4.10_guidance",
                        "prose": "Run the following command to change group ownership to the groop `root`:\n\n```\n# chgrp root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules\n```"
                      },
                      {
                        "name": "assessment-method",
                        "id": "cis-6.3.4.10_assessment-method",
                        "prose": "Run the following command to verify the audit tools are owned by the group `root`\n\n```\n# stat -Lc \"%n %G\" /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules | awk '$2 != \"root\" {print}'\n```\n\nNothing should be returned",
                        "props": [
                          {
                            "name": "method",
                            "value": "TEST",
                            "ns": "http://csrc.nist.gov/ns/rmf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "groups": []
              }
            ]
          }
        ]
      },
      {
        "id": "section-7",
        "title": "System Maintenance",
        "props": [
          {
            "name": "label",
            "value": "7"
          }
        ],
        "controls": [],
        "groups": [
          {
            "id": "section-7-1",
            "title": "System File Permissions",
            "props": [
              {
                "name": "label",
                "value": "7.1"
              }
            ],
            "controls": [
              {
                "id": "cis-7.1.1",
                "title": "Ensure permissions on /etc/passwd are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "7.1.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.1.1_statement",
                    "prose": "The `/etc/passwd` file contains user account information that is used by many system utilities and therefore must be readable for these utilities to operate."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.1.1_assessment-objective",
                    "prose": "Rationale: It is critical to ensure that the `/etc/passwd` file is protected from unauthorized write access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.1.1_guidance",
                    "prose": "Run the following commands to remove excess permissions, set owner, and set group on `/etc/passwd`:\n\n```\n# chmod u-x,go-wx /etc/passwd\n# chown root:root /etc/passwd\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.1.1_assessment-method",
                    "prose": "Run the following command to verify `/etc/passwd` is mode 644 or more restrictive, `Uid` is `0/root` and `Gid` is `0/root`:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/passwd\n\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.1.2",
                "title": "Ensure permissions on /etc/passwd- are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "7.1.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.1.2_statement",
                    "prose": "The `/etc/passwd-` file contains backup user account information."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.1.2_assessment-objective",
                    "prose": "Rationale: It is critical to ensure that the `/etc/passwd-` file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.1.2_guidance",
                    "prose": "Run the following commands to remove excess permissions, set owner, and set group on `/etc/passwd-`:\n\n```\n# chmod u-x,go-wx /etc/passwd-\n# chown root:root /etc/passwd-\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.1.2_assessment-method",
                    "prose": "Run the following command to verify `/etc/passwd-` is mode 644 or more restrictive, `Uid` is `0/root` and `Gid` is `0/root`:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/passwd-\n\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: { 0/ root)\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.1.3",
                "title": "Ensure permissions on /etc/group are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "7.1.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.1.3_statement",
                    "prose": "The `/etc/group` file contains a list of all the valid groups defined in the system. The command below allows read/write access for root and read access for everyone else."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.1.3_assessment-objective",
                    "prose": "Rationale: The `/etc/group` file needs to be protected from unauthorized changes by non-privileged users, but needs to be readable as this information is used with many non-privileged programs."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.1.3_guidance",
                    "prose": "Run the following commands to remove excess permissions, set owner, and set group on `/etc/group`:\n\n```\n# chmod u-x,go-wx /etc/group\n# chown root:root /etc/group\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.1.3_assessment-method",
                    "prose": "Run the following command to verify `/etc/group` is mode 644 or more restrictive, `Uid` is `0/root` and `Gid` is `0/root`:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/group\n\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.1.4",
                "title": "Ensure permissions on /etc/group- are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "7.1.4"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.1.4_statement",
                    "prose": "The `/etc/group-` file contains a backup list of all the valid groups defined in the system."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.1.4_assessment-objective",
                    "prose": "Rationale: It is critical to ensure that the `/etc/group-` file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.1.4_guidance",
                    "prose": "Run the following commands to remove excess permissions, set owner, and set group on `/etc/group-`:\n\n```\n# chmod u-x,go-wx /etc/group-\n# chown root:root /etc/group-\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.1.4_assessment-method",
                    "prose": "Run the following command to verify `/etc/group-` is mode 644 or more restrictive, `Uid` is `0/root` and `Gid` is `0/root`:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/group-\n\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.1.5",
                "title": "Ensure permissions on /etc/shadow are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "7.1.5"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.1.5_statement",
                    "prose": "The `/etc/shadow` file is used to store the information about user accounts that is critical to the security of those accounts, such as the hashed password and other security information."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.1.5_assessment-objective",
                    "prose": "Rationale: If attackers can gain read access to the `/etc/shadow` file, they can easily run a password cracking program against the hashed password to break it. Other security information that is stored in the `/etc/shadow` file (such as expiration) could also be useful to subvert the user accounts."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.1.5_guidance",
                    "prose": "Run the following commands to set mode, owner, and group on `/etc/shadow`:\n\n```\n# chown root:root /etc/shadow\n# chmod 0000 /etc/shadow\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.1.5_assessment-method",
                    "prose": "Run the following command to verify `/etc/shadow` is mode 000, `Uid` is `0/root` and `Gid` is `0/root`:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shadow\n\nAccess: (0/----------) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.1.6",
                "title": "Ensure permissions on /etc/shadow- are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "7.1.6"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.1.6_statement",
                    "prose": "The `/etc/shadow-` file is used to store backup information about user accounts that is critical to the security of those accounts, such as the hashed password and other security information."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.1.6_assessment-objective",
                    "prose": "Rationale: It is critical to ensure that the `/etc/shadow-` file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.1.6_guidance",
                    "prose": "Run the following commands to set mode, owner, and group on `/etc/shadow-`:\n\n```\n# chown root:root /etc/shadow-\n# chmod 0000 /etc/shadow-\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.1.6_assessment-method",
                    "prose": "Run the following command to verify `/etc/shadow-` is mode 000, `Uid` is `0/root` and `Gid` is `0/root`:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shadow-\n\nAccess: (0/----------) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.1.7",
                "title": "Ensure permissions on /etc/gshadow are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "7.1.7"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.1.7_statement",
                    "prose": "The `/etc/gshadow` file is used to store the information about groups that is critical to the security of those accounts, such as the hashed password and other security information."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.1.7_assessment-objective",
                    "prose": "Rationale: If attackers can gain read access to the `/etc/gshadow` file, they can easily run a password cracking program against the hashed password to break it. Other security information that is stored in the `/etc/gshadow` file (such as group administrators) could also be useful to subvert the group."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.1.7_guidance",
                    "prose": "Run the following commands to set mode, owner, and group on `/etc/gshadow`:\n\n```\n# chown root:root /etc/gshadow\n# chmod 0000 /etc/gshadow\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.1.7_assessment-method",
                    "prose": "Run the following command to verify `/etc/gshadow` is mode 000, `Uid` is `0/root` and `Gid` is `0/root`:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/gshadow\n\nAccess: (0/----------) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.1.8",
                "title": "Ensure permissions on /etc/gshadow- are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "7.1.8"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.1.8_statement",
                    "prose": "The `/etc/gshadow-` file is used to store backup information about groups that is critical to the security of those accounts, such as the hashed password and other security information."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.1.8_assessment-objective",
                    "prose": "Rationale: It is critical to ensure that the `/etc/gshadow-` file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.1.8_guidance",
                    "prose": "Run the following commands to set mode, owner, and group on `/etc/gshadow-`:\n\n```\n# chown root:root /etc/gshadow-\n# chmod 0000 /etc/gshadow-\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.1.8_assessment-method",
                    "prose": "Run the following command to verify `/etc/gshadow-` is mode 000, `Uid` is `0/root` and `Gid` is `0/root`:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/gshadow-\n\nAccess: (0/----------) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.1.9",
                "title": "Ensure permissions on /etc/shells are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "7.1.9"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.1.9_statement",
                    "prose": "`/etc/shells` is a text file which contains the full pathnames of valid login shells. This file is consulted by `chsh` and available to be queried by other programs."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.1.9_assessment-objective",
                    "prose": "Rationale: It is critical to ensure that the `/etc/shells` file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.1.9_guidance",
                    "prose": "Run the following commands to remove excess permissions, set owner, and set group on `/etc/shells`:\n\n```\n# chmod u-x,go-wx /etc/shells\n# chown root:root /etc/shells\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.1.9_assessment-method",
                    "prose": "Run the following command to verify `/etc/shells` is mode 644 or more restrictive, `Uid` is `0/root` and `Gid` is `0/root`:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shells\n\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.1.10",
                "title": "Ensure permissions on /etc/security/opasswd are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "7.1.10"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.1.10_statement",
                    "prose": "`/etc/security/opasswd` and it's backup `/etc/security/opasswd.old` hold user's previous passwords if `pam_unix` or `pam_pwhistory` is in use on the system"
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.1.10_assessment-objective",
                    "prose": "Rationale: It is critical to ensure that `/etc/security/opasswd` is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.1.10_guidance",
                    "prose": "Run the following commands to remove excess permissions, set owner, and set group on `/etc/security/opasswd` and `/etc/security/opasswd.old` is they exist:\n\n```\n# [ -e \"/etc/security/opasswd\" ] && chmod u-x,go-rwx /etc/security/opasswd\n# [ -e \"/etc/security/opasswd\" ] && chown root:root /etc/security/opasswd\n# [ -e \"/etc/security/opasswd.old\" ] && chmod u-x,go-rwx /etc/security/opasswd.old\n# [ -e \"/etc/security/opasswd.old\" ] && chown root:root /etc/security/opasswd.old\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.1.10_assessment-method",
                    "prose": "Run the following commands to verify `/etc/security/opasswd` and `/etc/security/opasswd.old` are mode 600 or more restrictive, `Uid` is `0/root` and `Gid` is `0/root` if they exist:\n\n```\n# [ -e \"/etc/security/opasswd\" ] && stat -Lc '%n Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/security/opasswd\n\n/etc/security/opasswd Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)\n -OR-\nNothing is returned\n```\n\n```\n# [ -e \"/etc/security/opasswd.old\" ] && stat -Lc '%n Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/security/opasswd.old\n\n/etc/security/opasswd.old Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)\n -OR-\nNothing is returned\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.1.11",
                "title": "Ensure world writable files and directories are secured",
                "props": [
                  {
                    "name": "label",
                    "value": "7.1.11"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.1.11_statement",
                    "prose": "World writable files are the least secure. Data in world-writable files can be modified and compromised by any user on the system. World writable files may also indicate an incorrectly written script or program that could potentially be the cause of a larger compromise to the system's integrity. See the `chmod(2)` man page for more information.\n\nSetting the sticky bit on world writable directories prevents users from deleting or renaming files in that directory that are not owned by them."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.1.11_assessment-objective",
                    "prose": "Rationale: Data in world-writable files can be modified and compromised by any user on the system. World writable files may also indicate an incorrectly written script or program that could potentially be the cause of a larger compromise to the system's integrity.\n\nThis feature prevents the ability to delete or rename files in world writable directories (such as `/tmp` ) that are owned by another user."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.1.11_guidance",
                    "prose": "'- World Writable Files:\n - It is recommended that write access is removed from `other` with the command ( `chmod o-w <filename>` ), but always consult relevant vendor documentation to avoid breaking any application dependencies on a given file.\n- World Writable Directories:\n - Set the sticky bit on all world writable directories with the command ( `chmod a+t <directory_name>` )\n\nRun the following script to:\n- Remove other write permission from any world writable files\n- Add the sticky bit to all world writable directories\n\n```\n#!/usr/bin/env bash\n\n{\n l_smask='01000'\n a_file=(); a_dir=() # Initialize arrays\n a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path \"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path \"*/kubelet/plugins/*\" -a ! -path \"/sys/*\" -a ! -path \"/snap/*\")\n while IFS= read -r l_mount; do\n while IFS= read -r -d $'\\0' l_file; do\n if [ -e \"$l_file\" ]; then\n l_mode=\"$(stat -Lc '%#a' \"$l_file\")\"\n if [ -f \"$l_file\" ]; then # Remove excess permissions from WW files\n echo -e \" - File: \\\"$l_file\\\" is mode: \\\"$l_mode\\\"\\n - removing write permission on \\\"$l_file\\\" from \\\"other\\\"\"\n chmod o-w \"$l_file\"\n fi\n if [ -d \"$l_file\" ]; then # Add sticky bit\n if [ ! $(( $l_mode & $l_smask )) -gt 0 ]; then\n echo -e \" - Directory: \\\"$l_file\\\" is mode: \\\"$l_mode\\\" and doesn't have the sticky bit set\\n - Adding the sticky bit\"\n chmod a+t \"$l_file\"\n fi\n fi\n fi\n done < <(find \"$l_mount\" -xdev \\( \"${a_path[@]}\" \\) \\( -type f -o -type d \\) -perm -0002 -print0 2> /dev/null)\n done < <(findmnt -Dkerno fstype,target | awk '($1 !~ /^\\s*(nfs|proc|smb|vfat|iso9660|efivarfs|selinuxfs)/ && $2 !~ /^(\\/run\\/user\\/|\\/tmp|\\/var\\/tmp)/){print $2}') \n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.1.11_assessment-method",
                    "prose": "Run the following script to verify:\n- No world writable files exist\n- No world writable directories without the sticky bit exist\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n l_smask='01000'\n a_file=(); a_dir=() # Initialize arrays\n a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path \"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path \"*/kubelet/plugins/*\" -a ! -path \"/sys/*\" -a ! -path \"/snap/*\")\n while IFS= read -r l_mount; do\n while IFS= read -r -d $'\\0' l_file; do\n if [ -e \"$l_file\" ]; then\n [ -f \"$l_file\" ] && a_file+=(\"$l_file\") # Add WR files\n if [ -d \"$l_file\" ]; then # Add directories w/o sticky bit\n l_mode=\"$(stat -Lc '%#a' \"$l_file\")\"\n [ ! $(( $l_mode & $l_smask )) -gt 0 ] && a_dir+=(\"$l_file\")\n fi\n fi\n done < <(find \"$l_mount\" -xdev \\( \"${a_path[@]}\" \\) \\( -type f -o -type d \\) -perm -0002 -print0 2> /dev/null)\n done < <(findmnt -Dkerno fstype,target | awk '($1 !~ /^\\s*(nfs|proc|smb|vfat|iso9660|efivarfs|selinuxfs)/ && $2 !~ /^(\\/run\\/user\\/|\\/tmp|\\/var\\/tmp)/){print $2}')\n if ! (( ${#a_file[@]} > 0 )); then\n l_output=\"$l_output\\n - No world writable files exist on the local filesystem.\"\n else\n l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_file[@]}\")\\\" World writable files on the system.\\n - The following is a list of World writable files:\\n$(printf '%s\\n' \"${a_file[@]}\")\\n - end of list\\n\"\n fi\n if ! (( ${#a_dir[@]} > 0 )); then\n l_output=\"$l_output\\n - Sticky bit is set on world writable directories on the local filesystem.\"\n else\n l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_dir[@]}\")\\\" World writable directories without the sticky bit on the system.\\n - The following is a list of World writable directories without the sticky bit:\\n$(printf '%s\\n' \"${a_dir[@]}\")\\n - end of list\\n\"\n fi\n unset a_path; unset a_arr; unset a_file; unset a_dir # Remove arrays\n # If l_output2 is empty, we pass\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured * :\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\"\n [ -n \"$l_output\" ] && echo -e \"- * Correctly configured * :\\n$l_output\\n\"\n fi\n}\n```\n\n**Note:** On systems with a large number of files and/or directories, this audit may be a long running process",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.1.12",
                "title": "Ensure no files or directories without an owner and a group exist",
                "props": [
                  {
                    "name": "label",
                    "value": "7.1.12"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.1.12_statement",
                    "prose": "Administrators may delete users or groups from the system and neglect to remove all files and/or directories owned by those users or groups."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.1.12_assessment-objective",
                    "prose": "Rationale: A new user or group who is assigned a deleted user's user ID or group ID may then end up \"owning\" a deleted user or group's files, and thus have more access on the system than was intended."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.1.12_guidance",
                    "prose": "Remove or set ownership and group ownership of these files and/or directories to an active user on the system as appropriate."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.1.12_assessment-method",
                    "prose": "Run the following script to verify no unowned or ungrouped files or directories exist:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n a_nouser=(); a_nogroup=() # Initialize arrays\n a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path \"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path \"*/kubelet/plugins/*\" -a ! -path \"/sys/fs/cgroup/memory/*\" -a ! -path \"/var/*/private/*\")\n while IFS= read -r l_mount; do\n while IFS= read -r -d $'\\0' l_file; do\n if [ -e \"$l_file\" ]; then\n while IFS=: read -r l_user l_group; do\n [ \"$l_user\" = \"UNKNOWN\" ] && a_nouser+=(\"$l_file\")\n [ \"$l_group\" = \"UNKNOWN\" ] && a_nogroup+=(\"$l_file\")\n done < <(stat -Lc '%U:%G' \"$l_file\")\n fi\n done < <(find \"$l_mount\" -xdev \\( \"${a_path[@]}\" \\) \\( -type f -o -type d \\) \\( -nouser -o -nogroup \\) -print0 2> /dev/null)\n done < <(findmnt -Dkerno fstype,target | awk '($1 !~ /^\\s*(nfs|proc|smb|vfat|iso9660|efivarfs|selinuxfs)/ && $2 !~ /^\\/run\\/user\\//){print $2}')\n if ! (( ${#a_nouser[@]} > 0 )); then\n l_output=\"$l_output\\n - No files or directories without a owner exist on the local filesystem.\"\n else\n l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_nouser[@]}\")\\\" unowned files or directories on the system.\\n - The following is a list of unowned files and/or directories:\\n$(printf '%s\\n' \"${a_nouser[@]}\")\\n - end of list\"\n fi\n if ! (( ${#a_nogroup[@]} > 0 )); then\n l_output=\"$l_output\\n - No files or directories without a group exist on the local filesystem.\"\n else\n l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_nogroup[@]}\")\\\" ungrouped files or directories on the system.\\n - The following is a list of ungrouped files and/or directories:\\n$(printf '%s\\n' \"${a_nogroup[@]}\")\\n - end of list\"\n fi \n unset a_path; unset a_arr ; unset a_nouser; unset a_nogroup # Remove arrays\n if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured * :\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\"\n [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured * :\\n$l_output\\n\"\n fi\n}\n```\n\n**Note:** On systems with a large number of files and/or directories, this audit may be a long running process",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.1.13",
                "title": "Ensure SUID and SGID files are reviewed",
                "props": [
                  {
                    "name": "label",
                    "value": "7.1.13"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.1.13_statement",
                    "prose": "The owner of a file can set the file's permissions to run with the owner's or group's permissions, even if the user running the program is not the owner or a member of the group. The most common reason for a SUID or SGID program is to enable users to perform functions (such as changing their password) that require root privileges."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.1.13_assessment-objective",
                    "prose": "Rationale: There are valid reasons for SUID and SGID programs, but it is important to identify and review such programs to ensure they are legitimate. Review the files returned by the action in the audit section and check to see if system binaries have a different checksum than what from the package. This is an indication that the binary may have been replaced."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.1.13_guidance",
                    "prose": "Ensure that no rogue SUID or SGID programs have been introduced into the system. Review the files returned by the action in the Audit section and confirm the integrity of these binaries."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.1.13_assessment-method",
                    "prose": "Run the following script to generate a list of SUID and SGID files:\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\"\n a_suid=(); a_sgid=() # initialize arrays\n while IFS= read -r l_mount; do\n while IFS= read -r -d $'\\0' l_file; do\n if [ -e \"$l_file\" ]; then\n l_mode=\"$(stat -Lc '%#a' \"$l_file\")\"\n [ $(( $l_mode & 04000 )) -gt 0 ] && a_suid+=(\"$l_file\")\n [ $(( $l_mode & 02000 )) -gt 0 ] && a_sgid+=(\"$l_file\")\n fi\n done < <(find \"$l_mount\" -xdev -type f \\( -perm -2000 -o -perm -4000 \\) -print0 2>/dev/null)\n done < <(findmnt -Dkerno fstype,target,options | awk '($1 !~ /^\\s*(nfs|proc|smb|vfat|iso9660|efivarfs|selinuxfs)/ && $2 !~ /^\\/run\\/user\\// && $3 !~/noexec/ && $3 !~/nosuid/) {print $2}')\n if ! (( ${#a_suid[@]} > 0 )); then\n l_output=\"$l_output\\n - No executable SUID files exist on the system\"\n else\n l_output2=\"$l_output2\\n - List of \\\"$(printf '%s' \"${#a_suid[@]}\")\\\" SUID executable files:\\n$(printf '%s\\n' \"${a_suid[@]}\")\\n - end of list -\\n\"\n fi\n if ! (( ${#a_sgid[@]} > 0 )); then\n l_output=\"$l_output\\n - No SGID files exist on the system\"\n else\n l_output2=\"$l_output2\\n - List of \\\"$(printf '%s' \"${#a_sgid[@]}\")\\\" SGID executable files:\\n$(printf '%s\\n' \"${a_sgid[@]}\")\\n - end of list -\\n\"\n fi\n [ -n \"$l_output2\" ] && l_output2=\"$l_output2\\n- Review the preceding list(s) of SUID and/or SGID files to\\n- ensure that no rogue programs have been introduced onto the system.\\n\" \n unset a_arr; unset a_suid; unset a_sgid # Remove arrays\n # If l_output2 is empty, Nothing to report\n if [ -z \"$l_output2\" ]; then\n echo -e \"\\n- Audit Result:\\n$l_output\\n\"\n else\n echo -e \"\\n- Audit Result:\\n$l_output2\\n\"\n [ -n \"$l_output\" ] && echo -e \"$l_output\\n\"\n fi\n}\n```\n\n**Note:** on systems with a large number of files, this may be a long running process",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          },
          {
            "id": "section-7-2",
            "title": "Local User and Group Settings",
            "props": [
              {
                "name": "label",
                "value": "7.2"
              }
            ],
            "controls": [
              {
                "id": "cis-7.2.1",
                "title": "Ensure accounts in /etc/passwd use shadowed passwords",
                "props": [
                  {
                    "name": "label",
                    "value": "7.2.1"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.2.1_statement",
                    "prose": "Local accounts can uses shadowed passwords. With shadowed passwords, The passwords are saved in shadow password file, `/etc/shadow`, encrypted by a salted one-way hash. Accounts with a shadowed password have an `x` in the second field in `/etc/passwd`."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.2.1_assessment-objective",
                    "prose": "Rationale: The `/etc/passwd` file also contains information like user ID's and group ID's that are used by many system programs. Therefore, the `/etc/passwd` file must remain world readable. In spite of encoding the password with a randomly-generated one-way hash function, an attacker could still break the system if they got access to the `/etc/passwd` file. This can be mitigated by using shadowed passwords, thus moving the passwords in the `/etc/passwd` file to `/etc/shadow`. The `/etc/shadow` file is set so only root will be able to read and write. This helps mitigate the risk of an attacker gaining access to the encoded passwords with which to perform a dictionary attack. \n\n**Note:**\n- All accounts must have passwords or be locked to prevent the account from being used by an unauthorized user.\n- A user account with an empty second field in `/etc/passwd` allows the account to be logged into by providing only the username."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.2.1_guidance",
                    "prose": "Run the following command to set accounts to use shadowed passwords and migrate passwords in `/etc/passwd` to `/etc/shadow`:\n\n```\n# pwconv\n```\n\nInvestigate to determine if the account is logged in and what it is being used for, to determine if it needs to be forced off."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.2.1_assessment-method",
                    "prose": "Run the following command and verify that no output is returned:\n\n```\n# awk -F: '($2 != \"x\" ) { print \"User: \\\"\" $1 \"\\\" is not set to shadowed passwords \"}' /etc/passwd\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.2.2",
                "title": "Ensure /etc/shadow password fields are not empty",
                "props": [
                  {
                    "name": "label",
                    "value": "7.2.2"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.2.2_statement",
                    "prose": "An account with an empty password field means that anybody may log in as that user without providing a password."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.2.2_assessment-objective",
                    "prose": "Rationale: All accounts must have passwords or be locked to prevent the account from being used by an unauthorized user."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.2.2_guidance",
                    "prose": "If any accounts in the `/etc/shadow` file do not have a password, run the following command to lock the account until it can be determined why it does not have a password:\n\n```\n# passwd -l <username>\n```\n\nAlso, check to see if the account is logged in and investigate what it is being used for to determine if it needs to be forced off."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.2.2_assessment-method",
                    "prose": "Run the following command and verify that no output is returned:\n\n```\n# awk -F: '($2 == \"\" ) { print $1 \" does not have a password \"}' /etc/shadow\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.2.3",
                "title": "Ensure all groups in /etc/passwd exist in /etc/group",
                "props": [
                  {
                    "name": "label",
                    "value": "7.2.3"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.2.3_statement",
                    "prose": "Over time, system administration errors and changes can lead to groups being defined in `/etc/passwd` but not in `/etc/group` ."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.2.3_assessment-objective",
                    "prose": "Rationale: Groups defined in the `/etc/passwd` file but not in the `/etc/group` file pose a threat to system security since group permissions are not properly managed."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.2.3_guidance",
                    "prose": "Analyze the output of the Audit step above and perform the appropriate action to correct any discrepancies found."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.2.3_assessment-method",
                    "prose": "Run the following script to verify all GIDs in `/etc/passwd` exist in `/etc/group`:\n\n```\n#!/usr/bin/env bash\n\n{\n a_passwd_group_gid=(\"$(awk -F: '{print $4}' /etc/passwd | sort -u)\")\n a_group_gid=(\"$(awk -F: '{print $3}' /etc/group | sort -u)\")\n a_passwd_group_diff=(\"$(printf '%s\\n' \"${a_group_gid[@]}\" \"${a_passwd_group_gid[@]}\" | sort | uniq -u)\")\n while IFS= read -r l_gid; do\n awk -F: '($4 == '\"$l_gid\"') {print \" - User: \\\"\" $1 \"\\\" has GID: \\\"\" $4 \"\\\" which does not exist in /etc/group\" }' /etc/passwd\n done < <(printf '%s\\n' \"${a_passwd_group_gid[@]}\" \"${a_passwd_group_diff[@]}\" | sort | uniq -D | uniq)\n unset a_passwd_group_gid; unset a_group_gid; unset a_passwd_group_diff\n}\n```\n\nNothing should be returned",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.2.4",
                "title": "Ensure no duplicate UIDs exist",
                "props": [
                  {
                    "name": "label",
                    "value": "7.2.4"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.2.4_statement",
                    "prose": "Although the `useradd` program will not let you create a duplicate User ID (UID), it is possible for an administrator to manually edit the `/etc/passwd` file and change the UID field."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.2.4_assessment-objective",
                    "prose": "Rationale: Users must be assigned unique UIDs for accountability and to ensure appropriate access protections."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.2.4_guidance",
                    "prose": "Based on the results of the audit script, establish unique UIDs and review all files owned by the shared UIDs to determine which UID they are supposed to belong to."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.2.4_assessment-method",
                    "prose": "Run the following script and verify no results are returned:\n\n```\n#!/usr/bin/env bash\n\n{\n while read -r l_count l_uid; do\n if [ \"$l_count\" -gt 1 ]; then\n echo -e \"Duplicate UID: \\\"$l_uid\\\" Users: \\\"$(awk -F: '($3 == n) { print $1 }' n=$l_uid /etc/passwd | xargs)\\\"\"\n fi\n done < <(cut -f3 -d\":\" /etc/passwd | sort -n | uniq -c)\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.2.5",
                "title": "Ensure no duplicate GIDs exist",
                "props": [
                  {
                    "name": "label",
                    "value": "7.2.5"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.2.5_statement",
                    "prose": "Although the `groupadd` program will not let you create a duplicate Group ID (GID), it is possible for an administrator to manually edit the `/etc/group` file and change the GID field."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.2.5_assessment-objective",
                    "prose": "Rationale: User groups must be assigned unique GIDs for accountability and to ensure appropriate access protections."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.2.5_guidance",
                    "prose": "Based on the results of the audit script, establish unique GIDs and review all files owned by the shared GID to determine which group they are supposed to belong to."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.2.5_assessment-method",
                    "prose": "Run the following script and verify no results are returned:\n\n```\n#!/usr/bin/env bash\n\n{\n while read -r l_count l_gid; do\n if [ \"$l_count\" -gt 1 ]; then\n echo -e \"Duplicate GID: \\\"$l_gid\\\" Groups: \\\"$(awk -F: '($3 == n) { print $1 }' n=$l_gid /etc/group | xargs)\\\"\"\n fi\n done < <(cut -f3 -d\":\" /etc/group | sort -n | uniq -c)\n} \n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.2.6",
                "title": "Ensure no duplicate user names exist",
                "props": [
                  {
                    "name": "label",
                    "value": "7.2.6"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.2.6_statement",
                    "prose": "Although the `useradd` program will not let you create a duplicate user name, it is possible for an administrator to manually edit the `/etc/passwd` file and change the user name."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.2.6_assessment-objective",
                    "prose": "Rationale: If a user is assigned a duplicate user name, it will create and have access to files with the first UID for that username in `/etc/passwd` . For example, if \"test4\" has a UID of 1000 and a subsequent \"test4\" entry has a UID of 2000, logging in as \"test4\" will use UID 1000. Effectively, the UID is shared, which is a security problem."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.2.6_guidance",
                    "prose": "Based on the results of the audit script, establish unique user names for the users. File ownerships will automatically reflect the change as long as the users have unique UIDs."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.2.6_assessment-method",
                    "prose": "Run the following script and verify no results are returned:\n\n```\n#!/usr/bin/env bash\n\n{\n while read -r l_count l_user; do\n if [ \"$l_count\" -gt 1 ]; then\n echo -e \"Duplicate User: \\\"$l_user\\\" Users: \\\"$(awk -F: '($1 == n) { print $1 }' n=$l_user /etc/passwd | xargs)\\\"\"\n fi\n done < <(cut -f1 -d\":\" /etc/group | sort -n | uniq -c)\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.2.7",
                "title": "Ensure no duplicate group names exist",
                "props": [
                  {
                    "name": "label",
                    "value": "7.2.7"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.2.7_statement",
                    "prose": "Although the `groupadd` program will not let you create a duplicate group name, it is possible for an administrator to manually edit the `/etc/group` file and change the group name."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.2.7_assessment-objective",
                    "prose": "Rationale: If a group is assigned a duplicate group name, it will create and have access to files with the first GID for that group in `/etc/group` . Effectively, the GID is shared, which is a security problem."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.2.7_guidance",
                    "prose": "Based on the results of the audit script, establish unique names for the user groups. File group ownerships will automatically reflect the change as long as the groups have unique GIDs."
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.2.7_assessment-method",
                    "prose": "Run the following script and verify no results are returned:\n\n```\n#!/usr/bin/env bash\n\n{\n while read -r l_count l_group; do\n if [ \"$l_count\" -gt 1 ]; then\n echo -e \"Duplicate Group: \\\"$l_group\\\" Groups: \\\"$(awk -F: '($1 == n) { print $1 }' n=$l_group /etc/group | xargs)\\\"\"\n fi\n done < <(cut -f1 -d\":\" /etc/group | sort -n | uniq -c)\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.2.8",
                "title": "Ensure local interactive user home directories are configured",
                "props": [
                  {
                    "name": "label",
                    "value": "7.2.8"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.2.8_statement",
                    "prose": "The user home directory is space defined for the particular user to set local environment variables and to store personal files. While the system administrator can establish secure permissions for users' home directories, the users can easily override these. Users can be defined in `/etc/passwd` without a home directory or with a home directory that does not actually exist."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.2.8_assessment-objective",
                    "prose": "Rationale: Since the user is accountable for files stored in the user home directory, the user must be the owner of the directory. Group or world-writable user home directories may enable malicious users to steal or modify other users' data or to gain another user's system privileges. If the user's home directory does not exist or is unassigned, the user will be placed in \"/\" and will not be able to write any files or have local environment variables set."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.2.8_guidance",
                    "prose": "If a local interactive users' home directory is undefined and/or doesn't exist, follow local site policy and perform one of the following:\n- Lock the user account\n- Remove the user from the system\n- create a directory for the user. If undefined, edit `/etc/passwd` and add the absolute path to the directory to the last field of the user.\n\nRun the following script to:\n- Remove excessive permissions from local interactive users home directories\n- Update the home directory's owner\n\n```\n#!/usr/bin/env bash\n\n{\n l_output2=\"\"\n l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\"\n unset a_uarr && a_uarr=() # Clear and initialize array\n while read -r l_epu l_eph; do # Populate array with users and user home location\n a_uarr+=(\"$l_epu $l_eph\")\n done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\"\n l_asize=\"${#a_uarr[@]}\" # Here if we want to look at number of users before proceeding \n [ \"$l_asize \" -gt \"10000\" ] && echo -e \"\\n ** INFO **\\n - \\\"$l_asize\\\" Local interactive users found on the system\\n - This may be a long running process\\n\"\n while read -r l_user l_home; do\n if [ -d \"$l_home\" ]; then\n l_mask='0027'\n l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\"\n while read -r l_own l_mode; do\n if [ \"$l_user\" != \"$l_own\" ]; then\n l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is owned by: \\\"$l_own\\\"\\n - changing ownership to: \\\"$l_user\\\"\\n\"\n chown \"$l_user\" \"$l_home\"\n fi\n if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is mode: \\\"$l_mode\\\" should be mode: \\\"$l_max\\\" or more restrictive\\n - removing excess permissions\\n\"\n chmod g-w,o-rwx \"$l_home\"\n fi\n done <<< \"$(stat -Lc '%U %#a' \"$l_home\")\"\n else\n l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" Doesn't exist\\n - Please create a home in accordance with local site policy\"\n fi\n done <<< \"$(printf '%s\\n' \"${a_uarr[@]}\")\"\n if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass\n echo -e \" - No modification needed to local interactive users home directories\"\n else\n echo -e \"\\n$l_output2\"\n fi\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.2.8_assessment-method",
                    "prose": "Run the following script to Ensure:\n- local interactive user home directories exist\n- Ensure local interactive users own their home directories\n- Ensure local interactive user home directories are mode 750 or more restrictive\n\n```\n#!/usr/bin/env bash\n\n{\n l_output=\"\" l_output2=\"\" l_heout2=\"\" l_hoout2=\"\" l_haout2=\"\"\n l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\"\n unset a_uarr && a_uarr=() # Clear and initialize array\n while read -r l_epu l_eph; do # Populate array with users and user home location\n a_uarr+=(\"$l_epu $l_eph\")\n done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\"\n l_asize=\"${#a_uarr[@]}\" # Here if we want to look at number of users before proceeding \n [ \"$l_asize \" -gt \"10000\" ] && echo -e \"\\n ** INFO **\\n - \\\"$l_asize\\\" Local interactive users found on the system\\n - This may be a long running check\\n\"\n while read -r l_user l_home; do\n if [ -d \"$l_home\" ]; then\n l_mask='0027'\n l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\"\n while read -r l_own l_mode; do\n [ \"$l_user\" != \"$l_own\" ] && l_hoout2=\"$l_hoout2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is owned by: \\\"$l_own\\\"\"\n if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n l_haout2=\"$l_haout2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is mode: \\\"$l_mode\\\" should be mode: \\\"$l_max\\\" or more restrictive\"\n fi\n done <<< \"$(stat -Lc '%U %#a' \"$l_home\")\"\n else\n l_heout2=\"$l_heout2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" Doesn't exist\"\n fi\n done <<< \"$(printf '%s\\n' \"${a_uarr[@]}\")\"\n [ -z \"$l_heout2\" ] && l_output=\"$l_output\\n - home directories exist\" || l_output2=\"$l_output2$l_heout2\"\n [ -z \"$l_hoout2\" ] && l_output=\"$l_output\\n - own their home directory\" || l_output2=\"$l_output2$l_hoout2\"\n [ -z \"$l_haout2\" ] && l_output=\"$l_output\\n - home directories are mode: \\\"$l_max\\\" or more restrictive\" || l_output2=\"$l_output2$l_haout2\"\n [ -n \"$l_output\" ] && l_output=\" - All local interactive users:$l_output\"\n if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass\n echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured * :\\n$l_output\"\n else\n echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\"\n [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured * :\\n$l_output\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              },
              {
                "id": "cis-7.2.9",
                "title": "Ensure local interactive user dot files access is configured",
                "props": [
                  {
                    "name": "label",
                    "value": "7.2.9"
                  }
                ],
                "parts": [
                  {
                    "name": "statement",
                    "id": "cis-7.2.9_statement",
                    "prose": "While the system administrator can establish secure permissions for users' \"dot\" files, the users can easily override these.\n- `.forward` file specifies an email address to forward the user's mail to.\n- `.rhost` file provides the \"remote authentication\" database for the rcp, rlogin, and rsh commands and the rcmd() function. These files bypass the standard password-based user authentication mechanism. They specify remote hosts and users that are considered trusted (i.e. are allowed to access the local system without supplying a password)\n- `.netrc` file contains data for logging into a remote host or passing authentication to an API.\n- `.bash_history` file keeps track of the user\u2019s commands."
                  },
                  {
                    "name": "assessment-objective",
                    "id": "cis-7.2.9_assessment-objective",
                    "prose": "Rationale: User configuration files with excessive or incorrect access may enable malicious users to steal or modify other users' data or to gain another user's system privileges."
                  },
                  {
                    "name": "guidance",
                    "id": "cis-7.2.9_guidance",
                    "prose": "Making global modifications to users' files without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user dot file permissions and determine the action to be taken in accordance with site policy.\n\nThe following script will:\n- remove excessive permissions on `dot` files within interactive users' home directories\n- change ownership of `dot` files within interactive users' home directories to the user\n- change group ownership of `dot` files within interactive users' home directories to the user's primary group\n- list `.forward` and `.rhost` files to be investigated and manually deleted\n\n```\n#!/usr/bin/env bash\n\n{\n a_output2=(); a_output3=()\n l_maxsize=\"1000\" # Maximum number of local interactive users before warning (Default 1,000)\n l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\"\n a_user_and_home=() # Create array with local users and their home directories\n while read -r l_local_user l_local_user_home; do # Populate array with users and user home location\n [[ -n \"$l_local_user\" && -n \"$l_local_user_home\" ]] && a_user_and_home+=(\"$l_local_user:$l_local_user_home\")\n done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\"\n l_asize=\"${#a_user_and_home[@]}\" # Here if we want to look at number of users before proceeding \n [ \"${#a_user_and_home[@]}\" -gt \"$l_maxsize\" ] && printf '%s\\n' \"\" \" ** INFO **\" \\\n \" - \\\"$l_asize\\\" Local interactive users found on the system\" \\\n \" - This may be a long running check\" \"\"\n file_access_fix()\n {\n a_access_out=()\n l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\"\n if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n printf '%s\\n' \"\" \" - File: \\\"$l_hdfile\\\" is mode: \\\"$l_mode\\\" and should be mode: \\\"$l_max\\\" or more restrictive\" \\\n \" Updating file: \\\"$l_hdfile\\\" to be mode: \\\"$l_max\\\" or more restrictive\"\n chmod \"$l_change\" \"$l_hdfile\"\n fi\n if [[ ! \"$l_owner\" =~ ($l_user) ]]; then\n printf '%s\\n' \"\" \" - File: \\\"$l_hdfile\\\" owned by: \\\"$l_owner\\\" and should be owned by \\\"${l_user//|/ or }\\\"\" \\\n \" Updating file: \\\"$l_hdfile\\\" to be owned by \\\"${l_user//|/ or }\\\"\"\n chown \"$l_user\" \"$l_hdfile\"\n fi\n if [[ ! \"$l_gowner\" =~ ($l_group) ]]; then\n printf '%s\\n' \"\" \" - File: \\\"$l_hdfile\\\" group owned by: \\\"$l_gowner\\\" and should be group owned by \\\"${l_group//|/ or }\\\"\" \\\n \" Updating file: \\\"$l_hdfile\\\" to be group owned by \\\"${l_group//|/ or }\\\"\"\n chgrp \"$l_group\" \"$l_hdfile\"\n fi\n }\n while IFS=: read -r l_user l_home; do\n a_dot_file=(); a_netrc=(); a_netrc_warn=(); a_bhout=(); a_hdirout=()\n if [ -d \"$l_home\" ]; then\n l_group=\"$(id -gn \"$l_user\" | xargs)\";l_group=\"${l_group// /|}\"\n while IFS= read -r -d $'\\0' l_hdfile; do\n while read -r l_mode l_owner l_gowner; do\n case \"$(basename \"$l_hdfile\")\" in\n .forward | .rhost )\n a_dot_file+=(\" - File: \\\"$l_hdfile\\\" exists\" \" Please review and manually delete this file\") ;;\n .netrc )\n l_mask='0177'; l_change=\"u-x,go-rwx\"; file_access_fix\n a_netrc_warn+=(\" - File: \\\"$l_hdfile\\\" exists\") ;;\n .bash_history )\n l_mask='0177'; l_change=\"u-x,go-rwx\"; file_access_fix ;;\n * )\n l_mask='0133'; l_change=\"u-x,go-wx\"; file_access_fix ;;\n esac\n done < <(stat -Lc '%#a %U %G' \"$l_hdfile\")\n done < <(find \"$l_home\" -xdev -type f -name '.*' -print0)\n fi\n [ \"${#a_dot_file[@]}\" -gt 0 ] && a_output2+=(\" - User: \\\"$l_user\\\" Home Directory: \\\"$l_home\\\"\" \"${a_dot_file[@]}\")\n [ \"${#a_netrc_warn[@]}\" -gt 0 ] && a_output3+=(\" - User: \\\"$l_user\\\" Home Directory: \\\"$l_home\\\"\" \"${a_netrc_warn[@]}\")\n done <<< \"$(printf '%s\\n' \"${a_user_and_home[@]}\")\"\n [ \"${#a_output3[@]}\" -gt 0 ] && printf '%s\\n' \"\" \" ** WARNING **\" \"${a_output3[@]}\" \"\"\n [ \"${#a_output2[@]}\" -gt 0 ] && printf '%s\\n' \"\" \"${a_output2[@]}\"\n}\n```"
                  },
                  {
                    "name": "assessment-method",
                    "id": "cis-7.2.9_assessment-method",
                    "prose": "Run the following script to verify local interactive user dot files:\n- Don't include `.forward`, `.rhost`, or `.netrc` files\n- Are mode 0644 or more restrictive\n- Are owned by the local interactive user\n- Are group owned by the user's primary group\n- `.bash_history` is mode 0600 or more restrictive\n\n**Note:** If a `.netrc` file is required, and follows local site policy, it should be mode `0600` or more restrictive.\n\n```\n#!/usr/bin/env bash\n\n{\n a_output2=(); a_output3=()\n l_maxsize=\"1000\" # Maximum number of local interactive users before warning (Default 1,000)\n l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\"\n a_user_and_home=() # Create array with local users and their home directories\n while read -r l_local_user l_local_user_home; do # Populate array with users and user home location\n [[ -n \"$l_local_user\" && -n \"$l_local_user_home\" ]] && a_user_and_home+=(\"$l_local_user:$l_local_user_home\")\n done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\"\n l_asize=\"${#a_user_and_home[@]}\" # Here if we want to look at number of users before proceeding \n [ \"${#a_user_and_home[@]}\" -gt \"$l_maxsize\" ] && printf '%s\\n' \"\" \" ** INFO **\" \\\n \" - \\\"$l_asize\\\" Local interactive users found on the system\" \\\n \" - This may be a long running check\" \"\"\n file_access_chk()\n {\n a_access_out=()\n l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\"\n if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n a_access_out+=(\" - File: \\\"$l_hdfile\\\" is mode: \\\"$l_mode\\\" and should be mode: \\\"$l_max\\\" or more restrictive\")\n fi\n if [[ ! \"$l_owner\" =~ ($l_user) ]]; then\n a_access_out+=(\" - File: \\\"$l_hdfile\\\" owned by: \\\"$l_owner\\\" and should be owned by \\\"${l_user//|/ or }\\\"\")\n fi\n if [[ ! \"$l_gowner\" =~ ($l_group) ]]; then\n a_access_out+=(\" - File: \\\"$l_hdfile\\\" group owned by: \\\"$l_gowner\\\" and should be group owned by \\\"${l_group//|/ or }\\\"\")\n fi\n }\n while IFS=: read -r l_user l_home; do\n a_dot_file=(); a_netrc=(); a_netrc_warn=(); a_bhout=(); a_hdirout=()\n if [ -d \"$l_home\" ]; then\n l_group=\"$(id -gn \"$l_user\" | xargs)\";l_group=\"${l_group// /|}\"\n while IFS= read -r -d $'\\0' l_hdfile; do\n while read -r l_mode l_owner l_gowner; do\n case \"$(basename \"$l_hdfile\")\" in\n .forward | .rhost )\n a_dot_file+=(\" - File: \\\"$l_hdfile\\\" exists\") ;;\n .netrc )\n l_mask='0177'; file_access_chk\n if [ \"${#a_access_out[@]}\" -gt 0 ]; then\n a_netrc+=(\"${a_access_out[@]}\")\n else\n a_netrc_warn+=(\" - File: \\\"$l_hdfile\\\" exists\")\n fi ;;\n .bash_history )\n l_mask='0177'; file_access_chk\n [ \"${#a_access_out[@]}\" -gt 0 ] && a_bhout+=(\"${a_access_out[@]}\") ;;\n * )\n l_mask='0133'; file_access_chk\n [ \"${#a_access_out[@]}\" -gt 0 ] && a_hdirout+=(\"${a_access_out[@]}\") ;;\n esac\n done < <(stat -Lc '%#a %U %G' \"$l_hdfile\")\n done < <(find \"$l_home\" -xdev -type f -name '.*' -print0)\n fi\n if [[ \"${#a_dot_file[@]}\" -gt 0 || \"${#a_netrc[@]}\" -gt 0 || \"${#a_bhout[@]}\" -gt 0 || \"${#a_hdirout[@]}\" -gt 0 ]]; then\n a_output2+=(\" - User: \\\"$l_user\\\" Home Directory: \\\"$l_home\\\"\" \"${a_dot_file[@]}\" \"${a_netrc[@]}\" \"${a_bhout[@]}\" \"${a_hdirout[@]}\")\n fi\n [ \"${#a_netrc_warn[@]}\" -gt 0 ] && a_output3+=(\" - User: \\\"$l_user\\\" Home Directory: \\\"$l_home\\\"\" \"${a_netrc_warn[@]}\")\n done <<< \"$(printf '%s\\n' \"${a_user_and_home[@]}\")\"\n if [ \"${#a_output2[@]}\" -le 0 ]; then # If l_output2 is empty, we pass\n [ \"${#a_output3[@]}\" -gt 0 ] && printf '%s\\n' \" ** WARNING **\" \"${a_output3[@]}\"\n printf '%s\\n' \"- Audit Result:\" \" ** PASS **\"\n else\n printf '%s\\n' \"- Audit Result:\" \" ** FAIL **\" \" - * Reasons for audit failure * :\" \"${a_output2[@]}\" \"\"\n [ \"${#a_output3[@]}\" -gt 0 ] && printf '%s\\n' \" ** WARNING **\" \"${a_output3[@]}\"\n fi\n}\n```",
                    "props": [
                      {
                        "name": "method",
                        "value": "TEST",
                        "ns": "http://csrc.nist.gov/ns/rmf"
                      }
                    ]
                  }
                ]
              }
            ],
            "groups": []
          }
        ]
      }
    ],
    "back-matter": {
      "resources": [
        {
          "uuid": "17875565-63da-4265-ac99-39617f0481ca",
          "title": "CIS AlmaLinux OS 9 Benchmark v1.0.0 - Certification",
          "citation": {
            "text": "The Word and Excel versions of the CIS Benchmarks, as well as Build Kits, are available for use internally by our members and not intended to be distributed outside of the member organization. The Word and Excel versions, like that of the PDF versions, are governed by the CIS Terms and Conditions (Terms and Conditions Table of Contents (cisecurity.org)) as well as WorkBench Terms of Use (CIS WorkBench / Terms of Use (cisecurity.org))."
          },
          "rlinks": [
            {
              "href": "https://workbench.cisecurity.org/files/4229/download"
            }
          ]
        },
        {
          "uuid": "1c252644-2556-490a-af88-0aa90d6d965e",
          "title": "CIS AlmaLinux OS 9 Benchmark v1.0.0 - Excel",
          "citation": {
            "text": "The Word and Excel versions of the CIS Benchmarks, as well as Build Kits, are available for use internally by our members and not intended to be distributed outside of the member organization. The Word and Excel versions, like that of the PDF versions, are governed by the CIS Terms and Conditions (Terms and Conditions Table of Contents (cisecurity.org)) as well as WorkBench Terms of Use (CIS WorkBench / Terms of Use (cisecurity.org))."
          },
          "rlinks": [
            {
              "href": "https://workbench.cisecurity.org/files/4228/download"
            }
          ]
        },
        {
          "uuid": "0416a9ec-2ae8-45d7-82e3-bd136d4e040f",
          "title": "CIS AlmaLinux OS 9 Benchmark v1.0.0 - Word",
          "citation": {
            "text": "The Word and Excel versions of the CIS Benchmarks, as well as Build Kits, are available for use internally by our members and not intended to be distributed outside of the member organization. The Word and Excel versions, like that of the PDF versions, are governed by the CIS Terms and Conditions (Terms and Conditions Table of Contents (cisecurity.org)) as well as WorkBench Terms of Use (CIS WorkBench / Terms of Use (cisecurity.org))."
          },
          "rlinks": [
            {
              "href": "https://workbench.cisecurity.org/files/4227/download"
            }
          ]
        },
        {
          "uuid": "ec070426-9645-4980-a44f-ae2b01076d70",
          "title": "CIS AlmaLinux OS 9 Benchmark v1.0.0 - PDF",
          "citation": {
            "text": "This document provides prescriptive guidance for establishing a secure configuration posture for AlmaLinux OS 9 systems running on x86_64 platforms."
          },
          "rlinks": [
            {
              "href": "https://workbench.cisecurity.org/files/4226/download"
            }
          ]
        },
        {
          "uuid": "f854fee7-ef29-4b4b-ae86-f3fd32bf99be",
          "title": "CIS AlmaLinux OS 9 Benchmark v2.0.0 - Certification",
          "citation": {
            "text": "The Word and Excel versions of the CIS Benchmarks, as well as Build Kits, are available for use internally by our members and not intended to be distributed outside of the member organization. The Word and Excel versions, like that of the PDF versions, are governed by the CIS Terms and Conditions (Terms and Conditions Table of Contents (cisecurity.org)) as well as WorkBench Terms of Use (CIS WorkBench / Terms of Use (cisecurity.org))."
          },
          "rlinks": [
            {
              "href": "https://workbench.cisecurity.org/files/5428/download"
            }
          ]
        },
        {
          "uuid": "06ad8ed0-735d-4aaf-a058-298d0e1e60cf",
          "title": "CIS AlmaLinux OS 9 Benchmark v2.0.0 - Build Kit",
          "citation": {
            "text": "The Word and Excel versions of the CIS Benchmarks, as well as Build Kits, are available for use internally by our members and not intended to be distributed outside of the member organization. The Word and Excel versions, like that of the PDF versions, are governed by the CIS Terms and Conditions (Terms and Conditions Table of Contents (cisecurity.org)) as well as WorkBench Terms of Use (CIS WorkBench / Terms of Use (cisecurity.org))."
          },
          "rlinks": [
            {
              "href": "https://workbench.cisecurity.org/files/5525/download"
            }
          ]
        },
        {
          "uuid": "a7e5c594-1c94-47e3-bfb4-6977dcc704a1",
          "title": "CIS AlmaLinux OS 9 Benchmark v2.0.0 - Excel",
          "citation": {
            "text": "The Word and Excel versions of the CIS Benchmarks, as well as Build Kits, are available for use internally by our members and not intended to be distributed outside of the member organization. The Word and Excel versions, like that of the PDF versions, are governed by the CIS Terms and Conditions (Terms and Conditions Table of Contents (cisecurity.org)) as well as WorkBench Terms of Use (CIS WorkBench / Terms of Use (cisecurity.org))."
          },
          "rlinks": [
            {
              "href": "https://workbench.cisecurity.org/files/5427/download"
            }
          ]
        },
        {
          "uuid": "cbbde88b-e14e-40c2-8a1a-c96a4718f0b5",
          "title": "CIS AlmaLinux OS 9 Benchmark v2.0.0 - Word",
          "citation": {
            "text": "The Word and Excel versions of the CIS Benchmarks, as well as Build Kits, are available for use internally by our members and not intended to be distributed outside of the member organization. The Word and Excel versions, like that of the PDF versions, are governed by the CIS Terms and Conditions (Terms and Conditions Table of Contents (cisecurity.org)) as well as WorkBench Terms of Use (CIS WorkBench / Terms of Use (cisecurity.org))."
          },
          "rlinks": [
            {
              "href": "https://workbench.cisecurity.org/files/5426/download"
            }
          ]
        },
        {
          "uuid": "9f6eafb6-d1c4-4df3-8a62-cfb0de5cc517",
          "title": "CIS AlmaLinux OS 9 Benchmark v2.0.0 - PDF",
          "rlinks": [
            {
              "href": "https://workbench.cisecurity.org/files/5425/download"
            }
          ]
        }
      ]
    }
  }
}